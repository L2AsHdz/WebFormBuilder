
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.l2ashdz.appcliente.analizador.sintactico;

import com.l2ashdz.appcliente.model.Respuesta;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ResponseParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ResponseSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ResponseParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ResponseParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ResponseParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\035\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\004\004\000\002\004\004" +
    "\000\002\006\011\000\002\012\004\000\002\012\004\000" +
    "\002\012\004\000\002\012\004\000\002\012\004\000\002" +
    "\012\004\000\002\012\004\000\002\012\004\000\002\012" +
    "\004\000\002\012\004\000\002\010\010\000\002\013\005" +
    "\000\002\014\005\000\002\014\003\000\002\015\005\000" +
    "\002\015\005\000\002\016\003\000\002\020\003\000\002" +
    "\020\003\000\002\011\004\000\002\007\006\000\002\005" +
    "\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\004\027\004\001\002\000\004\031\011\001" +
    "\002\000\004\002\001\001\002\000\004\002\010\001\002" +
    "\000\004\002\uffff\001\002\000\004\002\000\001\002\000" +
    "\006\004\012\006\013\001\002\000\004\032\031\001\002" +
    "\000\004\030\014\001\002\000\004\027\015\001\002\000" +
    "\004\031\030\001\002\000\004\002\ufffe\001\002\000\004" +
    "\027\021\001\002\000\004\002\ufffd\001\002\000\004\031" +
    "\023\001\002\000\004\002\ufffc\001\002\000\006\004\012" +
    "\027\025\001\002\000\004\030\027\001\002\000\004\031" +
    "\026\001\002\000\004\027\025\001\002\000\006\002\uffe5" +
    "\030\uffe5\001\002\000\004\004\012\001\002\000\026\011" +
    "\034\012\043\013\040\014\041\015\044\016\035\017\037" +
    "\020\042\021\032\022\036\001\002\000\004\030\045\001" +
    "\002\000\004\037\102\001\002\000\004\030\045\001\002" +
    "\000\004\030\045\001\002\000\004\030\045\001\002\000" +
    "\004\030\045\001\002\000\004\030\045\001\002\000\004" +
    "\030\045\001\002\000\004\030\045\001\002\000\004\030" +
    "\045\001\002\000\004\030\045\001\002\000\004\034\047" +
    "\001\002\000\004\037\ufff6\001\002\000\004\010\050\001" +
    "\002\000\004\032\051\001\002\000\004\036\052\001\002" +
    "\000\004\034\054\001\002\000\004\037\ufff0\001\002\000" +
    "\006\023\057\024\055\001\002\000\004\032\070\001\002" +
    "\000\006\033\066\035\uffed\001\002\000\004\032\062\001" +
    "\002\000\004\035\061\001\002\000\004\037\uffef\001\002" +
    "\000\006\025\064\026\063\001\002\000\006\033\uffe8\035" +
    "\uffe8\001\002\000\006\033\uffe9\035\uffe9\001\002\000\006" +
    "\033\uffec\035\uffec\001\002\000\006\023\057\024\055\001" +
    "\002\000\004\035\uffee\001\002\000\002\001\002\000\006" +
    "\033\uffeb\035\uffeb\001\002\000\004\037\ufff9\001\002\000" +
    "\004\037\ufff3\001\002\000\004\037\ufff8\001\002\000\004" +
    "\037\ufff7\001\002\000\004\037\ufff5\001\002\000\004\037" +
    "\ufff2\001\002\000\004\037\ufff4\001\002\000\004\037\ufffa" +
    "\001\002\000\004\035\111\001\002\000\004\027\104\001" +
    "\002\000\004\005\106\001\002\000\006\002\ufffb\027\ufffb" +
    "\001\002\000\004\031\107\001\002\000\004\030\110\001" +
    "\002\000\006\002\uffe6\027\uffe6\001\002\000\004\027\uffe7" +
    "\001\002\000\004\037\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\110\000\010\002\005\003\006\006\004\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\015\006\016\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\021\005" +
    "\017\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\023\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\032\001\001\000" +
    "\004\010\111\001\001\000\004\011\102\001\001\000\004" +
    "\010\100\001\001\000\004\010\077\001\001\000\004\010" +
    "\076\001\001\000\004\010\075\001\001\000\004\010\074" +
    "\001\001\000\004\010\073\001\001\000\004\010\072\001" +
    "\001\000\004\010\071\001\001\000\004\010\045\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\052\001\001" +
    "\000\002\001\001\000\006\014\057\015\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\020\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\066\015\055\001\001\000\002\001\001\000\004\017" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ResponseParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ResponseParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ResponseParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<Respuesta> respuestas = new ArrayList();
    private Respuesta respuesta = new Respuesta();

    public List<Respuesta> getRespuestas() {
        return respuestas;
    }

    private void addRespuesta() {
        respuestas.add(respuesta);
        respuesta = new Respuesta();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss + " - " + descripcion);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ResponseParser$actions {
  private final ResponseParser parser;

  /** Constructor */
  CUP$ResponseParser$actions(ResponseParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action_part00000000(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ResponseParser$result;

      /* select the action based on the action number */
      switch (CUP$ResponseParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)).value;
		RESULT = start_val;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ResponseParser$parser.done_parsing();
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startResponses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startResponses ::= LESS_THAN EXCLAMATION_MARK START_RESPONSES GREATER_THAN responses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startResponses",1, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-4)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // responses ::= startResponse endResponses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responses",2, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // responses ::= startResponse responses 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responses",2, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // startResponse ::= LESS_THAN EXCLAMATION_MARK START_RESPONSE COLON responseType endContent endResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startResponse",4, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-6)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // responseType ::= LOGIN startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // responseType ::= CREATE_USER startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // responseType ::= MODIFY_USER startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // responseType ::= DELETE_USER startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // responseType ::= NEW_FORM startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // responseType ::= MODIFY_FORM startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // responseType ::= DELETE_FORM startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // responseType ::= NEW_COMPONENT startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // responseType ::= EDIT_COMPONENT startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // responseType ::= DELETE_COMPONENT startContent 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("responseType",8, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // startContent ::= GREATER_THAN OPEN_BRACE RESPONSE_PARAMS COLON OPEN_BRACKET bloqueResponse 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("startContent",6, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-5)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloqueResponse ::= OPEN_BRACE paramsResponse CLOSE_BRACE 
            {
              String RESULT =null;
		addRespuesta();
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("bloqueResponse",9, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramsResponse ::= paramResponse COMMA paramsResponse 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramsResponse",10, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramsResponse ::= paramResponse 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramsResponse",10, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramResponse ::= PARAM_STATE COLON state 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		respuesta.setEstado(s);
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramResponse",11, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramResponse ::= PARAM_MESSAGE COLON literal 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		respuesta.setMessage(l);
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("paramResponse",11, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-2)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ResponseParser$stack.peek()).value;
		RESULT = v;
              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("value",12, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // state ::= SUCCES 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("state",14, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // state ::= ERROR 
            {
              String RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("state",14, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endContent",7, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-1)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // endResponse ::= LESS_THAN END_RESPONSE EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endResponse",5, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // endResponses ::= LESS_THAN EXCLAMATION_MARK endResponses GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ResponseParser$result = parser.getSymbolFactory().newSymbol("endResponses",3, ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.elementAt(CUP$ResponseParser$top-3)), ((java_cup.runtime.Symbol)CUP$ResponseParser$stack.peek()), RESULT);
            }
          return CUP$ResponseParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ResponseParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ResponseParser$do_action(
    int                        CUP$ResponseParser$act_num,
    java_cup.runtime.lr_parser CUP$ResponseParser$parser,
    java.util.Stack            CUP$ResponseParser$stack,
    int                        CUP$ResponseParser$top)
    throws java.lang.Exception
    {
              return CUP$ResponseParser$do_action_part00000000(
                               CUP$ResponseParser$act_num,
                               CUP$ResponseParser$parser,
                               CUP$ResponseParser$stack,
                               CUP$ResponseParser$top);
    }
}

}
