
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.l2ashdz.appcliente.analizadores.sintactico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;
import com.l2ashdz.appcliente.model.solicitudes.Solicitud;
import com.l2ashdz.appcliente.model.solicitudes.TipoSolicitud;
import com.l2ashdz.appcliente.model.solicitudes.Parametro;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\171\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\004\004\000\002\004\004" +
    "\000\002\006\012\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\011\012\000\002\012\012" +
    "\000\002\013\012\000\002\015\005\000\002\015\003\000" +
    "\002\021\005\000\002\041\005\000\002\041\003\000\002" +
    "\044\011\000\002\050\003\000\002\050\003\000\002\016" +
    "\005\000\002\016\003\000\002\022\005\000\002\042\005" +
    "\000\002\042\003\000\002\045\011\000\002\051\003\000" +
    "\002\051\003\000\002\051\003\000\002\017\005\000\002" +
    "\017\003\000\002\023\005\000\002\043\005\000\002\043" +
    "\003\000\002\046\011\000\002\052\003\000\002\052\003" +
    "\000\002\052\003\000\002\052\003\000\002\020\005\000" +
    "\002\020\003\000\002\024\005\000\002\047\011\000\002" +
    "\025\005\000\002\025\003\000\002\030\005\000\002\055" +
    "\005\000\002\055\003\000\002\057\011\000\002\062\003" +
    "\000\002\062\003\000\002\062\003\000\002\062\003\000" +
    "\002\062\003\000\002\062\003\000\002\027\005\000\002" +
    "\027\003\000\002\032\005\000\002\061\011\000\002\026" +
    "\005\000\002\026\003\000\002\031\005\000\002\056\005" +
    "\000\002\056\003\000\002\060\011\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\033\005\000\002\033\003\000\002\036\005\000\002\064" +
    "\005\000\002\064\003\000\002\066\011\000\002\071\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003\000" +
    "\002\071\003\000\002\071\003\000\002\071\003\000\002" +
    "\071\003\000\002\071\003\000\002\071\003\000\002\071" +
    "\003\000\002\034\005\000\002\034\003\000\002\037\005" +
    "\000\002\065\005\000\002\065\003\000\002\067\011\000" +
    "\002\072\003\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\072\003\000\002\072\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\035\005\000" +
    "\002\035\003\000\002\040\005\000\002\070\011\000\002" +
    "\053\003\000\002\054\003\000\002\014\004\000\002\007" +
    "\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\004\070\004\001\002\000\004\072\011\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\001\001\002" +
    "\000\004\002\010\001\002\000\004\002\000\001\002\000" +
    "\006\004\012\005\013\001\002\000\004\074\027\001\002" +
    "\000\004\071\014\001\002\000\004\070\015\001\002\000" +
    "\004\072\026\001\002\000\004\070\020\001\002\000\004" +
    "\002\ufffe\001\002\000\004\072\023\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\ufffc\001\002\000\006\004\012" +
    "\007\024\001\002\000\004\071\025\001\002\000\004\002" +
    "\uff89\001\002\000\004\004\012\001\002\000\004\073\030" +
    "\001\002\000\026\013\032\014\042\015\037\016\040\026" +
    "\043\027\033\030\036\036\041\037\031\040\035\001\002" +
    "\000\004\073\142\001\002\000\004\073\105\001\002\000" +
    "\004\073\045\001\002\000\004\101\340\001\002\000\004" +
    "\073\142\001\002\000\004\073\045\001\002\000\004\073" +
    "\105\001\002\000\004\073\105\001\002\000\004\073\142" +
    "\001\002\000\004\073\105\001\002\000\004\073\045\001" +
    "\002\000\004\076\056\001\002\000\004\071\046\001\002" +
    "\000\004\076\047\001\002\000\004\073\050\001\002\000" +
    "\004\011\051\001\002\000\004\073\052\001\002\000\004" +
    "\074\053\001\002\000\004\100\054\001\002\000\004\076" +
    "\uffef\001\002\000\004\101\ufff6\001\002\000\004\073\064" +
    "\001\002\000\006\075\060\101\uffcd\001\002\000\004\076" +
    "\056\001\002\000\004\101\uffce\001\002\000\004\077\104" +
    "\001\002\000\006\075\102\077\uffca\001\002\000\016\021" +
    "\065\031\066\032\067\033\071\034\070\035\072\001\002" +
    "\000\004\073\uffc3\001\002\000\004\073\uffc8\001\002\000" +
    "\004\073\uffc7\001\002\000\004\073\uffc5\001\002\000\004" +
    "\073\uffc6\001\002\000\004\073\uffc4\001\002\000\004\073" +
    "\074\001\002\000\004\074\075\001\002\000\004\073\076" +
    "\001\002\000\004\102\077\001\002\000\004\073\uff8d\001" +
    "\002\000\004\073\101\001\002\000\006\075\uffc9\077\uffc9" +
    "\001\002\000\004\073\064\001\002\000\004\077\uffcb\001" +
    "\002\000\006\075\uffcc\101\uffcc\001\002\000\004\071\133" +
    "\001\002\000\004\076\111\001\002\000\004\101\ufff9\001" +
    "\002\000\006\075\131\101\uffe4\001\002\000\004\073\114" +
    "\001\002\000\006\075\127\077\uffe1\001\002\000\004\077" +
    "\126\001\002\000\010\017\115\020\117\021\116\001\002" +
    "\000\004\073\uffdf\001\002\000\004\073\uffdd\001\002\000" +
    "\004\073\uffde\001\002\000\004\073\121\001\002\000\004" +
    "\074\122\001\002\000\004\073\123\001\002\000\004\102" +
    "\077\001\002\000\004\073\125\001\002\000\006\075\uffe0" +
    "\077\uffe0\001\002\000\006\075\uffe3\101\uffe3\001\002\000" +
    "\004\073\114\001\002\000\004\077\uffe2\001\002\000\004" +
    "\076\111\001\002\000\004\101\uffe5\001\002\000\004\076" +
    "\134\001\002\000\004\073\135\001\002\000\004\010\136" +
    "\001\002\000\004\073\137\001\002\000\004\074\140\001" +
    "\002\000\004\100\141\001\002\000\004\076\ufff0\001\002" +
    "\000\004\071\200\001\002\000\004\076\146\001\002\000" +
    "\006\075\176\101\uffb3\001\002\000\004\101\ufff3\001\002" +
    "\000\004\073\151\001\002\000\004\077\175\001\002\000" +
    "\006\075\173\077\uffb0\001\002\000\030\031\156\041\154" +
    "\042\155\043\165\045\161\046\164\047\162\050\163\051" +
    "\157\052\152\053\160\001\002\000\004\073\uffa5\001\002" +
    "\000\004\073\166\001\002\000\004\073\uffad\001\002\000" +
    "\004\073\uffac\001\002\000\004\073\uffae\001\002\000\004" +
    "\073\uffa6\001\002\000\004\073\uffa4\001\002\000\004\073" +
    "\uffaa\001\002\000\004\073\uffa8\001\002\000\004\073\uffa7" +
    "\001\002\000\004\073\uffa9\001\002\000\004\073\uffab\001" +
    "\002\000\004\074\167\001\002\000\004\073\170\001\002" +
    "\000\004\102\077\001\002\000\004\073\172\001\002\000" +
    "\006\075\uffaf\077\uffaf\001\002\000\004\073\151\001\002" +
    "\000\004\077\uffb1\001\002\000\006\075\uffb2\101\uffb2\001" +
    "\002\000\004\076\146\001\002\000\004\101\uffb4\001\002" +
    "\000\004\076\201\001\002\000\004\073\202\001\002\000" +
    "\004\012\203\001\002\000\004\073\204\001\002\000\004" +
    "\074\205\001\002\000\004\100\206\001\002\000\004\076" +
    "\uffee\001\002\000\004\076\212\001\002\000\004\101\ufff8" +
    "\001\002\000\006\075\233\101\uffdb\001\002\000\004\073" +
    "\215\001\002\000\006\075\231\077\uffd8\001\002\000\004" +
    "\077\230\001\002\000\012\022\220\023\222\024\216\025" +
    "\217\001\002\000\004\073\uffd5\001\002\000\004\073\uffd4" +
    "\001\002\000\004\073\uffd3\001\002\000\004\073\223\001" +
    "\002\000\004\073\uffd6\001\002\000\004\074\224\001\002" +
    "\000\004\073\225\001\002\000\004\102\077\001\002\000" +
    "\004\073\227\001\002\000\006\075\uffd7\077\uffd7\001\002" +
    "\000\006\075\uffda\101\uffda\001\002\000\004\073\215\001" +
    "\002\000\004\077\uffd9\001\002\000\004\076\212\001\002" +
    "\000\004\101\uffdc\001\002\000\004\076\240\001\002\000" +
    "\006\075\252\101\uffd1\001\002\000\004\101\ufff7\001\002" +
    "\000\004\073\241\001\002\000\004\017\244\001\002\000" +
    "\004\077\243\001\002\000\006\075\uffd0\101\uffd0\001\002" +
    "\000\004\073\245\001\002\000\004\074\246\001\002\000" +
    "\004\073\247\001\002\000\004\102\077\001\002\000\004" +
    "\073\251\001\002\000\004\077\uffcf\001\002\000\004\076" +
    "\240\001\002\000\004\101\uffd2\001\002\000\004\076\257" +
    "\001\002\000\006\075\300\101\uffbd\001\002\000\004\101" +
    "\ufff5\001\002\000\004\073\262\001\002\000\004\077\277" +
    "\001\002\000\006\075\275\077\uffba\001\002\000\012\031" +
    "\264\032\266\033\267\034\265\001\002\000\004\073\270" +
    "\001\002\000\004\073\uffb8\001\002\000\004\073\uffb5\001" +
    "\002\000\004\073\uffb7\001\002\000\004\073\uffb6\001\002" +
    "\000\004\074\271\001\002\000\004\073\272\001\002\000" +
    "\004\102\077\001\002\000\004\073\274\001\002\000\006" +
    "\075\uffb9\077\uffb9\001\002\000\004\073\262\001\002\000" +
    "\004\077\uffbb\001\002\000\006\075\uffbc\101\uffbc\001\002" +
    "\000\004\076\257\001\002\000\004\101\uffbe\001\002\000" +
    "\004\076\305\001\002\000\006\075\336\101\uffa2\001\002" +
    "\000\004\101\ufff2\001\002\000\004\073\310\001\002\000" +
    "\006\075\334\077\uff9f\001\002\000\004\077\333\001\002" +
    "\000\032\031\314\041\312\042\313\043\325\044\321\045" +
    "\320\046\324\047\322\050\323\051\315\052\311\053\317" +
    "\001\002\000\004\073\uff94\001\002\000\004\073\uff9c\001" +
    "\002\000\004\073\uff9b\001\002\000\004\073\uff9d\001\002" +
    "\000\004\073\uff95\001\002\000\004\073\326\001\002\000" +
    "\004\073\uff93\001\002\000\004\073\uff99\001\002\000\004" +
    "\073\uff92\001\002\000\004\073\uff97\001\002\000\004\073" +
    "\uff96\001\002\000\004\073\uff98\001\002\000\004\073\uff9a" +
    "\001\002\000\004\074\327\001\002\000\004\073\330\001" +
    "\002\000\004\102\077\001\002\000\004\073\332\001\002" +
    "\000\006\075\uff9e\077\uff9e\001\002\000\006\075\uffa1\101" +
    "\uffa1\001\002\000\004\073\310\001\002\000\004\077\uffa0" +
    "\001\002\000\004\076\305\001\002\000\004\101\uffa3\001" +
    "\002\000\004\077\347\001\002\000\004\070\342\001\002" +
    "\000\004\006\344\001\002\000\006\002\ufffb\070\ufffb\001" +
    "\002\000\004\072\345\001\002\000\004\071\346\001\002" +
    "\000\006\002\uff8a\070\uff8a\001\002\000\004\070\uff8b\001" +
    "\002\000\004\076\353\001\002\000\004\101\ufff4\001\002" +
    "\000\006\075\365\101\uffc1\001\002\000\004\073\355\001" +
    "\002\000\004\077\364\001\002\000\004\031\356\001\002" +
    "\000\004\073\357\001\002\000\004\074\360\001\002\000" +
    "\004\073\361\001\002\000\004\102\077\001\002\000\004" +
    "\073\363\001\002\000\004\077\uffbf\001\002\000\006\075" +
    "\uffc0\101\uffc0\001\002\000\004\076\353\001\002\000\004" +
    "\101\uffc2\001\002\000\004\076\372\001\002\000\004\101" +
    "\ufffa\001\002\000\006\075\u0109\101\uffec\001\002\000\004" +
    "\073\375\001\002\000\004\077\u0108\001\002\000\006\075" +
    "\u0106\077\uffe9\001\002\000\006\017\377\020\u0100\001\002" +
    "\000\004\073\u0101\001\002\000\004\073\uffe7\001\002\000" +
    "\004\073\uffe6\001\002\000\004\074\u0102\001\002\000\004" +
    "\073\u0103\001\002\000\004\102\077\001\002\000\004\073" +
    "\u0105\001\002\000\006\075\uffe8\077\uffe8\001\002\000\004" +
    "\073\375\001\002\000\004\077\uffea\001\002\000\006\075" +
    "\uffeb\101\uffeb\001\002\000\004\076\372\001\002\000\004" +
    "\101\uffed\001\002\000\004\076\u010e\001\002\000\006\075" +
    "\u0118\101\uff90\001\002\000\004\101\ufff1\001\002\000\004" +
    "\073\u010f\001\002\000\004\031\u0112\001\002\000\004\077" +
    "\u0111\001\002\000\006\075\uff8f\101\uff8f\001\002\000\004" +
    "\073\u0113\001\002\000\004\074\u0114\001\002\000\004\073" +
    "\u0115\001\002\000\004\102\077\001\002\000\004\073\u0117" +
    "\001\002\000\004\077\uff8e\001\002\000\004\076\u010e\001" +
    "\002\000\004\101\uff91\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0117\000\010\002\006\003\004\006\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\004\016\006\015\001\001" +
    "\000\002\001\001\000\010\004\021\005\020\006\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\033\001\001\000\004\013\u010a\001\001\000\004\011" +
    "\366\001\001\000\004\012\347\001\001\000\004\014\340" +
    "\001\001\000\004\013\301\001\001\000\004\012\253\001" +
    "\001\000\004\011\234\001\001\000\004\011\206\001\001" +
    "\000\004\013\142\001\001\000\004\011\105\001\001\000" +
    "\004\012\043\001\001\000\006\025\054\030\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\055" +
    "\061\057\062\001\001\000\002\001\001\000\006\025\060" +
    "\030\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\072\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\055\102\057\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\016\106\022\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\042\112\045" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\051\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\042\127\045\111" +
    "\001\001\000\002\001\001\000\006\016\131\022\107\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\033\144\036\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\064\146\066\147\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\071\152\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\053\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\064\173\066\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\033\176\036\143\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\207\023\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\043\213" +
    "\046\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\052\220\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\053\225\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\043\231\046\212\001\001\000\002\001\001\000\006" +
    "\017\233\023\210\001\001\000\002\001\001\000\006\020" +
    "\236\024\235\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\047\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\053\247\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\252\024\235\001\001" +
    "\000\002\001\001\000\006\026\255\031\254\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\056\257\060\260" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\063" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\053\272\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\056\275\060\260\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\300" +
    "\031\254\001\001\000\002\001\001\000\006\034\303\037" +
    "\302\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\065\306\067\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\072\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\053\330\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\065\334\067\305" +
    "\001\001\000\002\001\001\000\006\034\336\037\302\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\342" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\027\350\032\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\061\353\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\053\361\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\365\032" +
    "\351\001\001\000\002\001\001\000\006\015\367\021\370" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\041" +
    "\372\044\373\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\050\375\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\053\u0103\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\041\u0106\044\373\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\u0109\021\370\001\001\000" +
    "\002\001\001\000\006\035\u010c\040\u010b\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\070\u010f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\u0115\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\035\u0118\040\u010b\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorAnalisis> errores = new ArrayList();
    private List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(List<Parametro> parametros, Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startRequests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startRequests ::= LESS_THAN EXCLAMATION_MARK START_REQUESTS GREATER_THAN requests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startRequests",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requests ::= startRequest endRequests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requests ::= startRequest requests 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON QUOTE_MARK requestType endContent endRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startRequest",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // requestType ::= LOGIN startContentUser bloquesLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // requestType ::= CREATE_USER startContentUser bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // requestType ::= MODIFY_USER startContentUser bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // requestType ::= DELETE_USER startContentUser bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // requestType ::= NEW_FORM startContentForm bloquesNewForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // requestType ::= MODIFY_FORM startContentForm bloquesEditForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // requestType ::= DELETE_FORM startContentForm bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // requestType ::= NEW_COMPONENT startContentComponent bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // requestType ::= EDIT_COMPONENT startContentComponent bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // requestType ::= DELETE_COMPONENT startContentComponent bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // startContentUser ::= QUOTE_MARK GREATER_THAN OPEN_BRACE QUOTE_MARK USER_CREDENTIALS QUOTE_MARK COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startContentUser",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // startContentForm ::= QUOTE_MARK GREATER_THAN OPEN_BRACE QUOTE_MARK FORM_PARAMS QUOTE_MARK COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startContentForm",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // startContentComponent ::= QUOTE_MARK GREATER_THAN OPEN_BRACE QUOTE_MARK COMPONENT_PARAMS QUOTE_MARK COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startContentComponent",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloquesLogin ::= bloqueLogin COMMA bloquesLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bloquesLogin ::= bloqueLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE 
            {
              Object RESULT =null;
		
                        solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        parametros = new ArrayList();
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueLogin",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramsLogin ::= paramLogin COMMA paramsLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // paramsLogin ::= paramLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramLogin ::= QUOTE_MARK nameParamLogin QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Parametro(n, v);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramLogin",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameParamLogin ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nameParamLogin ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloquesCreateUser ::= bloqueCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE 
            {
              Object RESULT =null;
		
                                solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                                parametros = new ArrayList();
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCreateUser",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramsCreateUser ::= paramCreateUser COMMA paramsCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramsCreateUser ::= paramCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramCreateUser ::= QUOTE_MARK nameParamCreateUser QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nameParamCreateUser ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nameParamCreateUser ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nameParamCreateUser ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloquesModifyUser ::= bloqueModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE 
            {
              Object RESULT =null;
		
                            solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueModifyUser",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramsModifyUser ::= paramModifyUser COMMA paramsModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramsModifyUser ::= paramModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramModifyUser ::= QUOTE_MARK nameParamModifyUser QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nameParamModifyUser ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nameParamModifyUser ::= PARAM_NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nameParamModifyUser ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nameParamModifyUser ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // bloquesDeleteUser ::= bloqueDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteUser",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // paramDeleteUser ::= QUOTE_MARK PARAM_USUARIO QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeleteUser",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloquesNewForm ::= bloqueNewForm COMMA bloquesNewForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // bloquesNewForm ::= bloqueNewForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloqueNewForm ::= OPEN_BRACE paramsNewForm CLOSE_BRACE 
            {
              Object RESULT =null;
		
                        solicitudes.add(new Solicitud(TipoSolicitud.NEW_FORM, parametros));
                        parametros = new ArrayList();
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueNewForm",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // paramsNewForm ::= paramNewForm COMMA paramsNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // paramsNewForm ::= paramNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramNewForm ::= QUOTE_MARK nameParamNewForm QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Parametro(n, v);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramNewForm",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // nameParamNewForm ::= PARAM_ID 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // nameParamNewForm ::= PARAM_TITULO_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // nameParamNewForm ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // nameParamNewForm ::= PARAM_TEMA 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // nameParamNewForm ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // nameParamNewForm ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // bloquesDeleteForm ::= bloqueDeleteForm COMMA bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // bloquesDeleteForm ::= bloqueDeleteForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloqueDeleteForm ::= OPEN_BRACE paramDeleteForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_FORM, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteForm",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // paramDeleteForm ::= QUOTE_MARK PARAM_ID QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeleteForm",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloquesEditForm ::= bloqueEditForm COMMA bloquesEditForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // bloquesEditForm ::= bloqueEditForm 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloqueEditForm ::= OPEN_BRACE paramsEditForm CLOSE_BRACE 
            {
              Object RESULT =null;
		
                    solicitudes.add(new Solicitud(TipoSolicitud.EDIT_FORM, parametros));
                    parametros = new ArrayList();
                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueEditForm",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // paramsEditForm ::= paramEditForm COMMA paramsEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // paramsEditForm ::= paramEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramEditForm ::= QUOTE_MARK nameParamEditForm QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Parametro(n, v);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramEditForm",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // nameParamEditForm ::= PARAM_ID 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditForm",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // nameParamEditForm ::= PARAM_TITULO_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditForm",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // nameParamEditForm ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditForm",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // nameParamEditForm ::= PARAM_TEMA 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditForm",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // bloquesNewComponent ::= bloqueNewComponent COMMA bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bloquesNewComponent ::= bloqueNewComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloqueNewComponent ::= OPEN_BRACE paramsNewComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		
                        solicitudes.add(new Solicitud(TipoSolicitud.NEW_COMPONENT, parametros));
                        parametros = new ArrayList();
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueNewComponent",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // paramsNewComponent ::= paramNewComponent COMMA paramsNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramsNewComponent ::= paramNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramNewComponent ::= QUOTE_MARK nameParamNewComponent QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",52, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // nameParamNewComponent ::= PARAM_ID 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // nameParamNewComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // nameParamNewComponent ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // nameParamNewComponent ::= PARAM_CLASE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // nameParamNewComponent ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // nameParamNewComponent ::= PARAM_ALINEACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // nameParamNewComponent ::= PARAM_REQUERIDO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // nameParamNewComponent ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // nameParamNewComponent ::= PARAM_FILAS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // nameParamNewComponent ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nameParamNewComponent ::= PARAM_URL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",55, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // bloquesEditComponent ::= bloqueEditComponent COMMA bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloquesEditComponent ::= bloqueEditComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloqueEditComponent ::= OPEN_BRACE paramsEditComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		
                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_COMPONENT, parametros));
                        parametros = new ArrayList();
                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueEditComponent",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // paramsEditComponent ::= paramEditComponent COMMA paramsEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paramsEditComponent ::= paramEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramEditComponent ::= QUOTE_MARK nameParamEditComponent QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // nameParamEditComponent ::= PARAM_ID 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // nameParamEditComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // nameParamEditComponent ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // nameParamEditComponent ::= PARAM_CLASE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // nameParamEditComponent ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // nameParamEditComponent ::= PARAM_ALINEACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // nameParamEditComponent ::= PARAM_REQUERIDO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // nameParamEditComponent ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // nameParamEditComponent ::= PARAM_FILAS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // nameParamEditComponent ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // nameParamEditComponent ::= PARAM_URL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nameParamEditComponent ::= PARAM_INDICE 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",56, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // bloquesDeleteComponent ::= bloqueDeleteComponent COMMA bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloquesDeleteComponent ::= bloqueDeleteComponent 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloqueDeleteComponent ::= OPEN_BRACE paramDeleteComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_COMPONENT, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteComponent",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // paramDeleteComponent ::= QUOTE_MARK PARAM_ID QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // id ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("id",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endContent",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endRequest",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // endRequests ::= LESS_THAN EXCLAMATION_MARK END_REQUESTS GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endRequests",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
