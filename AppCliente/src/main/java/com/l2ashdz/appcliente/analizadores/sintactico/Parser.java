
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.l2ashdz.appcliente.analizadores.sintactico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;
import com.l2ashdz.appcliente.model.solicitudes.Solicitud;
import com.l2ashdz.appcliente.model.solicitudes.TipoSolicitud;
import com.l2ashdz.appcliente.model.solicitudes.Parametro;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\012\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\005\010\000" +
    "\002\006\003\000\002\011\005\000\002\011\003\000\002" +
    "\015\005\000\002\021\005\000\002\021\003\000\002\024" +
    "\011\000\002\030\003\000\002\030\003\000\002\012\005" +
    "\000\002\012\003\000\002\016\005\000\002\022\005\000" +
    "\002\022\003\000\002\025\011\000\002\031\003\000\002" +
    "\031\003\000\002\031\003\000\002\013\005\000\002\013" +
    "\003\000\002\017\005\000\002\023\005\000\002\023\003" +
    "\000\002\026\011\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\014\005\000\002" +
    "\014\003\000\002\020\005\000\002\027\011\000\002\033" +
    "\003\000\002\007\004\000\002\010\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\004\022\004\001\002\000\004\024\011\001" +
    "\002\000\006\002\001\022\004\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\002\uffff\001" +
    "\002\000\004\004\012\001\002\000\004\026\013\001\002" +
    "\000\004\025\014\001\002\000\012\007\016\010\020\011" +
    "\017\012\021\001\002\000\004\033\160\001\002\000\004" +
    "\025\132\001\002\000\004\025\111\001\002\000\004\025" +
    "\062\001\002\000\004\025\022\001\002\000\004\023\023" +
    "\001\002\000\004\030\025\001\002\000\004\030\036\001" +
    "\002\000\004\025\026\001\002\000\004\006\030\001\002" +
    "\000\004\025\031\001\002\000\004\025\ufff8\001\002\000" +
    "\004\026\032\001\002\000\004\032\033\001\002\000\004" +
    "\030\ufff9\001\002\000\004\033\ufffb\001\002\000\006\027" +
    "\060\033\uffe5\001\002\000\004\025\041\001\002\000\006" +
    "\027\056\031\uffe2\001\002\000\004\031\055\001\002\000" +
    "\012\016\043\017\045\020\042\021\044\001\002\000\004" +
    "\025\uffdf\001\002\000\004\025\uffdd\001\002\000\004\025" +
    "\uffde\001\002\000\004\025\uffe0\001\002\000\004\025\047" +
    "\001\002\000\004\026\050\001\002\000\004\025\051\001" +
    "\002\000\004\034\053\001\002\000\004\025\054\001\002" +
    "\000\004\025\uffd8\001\002\000\006\027\uffe1\031\uffe1\001" +
    "\002\000\006\027\uffe4\033\uffe4\001\002\000\004\025\041" +
    "\001\002\000\004\031\uffe3\001\002\000\004\030\036\001" +
    "\002\000\004\033\uffe6\001\002\000\004\023\063\001\002" +
    "\000\004\030\025\001\002\000\004\030\067\001\002\000" +
    "\004\033\ufffc\001\002\000\006\027\107\033\uffee\001\002" +
    "\000\004\025\072\001\002\000\006\027\105\031\uffeb\001" +
    "\002\000\004\031\104\001\002\000\010\013\073\014\075" +
    "\015\074\001\002\000\004\025\uffe9\001\002\000\004\025" +
    "\uffe7\001\002\000\004\025\uffe8\001\002\000\004\025\077" +
    "\001\002\000\004\026\100\001\002\000\004\025\101\001" +
    "\002\000\004\034\053\001\002\000\004\025\103\001\002" +
    "\000\006\027\uffea\031\uffea\001\002\000\006\027\uffed\033" +
    "\uffed\001\002\000\004\025\072\001\002\000\004\031\uffec" +
    "\001\002\000\004\030\067\001\002\000\004\033\uffef\001" +
    "\002\000\004\023\112\001\002\000\004\030\025\001\002" +
    "\000\004\030\115\001\002\000\006\027\130\033\uffdb\001" +
    "\002\000\004\025\117\001\002\000\004\033\ufffa\001\002" +
    "\000\004\013\122\001\002\000\004\031\121\001\002\000" +
    "\006\027\uffda\033\uffda\001\002\000\004\025\123\001\002" +
    "\000\004\026\124\001\002\000\004\025\125\001\002\000" +
    "\004\034\053\001\002\000\004\025\127\001\002\000\004" +
    "\031\uffd9\001\002\000\004\030\115\001\002\000\004\033" +
    "\uffdc\001\002\000\004\023\133\001\002\000\004\030\025" +
    "\001\002\000\004\030\137\001\002\000\004\033\ufffd\001" +
    "\002\000\006\027\156\033\ufff6\001\002\000\004\025\142" +
    "\001\002\000\004\031\155\001\002\000\006\027\153\031" +
    "\ufff3\001\002\000\006\013\144\014\145\001\002\000\004" +
    "\025\146\001\002\000\004\025\ufff1\001\002\000\004\025" +
    "\ufff0\001\002\000\004\026\147\001\002\000\004\025\150" +
    "\001\002\000\004\034\053\001\002\000\004\025\152\001" +
    "\002\000\006\027\ufff2\031\ufff2\001\002\000\004\025\142" +
    "\001\002\000\004\031\ufff4\001\002\000\006\027\ufff5\033" +
    "\ufff5\001\002\000\004\030\137\001\002\000\004\033\ufff7" +
    "\001\002\000\004\031\167\001\002\000\004\022\162\001" +
    "\002\000\004\005\164\001\002\000\006\002\ufffe\022\ufffe" +
    "\001\002\000\004\024\165\001\002\000\004\023\166\001" +
    "\002\000\006\002\uffd6\022\uffd6\001\002\000\004\022\uffd7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\165\000\006\002\005\003\004\001\001\000\002\001" +
    "\001\000\006\002\007\003\004\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\014\001\001" +
    "\000\004\007\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\023\001\001\000\006\013\033\017\034\001" +
    "\001\000\002\001\001\000\004\006\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\023\037\026\036\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\032\045\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\033\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\023\056\026\036" +
    "\001\001\000\002\001\001\000\006\013\060\017\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\063" +
    "\001\001\000\006\012\064\016\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\022\070\025\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\022\105\025\067\001\001\000" +
    "\002\001\001\000\006\012\107\016\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\112\001\001\000" +
    "\006\014\115\020\113\001\001\000\002\001\001\000\004" +
    "\027\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\130\020\113" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\133\001\001\000\006\011\134\015\135\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\021\137\024\140\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\142" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\150" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\021" +
    "\153\024\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\156\015\135\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\010\162\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorAnalisis> errores = new ArrayList();
    private List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(List<Parametro> parametros, Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
            System.out.println("Se agrego el parametro");
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startRequest inicio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON QUOTE_MARK requestType endContent endRequest 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startRequest",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requestType ::= LOGIN QUOTE_MARK GREATER_THAN startContent bloquesLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requestType ::= CREATE_USER QUOTE_MARK GREATER_THAN startContent bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // requestType ::= MODIFY_USER QUOTE_MARK GREATER_THAN startContent bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // requestType ::= DELETE_USER QUOTE_MARK GREATER_THAN startContent bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("requestType",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // startContent ::= OPEN_BRACE QUOTE_MARK blockParamName QUOTE_MARK COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("startContent",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // blockParamName ::= USER_CREDENTIALS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("blockParamName",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bloquesLogin ::= bloqueLogin COMMA bloquesLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bloquesLogin ::= bloqueLogin 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE 
            {
              Object RESULT =null;
		
                        solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        parametros = new ArrayList();
                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueLogin",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramsLogin ::= paramLogin COMMA paramsLogin 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsLogin ::= paramLogin 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsLogin",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramLogin ::= QUOTE_MARK nameParamLogin QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                    RESULT = new Parametro(n, v);
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramLogin",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nameParamLogin ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // nameParamLogin ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bloquesCreateUser ::= bloqueCreateUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE 
            {
              Object RESULT =null;
		
                                solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                                parametros = new ArrayList();
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueCreateUser",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramsCreateUser ::= paramCreateUser COMMA paramsCreateUser 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramsCreateUser ::= paramCreateUser 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // paramCreateUser ::= QUOTE_MARK nameParamCreateUser QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // nameParamCreateUser ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nameParamCreateUser ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nameParamCreateUser ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bloquesModifyUser ::= bloqueModifyUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE 
            {
              Object RESULT =null;
		
                            solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueModifyUser",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // paramsModifyUser ::= paramModifyUser COMMA paramsModifyUser 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // paramsModifyUser ::= paramModifyUser 
            {
              List<Parametro> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		addParameter(parametros, p);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // paramModifyUser ::= QUOTE_MARK nameParamModifyUser QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(n, v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nameParamModifyUser ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // nameParamModifyUser ::= PARAM_NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // nameParamModifyUser ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nameParamModifyUser ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // bloquesDeleteUser ::= bloqueDeleteUser 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteUser",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // paramDeleteUser ::= QUOTE_MARK PARAM_USUARIO QUOTE_MARK COLON QUOTE_MARK value QUOTE_MARK 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("paramDeleteUser",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("value",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endContent",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("endRequest",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
