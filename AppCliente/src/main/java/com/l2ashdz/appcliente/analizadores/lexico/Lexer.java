// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.l2ashdz.appcliente.analizadores.lexico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

import static com.l2ashdz.appcliente.analizadores.sintactico.sym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\5\1\6\1\0\1\7\2\0\1\10\4\0\1\11"+
    "\1\12\2\0\1\13\1\14\1\15\1\16\6\17\1\20"+
    "\1\0\1\21\1\0\1\22\2\0\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\1\0\1\60\1\0\2\53\1\61\1\62"+
    "\1\63\1\64\2\53\1\65\2\53\1\66\1\53\1\67"+
    "\1\70\2\53\1\71\1\72\1\73\1\74\5\53\1\75"+
    "\1\0\1\76\54\0\1\53\12\0\1\53\4\0\1\53"+
    "\5\0\27\53\1\0\37\53\1\0\u01ca\53\4\0\14\53"+
    "\16\0\5\53\7\0\1\53\1\0\1\53\21\0\165\53"+
    "\1\0\2\53\2\0\4\53\1\0\1\53\6\0\1\53"+
    "\1\0\3\53\1\0\1\53\1\0\24\53\1\0\123\53"+
    "\1\0\213\53\1\0\255\53\1\0\46\53\2\0\1\53"+
    "\6\0\51\53\10\0\55\53\1\0\1\53\1\0\2\53"+
    "\1\0\2\53\1\0\1\53\10\0\33\53\4\0\4\53"+
    "\35\0\13\53\5\0\100\53\12\77\4\0\146\53\1\0"+
    "\10\53\2\0\12\53\1\0\6\53\12\77\3\53\2\0"+
    "\1\53\20\0\73\53\2\0\145\53\16\0\12\77\54\53"+
    "\4\0\1\53\2\0\1\53\2\0\56\53\22\0\34\53"+
    "\4\0\13\53\65\0\25\53\1\0\10\53\25\0\17\53"+
    "\1\0\201\53\2\0\12\77\1\0\23\53\1\0\10\53"+
    "\2\0\2\53\2\0\26\53\1\0\7\53\1\0\1\53"+
    "\3\0\4\53\2\0\11\53\2\0\2\53\2\0\4\53"+
    "\10\0\1\53\4\0\2\53\1\0\5\53\2\0\12\77"+
    "\2\53\12\0\1\53\1\0\1\53\2\0\3\53\1\0"+
    "\6\53\4\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\2\53\1\0\2\53\1\0\2\53\2\0\1\53\1\0"+
    "\5\53\4\0\2\53\2\0\3\53\3\0\1\53\7\0"+
    "\4\53\1\0\1\53\7\0\12\77\6\53\13\0\3\53"+
    "\1\0\11\53\1\0\3\53\1\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\5\53\2\0\12\53\1\0\3\53"+
    "\1\0\3\53\2\0\1\53\17\0\4\53\2\0\12\77"+
    "\11\0\7\53\1\0\3\53\1\0\10\53\2\0\2\53"+
    "\2\0\26\53\1\0\7\53\1\0\2\53\1\0\5\53"+
    "\2\0\11\53\2\0\2\53\2\0\3\53\10\0\2\53"+
    "\4\0\2\53\1\0\5\53\2\0\12\77\1\0\1\53"+
    "\20\0\2\53\1\0\6\53\3\0\3\53\1\0\4\53"+
    "\3\0\2\53\1\0\1\53\1\0\2\53\3\0\2\53"+
    "\3\0\3\53\3\0\14\53\4\0\5\53\3\0\3\53"+
    "\1\0\4\53\2\0\1\53\6\0\1\53\16\0\12\77"+
    "\20\0\15\53\1\0\3\53\1\0\27\53\1\0\20\53"+
    "\3\0\10\53\1\0\3\53\1\0\4\53\7\0\2\53"+
    "\1\0\3\53\5\0\4\53\2\0\12\77\20\0\4\53"+
    "\1\0\10\53\1\0\3\53\1\0\27\53\1\0\12\53"+
    "\1\0\5\53\2\0\11\53\1\0\3\53\1\0\4\53"+
    "\7\0\2\53\7\0\1\53\1\0\4\53\2\0\12\77"+
    "\1\0\2\53\15\0\4\53\1\0\10\53\1\0\3\53"+
    "\1\0\63\53\1\0\3\53\1\0\5\53\5\0\4\53"+
    "\7\0\5\53\2\0\12\77\12\0\6\53\2\0\2\53"+
    "\1\0\22\53\3\0\30\53\1\0\11\53\1\0\1\53"+
    "\2\0\7\53\3\0\1\53\4\0\6\53\1\0\1\53"+
    "\1\0\10\53\6\0\12\77\2\0\2\53\15\0\72\53"+
    "\5\0\17\53\1\0\12\77\47\0\2\53\1\0\1\53"+
    "\1\0\5\53\1\0\30\53\1\0\1\53\1\0\27\53"+
    "\2\0\5\53\1\0\1\53\1\0\6\53\2\0\12\77"+
    "\2\0\4\53\40\0\1\53\27\0\2\53\6\0\12\77"+
    "\13\0\1\53\1\0\1\53\1\0\1\53\4\0\12\53"+
    "\1\0\44\53\4\0\24\53\1\0\22\53\1\0\44\53"+
    "\11\0\1\53\71\0\100\53\12\77\6\0\100\53\12\77"+
    "\4\53\2\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\53\53\1\0\115\53\1\0\4\53\2\0\7\53\1\0"+
    "\1\53\1\0\4\53\2\0\51\53\1\0\4\53\2\0"+
    "\41\53\1\0\4\53\2\0\7\53\1\0\1\53\1\0"+
    "\4\53\2\0\17\53\1\0\71\53\1\0\4\53\2\0"+
    "\103\53\2\0\3\53\40\0\20\53\20\0\126\53\2\0"+
    "\6\53\3\0\u016c\53\2\0\21\53\1\0\32\53\5\0"+
    "\113\53\3\0\13\53\7\0\15\53\1\0\7\53\13\0"+
    "\25\53\13\0\24\53\14\0\15\53\1\0\3\53\1\0"+
    "\2\53\14\0\124\53\3\0\1\53\4\0\2\53\2\0"+
    "\12\77\41\0\3\53\2\0\12\77\6\0\131\53\7\0"+
    "\53\53\5\0\106\53\12\0\37\53\1\0\14\53\4\0"+
    "\14\53\12\0\12\77\36\53\2\0\5\53\13\0\54\53"+
    "\4\0\32\53\6\0\12\77\46\0\34\53\4\0\77\53"+
    "\1\0\35\53\2\0\1\53\12\77\6\0\12\77\15\0"+
    "\1\53\10\0\17\53\101\0\114\53\4\0\12\77\21\0"+
    "\11\53\14\0\60\53\12\77\72\53\14\0\70\53\10\0"+
    "\12\77\3\0\3\53\12\77\44\53\2\0\11\53\7\0"+
    "\53\53\2\0\3\53\20\0\3\53\1\0\47\53\5\0"+
    "\372\53\1\0\33\53\2\0\6\53\2\0\46\53\2\0"+
    "\6\53\2\0\10\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\37\53\2\0\65\53\1\0\7\53\1\0"+
    "\1\53\3\0\3\53\1\0\7\53\3\0\4\53\2\0"+
    "\6\53\4\0\15\53\5\0\3\53\1\0\7\53\102\0"+
    "\2\53\23\0\1\53\34\0\1\53\15\0\1\53\20\0"+
    "\15\53\63\0\41\53\21\0\1\53\4\0\1\53\2\0"+
    "\12\53\1\0\1\53\3\0\5\53\6\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\4\53\1\0\13\53\2\0"+
    "\4\53\5\0\5\53\4\0\1\53\21\0\51\53\u022d\0"+
    "\64\53\26\0\57\53\1\0\57\53\1\0\205\53\6\0"+
    "\11\53\14\0\46\53\1\0\1\53\5\0\1\53\2\0"+
    "\70\53\7\0\1\53\17\0\30\53\11\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\7\53\1\0"+
    "\7\53\1\0\7\53\1\0\7\53\1\0\40\53\57\0"+
    "\1\53\325\0\3\53\31\0\17\53\1\0\5\53\2\0"+
    "\5\53\4\0\126\53\2\0\2\53\2\0\3\53\1\0"+
    "\132\53\1\0\4\53\5\0\53\53\1\0\136\53\21\0"+
    "\33\53\65\0\306\53\112\0\360\53\20\0\215\53\103\0"+
    "\56\53\2\0\15\53\3\0\20\53\12\77\2\53\24\0"+
    "\63\53\1\0\12\53\1\0\163\53\45\0\11\53\2\0"+
    "\147\53\2\0\65\53\2\0\5\53\60\0\61\53\30\0"+
    "\64\53\14\0\106\53\12\0\12\77\6\0\30\53\3\0"+
    "\1\53\1\0\3\53\12\77\44\53\2\0\44\53\14\0"+
    "\35\53\3\0\101\53\16\0\1\53\12\77\6\0\20\53"+
    "\12\77\5\53\1\0\67\53\11\0\16\53\2\0\12\77"+
    "\6\0\27\53\3\0\111\53\30\0\3\53\2\0\20\53"+
    "\2\0\5\53\12\0\6\53\2\0\6\53\2\0\6\53"+
    "\11\0\7\53\1\0\7\53\1\0\53\53\1\0\14\53"+
    "\10\0\173\53\1\0\2\53\2\0\12\77\6\0\244\53"+
    "\14\0\27\53\4\0\61\53\4\0\156\53\2\0\152\53"+
    "\46\0\7\53\14\0\5\53\5\0\14\53\1\0\15\53"+
    "\1\0\5\53\1\0\1\53\1\0\2\53\1\0\2\53"+
    "\1\0\154\53\41\0\153\53\22\0\100\53\2\0\66\53"+
    "\50\0\14\53\4\0\20\53\20\0\20\53\3\0\2\53"+
    "\30\0\3\53\40\0\5\53\1\0\207\53\23\0\12\77"+
    "\7\0\32\53\4\0\1\53\1\0\32\53\13\0\131\53"+
    "\3\0\6\53\2\0\6\53\2\0\6\53\2\0\3\53"+
    "\43\0\14\53\1\0\32\53\1\0\23\53\1\0\2\53"+
    "\1\0\17\53\2\0\16\53\42\0\173\53\105\0\65\53"+
    "\210\0\1\53\202\0\35\53\3\0\61\53\17\0\1\53"+
    "\37\0\40\53\15\0\36\53\5\0\53\53\5\0\36\53"+
    "\2\0\44\53\4\0\10\53\1\0\5\53\52\0\236\53"+
    "\2\0\12\77\6\0\44\53\4\0\44\53\4\0\50\53"+
    "\10\0\64\53\234\0\67\53\11\0\26\53\12\0\10\53"+
    "\230\0\6\53\2\0\1\53\1\0\54\53\1\0\2\53"+
    "\3\0\1\53\2\0\27\53\12\0\27\53\11\0\37\53"+
    "\101\0\23\53\1\0\2\53\12\0\26\53\12\0\32\53"+
    "\106\0\70\53\6\0\2\53\100\0\4\53\1\0\2\53"+
    "\5\0\10\53\1\0\3\53\1\0\35\53\2\0\3\53"+
    "\4\0\1\53\40\0\35\53\3\0\35\53\43\0\10\53"+
    "\1\0\36\53\31\0\66\53\12\0\26\53\12\0\23\53"+
    "\15\0\22\53\156\0\111\53\67\0\63\53\15\0\63\53"+
    "\15\0\50\53\10\0\12\77\306\0\35\53\12\0\1\53"+
    "\10\0\41\53\217\0\27\53\11\0\107\53\37\0\12\77"+
    "\17\0\74\53\25\0\31\53\7\0\12\77\6\0\65\53"+
    "\1\0\12\77\4\0\3\53\11\0\44\53\2\0\1\53"+
    "\11\0\105\53\4\0\4\53\3\0\12\77\1\53\1\0"+
    "\1\53\43\0\22\53\1\0\45\53\6\0\1\53\101\0"+
    "\7\53\1\0\1\53\1\0\4\53\1\0\17\53\1\0"+
    "\12\53\7\0\73\53\5\0\12\77\6\0\4\53\1\0"+
    "\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\2\53\1\0\5\53\1\0\12\53\2\0\2\53\2\0"+
    "\3\53\2\0\1\53\6\0\1\53\5\0\7\53\2\0"+
    "\7\53\3\0\5\53\213\0\113\53\5\0\12\77\4\0"+
    "\2\53\40\0\106\53\1\0\1\53\10\0\12\77\246\0"+
    "\66\53\2\0\11\53\27\0\6\53\42\0\101\53\3\0"+
    "\1\53\13\0\12\77\46\0\71\53\7\0\12\77\66\0"+
    "\33\53\2\0\17\53\4\0\12\77\306\0\73\53\145\0"+
    "\100\53\12\77\25\0\1\53\240\0\10\53\2\0\56\53"+
    "\2\0\10\53\1\0\2\53\33\0\77\53\10\0\1\53"+
    "\10\0\112\53\3\0\1\53\42\0\71\53\7\0\11\53"+
    "\1\0\55\53\1\0\11\53\17\0\12\77\30\0\36\53"+
    "\2\0\26\53\1\0\16\53\111\0\7\53\1\0\2\53"+
    "\1\0\54\53\3\0\1\53\1\0\2\53\1\0\11\53"+
    "\10\0\12\77\6\0\6\53\1\0\2\53\1\0\45\53"+
    "\1\0\2\53\1\0\6\53\7\0\12\77\u0136\0\27\53"+
    "\11\0\232\53\146\0\157\53\21\0\304\53\274\0\57\53"+
    "\321\0\107\53\271\0\71\53\7\0\37\53\1\0\12\77"+
    "\146\0\36\53\2\0\5\53\13\0\67\53\11\0\4\53"+
    "\14\0\12\77\11\0\25\53\5\0\23\53\260\0\100\53"+
    "\200\0\113\53\4\0\71\53\7\0\21\53\100\0\2\53"+
    "\1\0\1\53\34\0\370\53\10\0\363\53\15\0\37\53"+
    "\61\0\3\53\21\0\4\53\10\0\u018c\53\4\0\153\53"+
    "\5\0\15\53\3\0\11\53\7\0\12\53\3\0\2\53"+
    "\306\0\5\53\3\0\6\53\10\0\10\53\2\0\7\53"+
    "\36\0\4\53\224\0\3\53\273\0\125\53\1\0\107\53"+
    "\1\0\2\53\2\0\1\53\2\0\2\53\2\0\4\53"+
    "\1\0\14\53\1\0\1\53\1\0\7\53\1\0\101\53"+
    "\1\0\4\53\2\0\10\53\1\0\7\53\1\0\34\53"+
    "\1\0\4\53\1\0\5\53\1\0\1\53\3\0\7\53"+
    "\1\0\u0154\53\2\0\31\53\1\0\31\53\1\0\37\53"+
    "\1\0\31\53\1\0\37\53\1\0\31\53\1\0\37\53"+
    "\1\0\31\53\1\0\37\53\1\0\31\53\1\0\10\53"+
    "\2\0\62\77\67\53\4\0\62\53\10\0\1\53\16\0"+
    "\1\53\26\0\5\53\1\0\17\53\120\0\7\53\1\0"+
    "\21\53\2\0\7\53\1\0\2\53\1\0\5\53\325\0"+
    "\55\53\3\0\16\53\2\0\12\77\4\0\1\53\u0171\0"+
    "\60\53\12\77\6\0\305\53\13\0\7\53\51\0\114\53"+
    "\4\0\12\77\246\0\4\53\1\0\33\53\1\0\2\53"+
    "\1\0\1\53\2\0\1\53\1\0\12\53\1\0\4\53"+
    "\1\0\1\53\1\0\1\53\6\0\1\53\4\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\3\53\1\0\2\53"+
    "\1\0\1\53\2\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\2\53\1\0\1\53"+
    "\2\0\4\53\1\0\7\53\1\0\4\53\1\0\4\53"+
    "\1\0\1\53\1\0\12\53\1\0\21\53\5\0\3\53"+
    "\1\0\5\53\1\0\21\53\164\0\32\53\6\0\32\53"+
    "\6\0\32\53\166\0\327\53\51\0\65\53\13\0\336\53"+
    "\2\0\u0182\53\16\0\u0131\53\37\0\36\53\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\2\1\1\12\1\13\1\14\1\15"+
    "\1\16\3\0\1\17\25\0\1\20\1\21\1\22\1\23"+
    "\1\24\20\0\1\25\125\0\1\26\132\0\1\27\106\0"+
    "\1\30\55\0\1\31\3\0\1\32\1\0\1\33\6\0"+
    "\1\34\14\0\1\35\50\0\1\36\12\0\1\37\1\40"+
    "\6\0\1\41\10\0\1\42\52\0\1\43\3\0\1\44"+
    "\17\0\1\45\34\0\1\46\4\0\1\47\1\50\15\0"+
    "\1\51\1\0\1\52\52\0\1\53\7\0\1\54\36\0"+
    "\1\55\1\56\10\0\1\57\1\60\44\0\1\61\24\0"+
    "\1\62\1\63\41\0\1\64\37\0\1\65\6\0\1\66"+
    "\7\0\1\67\2\0\1\70\1\71\1\72\25\0\1\73"+
    "\5\0\1\74\36\0\1\75\22\0\1\76\4\0\1\77"+
    "\2\0\1\100\21\0\1\101\13\0\1\102\3\0\1\103"+
    "\14\0\1\104\1\105\11\0\1\106\1\107\1\110\4\0"+
    "\1\111\1\112";

  private static int [] zzUnpackAction() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\200\0\300\0\200\0\u0100\0\200"+
    "\0\200\0\200\0\200\0\200\0\200\0\u0140\0\u0180\0\200"+
    "\0\200\0\u01c0\0\200\0\u0200\0\u0240\0\u0280\0\u02c0\0\200"+
    "\0\u0300\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0"+
    "\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0"+
    "\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\200\0\200\0\200"+
    "\0\200\0\200\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980"+
    "\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80"+
    "\0\u0bc0\0\u0c00\0\200\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d40"+
    "\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00\0\u0f40"+
    "\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100\0\u1140"+
    "\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u14c0\0\u1500\0\u1540"+
    "\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700\0\u1740"+
    "\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940"+
    "\0\u1980\0\u19c0\0\u1a00\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40"+
    "\0\u1b80\0\u1bc0\0\u1c00\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140"+
    "\0\200\0\u2180\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300"+
    "\0\u2340\0\u2380\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500"+
    "\0\u2540\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700"+
    "\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900"+
    "\0\u2940\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00"+
    "\0\u2b40\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00"+
    "\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300"+
    "\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700"+
    "\0\u3740\0\u3780\0\u37c0\0\200\0\u3800\0\u3840\0\u3880\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40\0\u3a80\0\u3ac0"+
    "\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40\0\u3c80\0\u3cc0"+
    "\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0"+
    "\0\u4100\0\u4140\0\u4180\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0"+
    "\0\u4300\0\u4340\0\u4380\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0"+
    "\0\u4500\0\u4540\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0"+
    "\0\u4700\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0"+
    "\0\u4900\0\u4940\0\200\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u4a80"+
    "\0\u4ac0\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80"+
    "\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40\0\u4e80"+
    "\0\u4ec0\0\u4f00\0\u4f40\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080"+
    "\0\u50c0\0\u5100\0\u5140\0\u5180\0\u51c0\0\u5200\0\u5240\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480"+
    "\0\200\0\u54c0\0\u5500\0\u5540\0\200\0\u5580\0\200\0\u55c0"+
    "\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700\0\200\0\u5740\0\u5780"+
    "\0\u57c0\0\u5800\0\u5840\0\u5880\0\u58c0\0\u5900\0\u5940\0\u5980"+
    "\0\u59c0\0\u5a00\0\200\0\u5a40\0\u5a80\0\u5ac0\0\u5b00\0\u5b40"+
    "\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40"+
    "\0\u5d80\0\u5dc0\0\u5e00\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40"+
    "\0\u5f80\0\u5fc0\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140"+
    "\0\u6180\0\u61c0\0\u6200\0\u6240\0\u6280\0\u62c0\0\u6300\0\u6340"+
    "\0\u6380\0\u63c0\0\u6400\0\200\0\u6440\0\u6480\0\u64c0\0\u6500"+
    "\0\u6540\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\200\0\200"+
    "\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800\0\200\0\u6840"+
    "\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0\0\u6a00\0\200"+
    "\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0\0\u6c00"+
    "\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\u6dc0\0\u6e00"+
    "\0\u6e40\0\u6e80\0\u6ec0\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000"+
    "\0\u7040\0\u7080\0\u70c0\0\u7100\0\u7140\0\u7180\0\u71c0\0\u7200"+
    "\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380\0\u73c0\0\u7400"+
    "\0\u7440\0\u7480\0\200\0\u74c0\0\u7500\0\u7540\0\200\0\u7580"+
    "\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\u7700\0\u7740\0\u7780"+
    "\0\u77c0\0\u7800\0\u7840\0\u7880\0\u78c0\0\u7900\0\200\0\u7940"+
    "\0\u7980\0\u79c0\0\u7a00\0\u7a40\0\u7a80\0\u7ac0\0\u7b00\0\u7b40"+
    "\0\u7b80\0\u7bc0\0\u7c00\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40"+
    "\0\u7d80\0\u7dc0\0\u7e00\0\u7e40\0\u7e80\0\u7ec0\0\u7f00\0\u7f40"+
    "\0\u7f80\0\u7fc0\0\u8000\0\200\0\u8040\0\u8080\0\u80c0\0\u8100"+
    "\0\200\0\200\0\u8140\0\u8180\0\u81c0\0\u8200\0\u8240\0\u8280"+
    "\0\u82c0\0\u8300\0\u8340\0\u8380\0\u83c0\0\u8400\0\u8440\0\200"+
    "\0\u8480\0\200\0\u84c0\0\u8500\0\u8540\0\u8580\0\u85c0\0\u8600"+
    "\0\u8640\0\u8680\0\u86c0\0\u8700\0\u8740\0\u8780\0\u87c0\0\u8800"+
    "\0\u8840\0\u8880\0\u88c0\0\u8900\0\u8940\0\u8980\0\u89c0\0\u8a00"+
    "\0\u8a40\0\u8a80\0\u8ac0\0\u8b00\0\u8b40\0\u8b80\0\u8bc0\0\u8c00"+
    "\0\u8c40\0\u8c80\0\u8cc0\0\u8d00\0\u8d40\0\u8d80\0\u8dc0\0\u8e00"+
    "\0\u8e40\0\u8e80\0\u8ec0\0\u8f00\0\200\0\u8f40\0\u8f80\0\u8fc0"+
    "\0\u9000\0\u9040\0\u9080\0\u90c0\0\200\0\u9100\0\u9140\0\u9180"+
    "\0\u91c0\0\u9200\0\u9240\0\u9280\0\u92c0\0\u9300\0\u9340\0\u9380"+
    "\0\u93c0\0\u9400\0\u9440\0\u9480\0\u94c0\0\u9500\0\u9540\0\u9580"+
    "\0\u95c0\0\u9600\0\u9640\0\u9680\0\u96c0\0\u9700\0\u9740\0\u9780"+
    "\0\u97c0\0\u9800\0\u9840\0\200\0\200\0\u9880\0\u98c0\0\u9900"+
    "\0\u9940\0\u9980\0\u99c0\0\u9a00\0\u9a40\0\200\0\200\0\u9a80"+
    "\0\u9ac0\0\u9b00\0\u9b40\0\u9b80\0\u9bc0\0\u9c00\0\u9c40\0\u9c80"+
    "\0\u9cc0\0\u9d00\0\u9d40\0\u9d80\0\u9dc0\0\u9e00\0\u9e40\0\u9e80"+
    "\0\u9ec0\0\u9f00\0\u9f40\0\u9f80\0\u9fc0\0\ua000\0\ua040\0\ua080"+
    "\0\ua0c0\0\ua100\0\ua140\0\ua180\0\ua1c0\0\ua200\0\ua240\0\ua280"+
    "\0\ua2c0\0\ua300\0\ua340\0\200\0\ua380\0\ua3c0\0\ua400\0\ua440"+
    "\0\ua480\0\ua4c0\0\ua500\0\ua540\0\ua580\0\ua5c0\0\ua600\0\ua640"+
    "\0\ua680\0\ua6c0\0\ua700\0\ua740\0\ua780\0\ua7c0\0\ua800\0\ua840"+
    "\0\ua880\0\ua8c0\0\ua900\0\ua940\0\ua980\0\ua9c0\0\uaa00\0\uaa40"+
    "\0\uaa80\0\uaac0\0\uab00\0\uab40\0\uab80\0\uabc0\0\uac00\0\uac40"+
    "\0\uac80\0\uacc0\0\uad00\0\uad40\0\uad80\0\uadc0\0\uae00\0\uae40"+
    "\0\uae80\0\uaec0\0\uaf00\0\uaf40\0\uaf80\0\uafc0\0\ub000\0\ub040"+
    "\0\ub080\0\ub0c0\0\ub100\0\200\0\ub140\0\ub180\0\ub1c0\0\ub200"+
    "\0\ub240\0\ub280\0\ub2c0\0\ub300\0\ub340\0\ub380\0\ub3c0\0\ub400"+
    "\0\ub440\0\ub480\0\ub4c0\0\ub500\0\ub540\0\ub580\0\ub5c0\0\ub600"+
    "\0\ub640\0\ub680\0\ub6c0\0\ub700\0\ub740\0\ub780\0\ub7c0\0\ub800"+
    "\0\ub840\0\ub880\0\ub8c0\0\200\0\ub900\0\ub940\0\ub980\0\ub9c0"+
    "\0\uba00\0\uba40\0\200\0\uba80\0\ubac0\0\ubb00\0\ubb40\0\ubb80"+
    "\0\ubbc0\0\ubc00\0\200\0\ubc40\0\ubc80\0\200\0\200\0\200"+
    "\0\ubcc0\0\ubd00\0\ubd40\0\ubd80\0\ubdc0\0\ube00\0\ube40\0\ube80"+
    "\0\ubec0\0\ubf00\0\ubf40\0\ubf80\0\ubfc0\0\uc000\0\uc040\0\uc080"+
    "\0\uc0c0\0\uc100\0\uc140\0\uc180\0\uc1c0\0\200\0\uc200\0\uc240"+
    "\0\uc280\0\uc2c0\0\uc300\0\200\0\uc340\0\uc380\0\uc3c0\0\uc400"+
    "\0\uc440\0\uc480\0\uc4c0\0\uc500\0\uc540\0\uc580\0\uc5c0\0\uc600"+
    "\0\uc640\0\uc680\0\uc6c0\0\uc700\0\uc740\0\uc780\0\uc7c0\0\uc800"+
    "\0\uc840\0\uc880\0\uc8c0\0\uc900\0\uc940\0\uc980\0\uc9c0\0\uca00"+
    "\0\uca40\0\uca80\0\200\0\ucac0\0\ucb00\0\ucb40\0\ucb80\0\ucbc0"+
    "\0\ucc00\0\ucc40\0\ucc80\0\uccc0\0\ucd00\0\ucd40\0\ucd80\0\ucdc0"+
    "\0\uce00\0\uce40\0\uce80\0\ucec0\0\ucf00\0\200\0\ucf40\0\ucf80"+
    "\0\ucfc0\0\ud000\0\200\0\ud040\0\ud080\0\200\0\ud0c0\0\ud100"+
    "\0\ud140\0\ud180\0\ud1c0\0\ud200\0\ud240\0\ud280\0\ud2c0\0\ud300"+
    "\0\ud340\0\ud380\0\ud3c0\0\ud400\0\ud440\0\ud480\0\ud4c0\0\200"+
    "\0\ud500\0\ud540\0\ud580\0\ud5c0\0\ud600\0\ud640\0\ud680\0\ud6c0"+
    "\0\ud700\0\ud740\0\ud780\0\200\0\ud7c0\0\ud800\0\ud840\0\200"+
    "\0\ud880\0\ud8c0\0\ud900\0\ud940\0\ud980\0\ud9c0\0\uda00\0\uda40"+
    "\0\uda80\0\udac0\0\udb00\0\udb40\0\200\0\200\0\udb80\0\udbc0"+
    "\0\udc00\0\udc40\0\udc80\0\udcc0\0\udd00\0\udd40\0\udd80\0\200"+
    "\0\200\0\200\0\uddc0\0\ude00\0\ude40\0\ude80\0\200\0\200";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\4\1\6\1\7\2\3\1\10"+
    "\6\3\1\11\1\12\1\13\32\3\1\14\1\3\1\15"+
    "\4\3\1\16\1\17\7\3\1\20\1\21\1\3\2\22"+
    "\2\3\2\22\1\23\47\22\1\24\21\22\102\0\1\4"+
    "\75\0\1\25\3\26\1\27\1\25\1\30\1\31\1\32"+
    "\1\25\1\31\5\33\3\25\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\2\25\1\42\1\43\1\25\1\44\1\45"+
    "\1\46\1\47\1\50\1\25\1\51\1\25\1\52\1\53"+
    "\10\25\1\31\16\25\1\33\65\0\1\54\101\0\1\55"+
    "\10\0\2\22\2\0\2\22\1\0\47\22\1\0\21\22"+
    "\6\0\1\56\60\0\1\57\1\0\1\60\1\0\1\61"+
    "\4\0\4\25\1\32\1\25\1\30\1\25\1\32\70\25"+
    "\3\26\1\27\1\25\1\30\1\25\1\32\12\25\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\2\25\1\42\1\43"+
    "\1\25\1\44\1\45\1\46\1\47\1\50\1\25\1\51"+
    "\1\25\1\52\1\53\30\25\1\32\4\27\1\32\1\62"+
    "\14\32\1\63\1\64\1\65\1\66\1\67\1\70\2\32"+
    "\1\71\1\72\1\32\1\73\1\74\1\75\1\76\1\77"+
    "\1\32\1\100\1\32\1\101\1\102\30\32\4\25\1\32"+
    "\1\25\1\103\1\31\1\32\1\25\6\31\3\25\32\31"+
    "\3\25\15\31\2\25\1\31\6\32\1\62\71\32\4\25"+
    "\1\32\1\25\1\30\1\25\1\32\2\25\5\104\57\25"+
    "\1\104\4\25\1\32\1\25\1\30\1\25\1\32\20\25"+
    "\1\105\4\25\1\106\5\25\1\107\37\25\1\32\1\25"+
    "\1\30\1\25\1\32\30\25\1\110\42\25\1\32\1\25"+
    "\1\30\1\25\1\32\12\25\1\111\3\25\1\112\2\25"+
    "\1\113\3\25\1\114\2\25\1\115\2\25\1\116\37\25"+
    "\1\32\1\25\1\30\1\25\1\32\16\25\1\117\54\25"+
    "\1\32\1\25\1\30\1\25\1\32\25\25\1\120\45\25"+
    "\1\32\1\25\1\30\1\25\1\32\16\25\1\121\3\25"+
    "\1\122\5\25\1\123\42\25\1\32\1\25\1\30\1\25"+
    "\1\32\15\25\1\124\10\25\1\125\1\126\13\25\1\127"+
    "\27\25\1\32\1\25\1\30\1\25\1\32\36\25\1\130"+
    "\34\25\1\32\1\25\1\30\1\25\1\32\30\25\1\131"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\30\25\1\132"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\30\25\1\133"+
    "\5\25\1\134\34\25\1\32\1\25\1\30\1\25\1\32"+
    "\31\25\1\135\41\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\136\60\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\137\3\25\1\140\54\25\1\32\1\25\1\30"+
    "\1\25\1\32\16\25\1\141\3\25\1\142\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\143\1\144\32\25"+
    "\67\0\1\145\75\0\1\146\12\0\6\32\1\62\22\32"+
    "\1\147\4\32\1\150\5\32\1\151\41\32\1\62\32\32"+
    "\1\152\44\32\1\62\14\32\1\153\3\32\1\154\2\32"+
    "\1\155\3\32\1\156\2\32\1\157\2\32\1\160\41\32"+
    "\1\62\20\32\1\161\56\32\1\62\27\32\1\162\47\32"+
    "\1\62\20\32\1\163\3\32\1\164\5\32\1\165\44\32"+
    "\1\62\17\32\1\166\10\32\1\167\1\170\13\32\1\171"+
    "\31\32\1\62\40\32\1\172\36\32\1\62\32\32\1\173"+
    "\44\32\1\62\32\32\1\174\44\32\1\62\32\32\1\175"+
    "\5\32\1\176\36\32\1\62\33\32\1\177\43\32\1\62"+
    "\14\32\1\200\62\32\1\62\14\32\1\201\3\32\1\202"+
    "\56\32\1\62\20\32\1\203\3\32\1\204\52\32\1\62"+
    "\35\32\1\205\1\206\32\32\4\25\1\32\1\25\1\30"+
    "\1\25\1\32\2\25\5\207\57\25\1\207\4\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\210\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\211\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\16\25\1\212\54\25\1\32"+
    "\1\25\1\30\1\25\1\32\35\25\1\213\35\25\1\32"+
    "\1\25\1\30\1\25\1\32\26\25\1\214\44\25\1\32"+
    "\1\25\1\30\1\25\1\32\27\25\1\215\43\25\1\32"+
    "\1\25\1\30\1\25\1\32\16\25\1\216\54\25\1\32"+
    "\1\25\1\30\1\25\1\32\12\25\1\217\60\25\1\32"+
    "\1\25\1\30\1\25\1\32\25\25\1\220\1\221\44\25"+
    "\1\32\1\25\1\30\1\25\1\32\16\25\1\222\54\25"+
    "\1\32\1\25\1\30\1\25\1\32\33\25\1\223\37\25"+
    "\1\32\1\25\1\30\1\25\1\32\22\25\1\224\50\25"+
    "\1\32\1\25\1\30\1\25\1\32\14\25\1\225\56\25"+
    "\1\32\1\25\1\30\1\25\1\32\14\25\1\226\10\25"+
    "\1\227\45\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\230\34\25\3\124\1\166\1\25\1\231\1\25\1\32"+
    "\73\25\1\32\1\25\1\30\1\25\1\32\12\25\1\232"+
    "\60\25\1\32\1\25\1\30\1\25\1\32\15\25\1\233"+
    "\55\25\1\32\1\25\1\30\1\25\1\32\32\25\1\234"+
    "\40\25\1\32\1\25\1\30\1\25\1\32\34\25\1\235"+
    "\36\25\1\32\1\25\1\30\1\25\1\32\20\25\1\236"+
    "\52\25\1\32\1\25\1\30\1\25\1\32\15\25\1\237"+
    "\55\25\1\32\1\25\1\30\1\25\1\32\26\25\1\240"+
    "\44\25\1\32\1\25\1\30\1\25\1\32\16\25\1\241"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\14\25\1\242"+
    "\56\25\1\32\1\25\1\30\1\25\1\32\33\25\1\243"+
    "\1\244\36\25\1\32\1\25\1\30\1\25\1\32\15\25"+
    "\1\245\55\25\1\32\1\25\1\30\1\25\1\32\32\25"+
    "\1\246\40\25\1\32\1\25\1\30\1\25\1\32\26\25"+
    "\1\247\12\25\1\250\31\25\1\32\1\25\1\30\1\25"+
    "\1\32\35\25\1\251\35\25\1\32\1\25\1\30\1\25"+
    "\1\32\25\25\1\252\45\25\1\32\1\25\1\30\1\25"+
    "\1\32\36\25\1\253\30\25\60\0\1\254\77\0\1\255"+
    "\17\0\6\32\1\62\35\32\1\256\41\32\1\62\24\32"+
    "\1\257\52\32\1\62\20\32\1\260\56\32\1\62\37\32"+
    "\1\261\37\32\1\62\30\32\1\262\46\32\1\62\31\32"+
    "\1\263\45\32\1\62\20\32\1\264\56\32\1\62\14\32"+
    "\1\265\62\32\1\62\27\32\1\266\1\267\46\32\1\62"+
    "\20\32\1\270\56\32\1\62\35\32\1\271\41\32\1\62"+
    "\24\32\1\272\52\32\1\62\16\32\1\273\60\32\1\62"+
    "\16\32\1\274\10\32\1\275\47\32\1\62\35\32\1\276"+
    "\34\32\4\166\1\32\1\231\77\32\1\62\14\32\1\277"+
    "\62\32\1\62\17\32\1\300\57\32\1\62\34\32\1\301"+
    "\42\32\1\62\36\32\1\302\40\32\1\62\22\32\1\303"+
    "\54\32\1\62\17\32\1\304\57\32\1\62\30\32\1\305"+
    "\46\32\1\62\20\32\1\306\56\32\1\62\16\32\1\307"+
    "\60\32\1\62\35\32\1\310\1\311\40\32\1\62\17\32"+
    "\1\312\57\32\1\62\34\32\1\313\42\32\1\62\30\32"+
    "\1\314\12\32\1\315\33\32\1\62\37\32\1\316\37\32"+
    "\1\62\27\32\1\317\47\32\1\62\40\32\1\320\30\32"+
    "\4\25\1\32\1\25\1\30\1\25\1\32\2\25\5\321"+
    "\57\25\1\321\4\25\1\32\1\25\1\30\1\25\1\32"+
    "\16\25\1\322\54\25\1\32\1\25\1\30\1\25\1\32"+
    "\27\25\1\323\43\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\324\60\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\325\42\25\1\32\1\25\1\30\1\25\1\32"+
    "\31\25\1\326\41\25\1\32\1\25\1\30\1\25\1\32"+
    "\35\25\1\327\35\25\1\32\1\25\1\30\1\25\1\32"+
    "\14\25\1\330\56\25\1\32\1\25\1\30\1\25\1\32"+
    "\34\25\1\331\36\25\1\32\1\25\1\30\1\25\1\32"+
    "\36\25\1\332\34\25\1\32\1\25\1\30\1\25\1\32"+
    "\13\25\1\333\57\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\334\2\25\1\335\55\25\1\32\1\25\1\30"+
    "\1\25\1\32\16\25\1\336\54\25\1\32\1\25\1\30"+
    "\1\25\1\32\26\25\1\337\44\25\1\32\1\25\1\30"+
    "\1\25\1\32\21\25\1\340\51\25\1\32\1\25\1\30"+
    "\1\25\1\32\21\25\1\341\51\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\342\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\26\25\1\343\44\25\1\32\1\25\1\30"+
    "\1\25\1\32\20\25\1\344\52\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\345\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\36\25\1\346\34\25\1\32\1\25\1\30"+
    "\1\25\1\32\35\25\1\347\35\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\350\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\351\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\13\25\1\352\57\25\1\32\1\25\1\30"+
    "\1\25\1\32\37\25\1\353\33\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\354\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\355\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\34\25\1\356\36\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\357\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\36\25\1\360\34\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\361\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\35\25\1\362\35\25\1\32\1\25\1\30"+
    "\1\25\1\32\36\25\1\363\31\25\3\252\1\317\1\25"+
    "\1\364\1\25\1\32\73\25\1\32\1\25\1\30\1\25"+
    "\1\32\12\25\1\365\54\25\72\0\1\366\77\0\1\367"+
    "\5\0\6\32\1\62\20\32\1\370\56\32\1\62\31\32"+
    "\1\371\45\32\1\62\14\32\1\372\62\32\1\62\32\32"+
    "\1\373\44\32\1\62\33\32\1\374\43\32\1\62\37\32"+
    "\1\375\37\32\1\62\16\32\1\376\60\32\1\62\36\32"+
    "\1\377\40\32\1\62\40\32\1\u0100\36\32\1\62\15\32"+
    "\1\u0101\61\32\1\62\14\32\1\u0102\2\32\1\u0103\57\32"+
    "\1\62\20\32\1\u0104\56\32\1\62\30\32\1\u0105\46\32"+
    "\1\62\23\32\1\u0106\53\32\1\62\23\32\1\u0107\53\32"+
    "\1\62\14\32\1\u0108\62\32\1\62\30\32\1\u0109\46\32"+
    "\1\62\22\32\1\u010a\54\32\1\62\24\32\1\u010b\52\32"+
    "\1\62\40\32\1\u010c\36\32\1\62\37\32\1\u010d\37\32"+
    "\1\62\24\32\1\u010e\52\32\1\62\24\32\1\u010f\52\32"+
    "\1\62\15\32\1\u0110\61\32\1\62\41\32\1\u0111\35\32"+
    "\1\62\24\32\1\u0112\52\32\1\62\14\32\1\u0113\62\32"+
    "\1\62\36\32\1\u0114\40\32\1\62\24\32\1\u0115\52\32"+
    "\1\62\40\32\1\u0116\36\32\1\62\14\32\1\u0117\62\32"+
    "\1\62\37\32\1\u0118\37\32\1\62\40\32\1\u0119\31\32"+
    "\4\317\1\32\1\364\77\32\1\62\14\32\1\u011a\54\32"+
    "\4\25\1\32\1\25\1\30\1\25\1\32\1\25\1\u011b"+
    "\71\25\1\32\1\25\1\30\1\25\1\32\20\25\1\u011c"+
    "\52\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u011d"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\47\25\1\u011e"+
    "\23\25\1\32\1\25\1\30\1\25\1\32\27\25\1\u011f"+
    "\43\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0120"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\33\25\1\u0121"+
    "\37\25\1\32\1\25\1\30\1\25\1\32\24\25\1\u0122"+
    "\46\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u0123"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\26\25\1\u0124"+
    "\44\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0125"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\33\25\1\u0126"+
    "\37\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u0127"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\14\25\1\u0128"+
    "\56\25\1\32\1\25\1\30\1\25\1\32\22\25\1\u0129"+
    "\50\25\1\32\1\25\1\30\1\25\1\32\12\25\1\u012a"+
    "\60\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u012b"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\34\25\1\u012c"+
    "\36\25\1\32\1\25\1\30\1\25\1\32\36\25\1\u012d"+
    "\34\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u012e"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\14\25\1\u012f"+
    "\56\25\1\32\1\25\1\30\1\25\1\32\22\25\1\u0130"+
    "\50\25\1\32\1\25\1\30\1\25\1\32\22\25\1\u0131"+
    "\50\25\1\32\1\25\1\30\1\25\1\32\27\25\1\u0132"+
    "\43\25\1\32\1\25\1\30\1\25\1\32\17\25\1\u0133"+
    "\53\25\1\32\1\25\1\30\1\25\1\32\33\25\1\u0134"+
    "\37\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0135"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0136"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\26\25\1\u0137"+
    "\44\25\1\32\1\25\1\30\1\25\1\32\40\25\1\u0138"+
    "\32\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0139"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u013a"+
    "\51\25\3\361\1\u0117\1\25\1\u013b\1\25\1\32\73\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u013c\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\25\25\1\u013d\45\25"+
    "\1\32\1\25\1\30\1\25\1\32\33\25\1\u013e\33\25"+
    "\70\0\1\u013f\77\0\1\u0140\7\0\6\32\1\62\22\32"+
    "\1\u0141\54\32\1\62\20\32\1\u0142\56\32\1\62\51\32"+
    "\1\u0143\25\32\1\62\31\32\1\u0144\45\32\1\62\32\32"+
    "\1\u0145\44\32\1\62\35\32\1\u0146\41\32\1\62\26\32"+
    "\1\u0147\50\32\1\62\20\32\1\u0148\56\32\1\62\30\32"+
    "\1\u0149\46\32\1\62\32\32\1\u014a\44\32\1\62\35\32"+
    "\1\u014b\41\32\1\62\20\32\1\u014c\56\32\1\62\16\32"+
    "\1\u014d\60\32\1\62\24\32\1\u014e\52\32\1\62\14\32"+
    "\1\u014f\62\32\1\62\20\32\1\u0150\56\32\1\62\36\32"+
    "\1\u0151\40\32\1\62\40\32\1\u0152\36\32\1\62\20\32"+
    "\1\u0153\56\32\1\62\16\32\1\u0154\60\32\1\62\24\32"+
    "\1\u0155\52\32\1\62\24\32\1\u0156\52\32\1\62\31\32"+
    "\1\u0157\45\32\1\62\21\32\1\u0158\55\32\1\62\35\32"+
    "\1\u0159\41\32\1\62\32\32\1\u015a\44\32\1\62\32\32"+
    "\1\u015b\44\32\1\62\30\32\1\u015c\46\32\1\62\42\32"+
    "\1\u015d\34\32\1\62\32\32\1\u015e\44\32\1\62\20\32"+
    "\1\u015f\51\32\4\u0117\1\32\1\u013b\77\32\1\62\32\32"+
    "\1\u0160\44\32\1\62\27\32\1\u0161\47\32\1\62\35\32"+
    "\1\u0162\33\32\4\25\1\32\1\25\1\30\1\25\1\32"+
    "\2\25\1\u0163\1\u0164\3\u0165\64\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\u0166\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\u0167\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\35\25\1\u0168\32\25\3\u011f\1\u0144\1\25"+
    "\1\u0169\1\25\1\32\73\25\1\32\1\25\1\30\1\25"+
    "\1\32\47\25\1\u016a\23\25\1\32\1\25\1\30\1\25"+
    "\1\32\30\25\1\u016b\42\25\1\32\1\25\1\30\1\25"+
    "\1\32\13\25\1\u016c\54\25\3\u0123\1\u0148\1\25\1\u016d"+
    "\1\25\1\32\73\25\1\32\1\25\1\30\1\25\1\32"+
    "\27\25\1\u016e\40\25\3\u0125\1\u014a\1\25\1\u016f\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\47\25"+
    "\1\u0170\23\25\1\32\1\25\1\30\1\25\1\32\27\25"+
    "\1\u0171\43\25\1\32\1\25\1\30\1\25\1\32\21\25"+
    "\1\u0172\51\25\1\32\1\25\1\30\1\25\1\32\27\25"+
    "\1\u0173\43\25\1\32\1\25\1\30\1\25\1\32\47\25"+
    "\1\u0174\23\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u0175\34\25\3\u012c\1\u0151\1\25\1\u0176\1\25\1\32"+
    "\73\25\1\32\1\25\1\30\1\25\1\32\25\25\1\u0177"+
    "\45\25\1\32\1\25\1\30\1\25\1\32\27\25\1\u0178"+
    "\43\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u0179"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u017a"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\17\25\1\u017b"+
    "\53\25\1\32\1\25\1\30\1\25\1\32\47\25\1\u017c"+
    "\23\25\1\32\1\25\1\30\1\25\1\32\22\25\1\u017d"+
    "\50\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u017e"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\47\25\1\u017f"+
    "\23\25\1\32\1\25\1\30\1\25\1\32\27\25\1\u0180"+
    "\43\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u0181"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0182"+
    "\37\25\3\u0139\1\u015e\1\25\1\u0183\1\25\1\32\73\25"+
    "\1\32\1\25\1\30\1\25\1\32\33\25\1\u0184\37\25"+
    "\1\32\1\25\1\30\1\25\1\32\47\25\1\u0185\23\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u0186\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\22\25\1\u0187\44\25"+
    "\66\0\1\u0188\77\0\1\u0189\11\0\6\32\1\62\14\32"+
    "\1\u018a\62\32\1\62\14\32\1\u018b\62\32\1\62\37\32"+
    "\1\u018c\32\32\4\u0144\1\32\1\u0169\77\32\1\62\51\32"+
    "\1\u018d\25\32\1\62\32\32\1\u018e\44\32\1\62\15\32"+
    "\1\u018f\54\32\4\u0148\1\32\1\u016d\77\32\1\62\31\32"+
    "\1\u0190\40\32\4\u014a\1\32\1\u016f\77\32\1\62\51\32"+
    "\1\u0191\25\32\1\62\31\32\1\u0192\45\32\1\62\23\32"+
    "\1\u0193\53\32\1\62\31\32\1\u0194\45\32\1\62\51\32"+
    "\1\u0195\25\32\1\62\35\32\1\u0196\34\32\4\u0151\1\32"+
    "\1\u0176\77\32\1\62\27\32\1\u0197\47\32\1\62\31\32"+
    "\1\u0198\45\32\1\62\20\32\1\u0199\56\32\1\62\20\32"+
    "\1\u019a\56\32\1\62\21\32\1\u019b\55\32\1\62\51\32"+
    "\1\u019c\25\32\1\62\24\32\1\u019d\52\32\1\62\20\32"+
    "\1\u019e\56\32\1\62\51\32\1\u019f\25\32\1\62\31\32"+
    "\1\u01a0\45\32\1\62\20\32\1\u01a1\56\32\1\62\32\32"+
    "\1\u01a2\37\32\4\u015e\1\32\1\u0183\77\32\1\62\35\32"+
    "\1\u01a3\41\32\1\62\51\32\1\u01a4\25\32\1\62\32\32"+
    "\1\u01a5\44\32\1\62\24\32\1\u01a6\44\32\4\25\1\32"+
    "\1\25\1\30\1\25\1\32\3\25\4\u0165\64\25\1\32"+
    "\1\25\1\30\1\25\1\32\1\25\1\u01a7\3\u0165\66\25"+
    "\1\32\1\25\1\30\1\25\1\32\1\25\1\u01a7\71\25"+
    "\1\32\1\25\1\30\1\25\1\32\33\25\1\u01a8\37\25"+
    "\1\32\1\25\1\30\1\25\1\32\14\25\1\u01a9\56\25"+
    "\1\32\1\25\1\30\1\25\1\32\16\25\1\u01aa\54\25"+
    "\1\32\1\25\1\30\1\25\1\32\35\25\1\u01ab\32\25"+
    "\3\u016b\1\u018e\1\25\1\u01ac\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u01ad\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\12\25\1\u01ae\60\25\1\32"+
    "\1\25\1\30\1\25\1\32\36\25\1\u01af\34\25\1\32"+
    "\1\25\1\30\1\25\1\32\14\25\1\u01b0\56\25\1\32"+
    "\1\25\1\30\1\25\1\32\12\25\1\u01b1\60\25\1\32"+
    "\1\25\1\30\1\25\1\32\12\25\1\u01b2\60\25\1\32"+
    "\1\25\1\30\1\25\1\32\14\25\1\u01b3\11\25\1\u01b4"+
    "\44\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u01b5"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\12\25\1\u01b6"+
    "\55\25\3\u0178\1\u0198\1\25\1\u01b7\1\25\1\32\70\25"+
    "\3\u0179\1\u0199\1\25\1\u01b8\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u01b9\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u01ba\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\36\25\1\u01bb\34\25\1\32"+
    "\1\25\1\30\1\25\1\32\14\25\1\u01bc\53\25\3\u01bd"+
    "\1\u01be\1\25\1\u01bf\1\25\1\32\47\25\1\u01c0\23\25"+
    "\1\32\1\25\1\30\1\25\1\32\17\25\1\u01c1\11\25"+
    "\1\u01c2\41\25\1\32\1\25\1\30\1\25\1\32\16\25"+
    "\1\u01c3\54\25\1\32\1\25\1\30\1\25\1\32\35\25"+
    "\1\u01c4\35\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u01c5\37\25\1\32\1\25\1\30\1\25\1\32\22\25"+
    "\1\u01c6\50\25\1\32\1\25\1\30\1\25\1\32\37\25"+
    "\1\u01c7\30\25\3\u0186\1\u01a5\1\25\1\u01c8\1\25\1\32"+
    "\73\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u01c9"+
    "\36\25\65\0\1\u01ca\77\0\1\u01cb\12\0\6\32\1\62"+
    "\35\32\1\u01cc\41\32\1\62\16\32\1\u01cd\60\32\1\62"+
    "\20\32\1\u01ce\56\32\1\62\37\32\1\u01cf\32\32\4\u018e"+
    "\1\32\1\u01ac\77\32\1\62\32\32\1\u01d0\44\32\1\62"+
    "\14\32\1\u01d1\62\32\1\62\40\32\1\u01d2\36\32\1\62"+
    "\16\32\1\u01d3\60\32\1\62\14\32\1\u01d4\62\32\1\62"+
    "\14\32\1\u01d5\62\32\1\62\16\32\1\u01d6\11\32\1\u01d7"+
    "\46\32\1\62\32\32\1\u01d8\44\32\1\62\14\32\1\u01d9"+
    "\55\32\4\u0198\1\32\1\u01b7\72\32\4\u0199\1\32\1\u01b8"+
    "\77\32\1\62\35\32\1\u01da\41\32\1\62\24\32\1\u01db"+
    "\52\32\1\62\40\32\1\u01dc\36\32\1\62\16\32\1\u01dd"+
    "\53\32\4\u01be\1\32\1\u01bf\51\32\1\u01de\25\32\1\62"+
    "\21\32\1\u01df\11\32\1\u01e0\43\32\1\62\20\32\1\u01e1"+
    "\56\32\1\62\37\32\1\u01e2\37\32\1\62\35\32\1\u01e3"+
    "\41\32\1\62\24\32\1\u01e4\52\32\1\62\41\32\1\u01e5"+
    "\30\32\4\u01a5\1\32\1\u01c8\77\32\1\62\32\32\1\u01e6"+
    "\36\32\4\25\1\32\1\25\1\30\1\25\1\32\2\25"+
    "\1\u01e7\2\u01e8\1\u01e9\1\u01ea\64\25\1\32\1\25\1\30"+
    "\1\25\1\32\47\25\1\u01eb\23\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\u01ec\50\25\1\32\1\25\1\30"+
    "\1\25\1\32\41\25\1\u01ed\31\25\1\32\1\25\1\30"+
    "\1\25\1\32\16\25\1\u01ee\54\25\1\32\1\25\1\30"+
    "\1\25\1\32\41\25\1\u01ef\31\25\1\32\1\25\1\30"+
    "\1\25\1\32\34\25\1\u01f0\36\25\1\32\1\25\1\30"+
    "\1\25\1\32\34\25\1\u01f1\36\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\u01f2\45\25\3\u01b1\1\u01d4\1\25"+
    "\1\u01f3\1\25\1\32\73\25\1\32\1\25\1\30\1\25"+
    "\1\32\33\25\1\u01f4\37\25\1\32\1\25\1\30\1\25"+
    "\1\32\33\25\1\u01f5\37\25\1\32\1\25\1\30\1\25"+
    "\1\32\30\25\1\u01f6\37\25\3\u01b5\1\u01d8\1\25\1\u01f7"+
    "\1\25\1\32\73\25\1\32\1\25\1\30\1\25\1\32"+
    "\33\25\1\u01f8\37\25\1\32\1\25\1\30\1\25\1\32"+
    "\15\25\1\u01f9\55\25\1\32\1\25\1\30\1\25\1\32"+
    "\14\25\1\u01fa\56\25\1\32\1\25\1\30\1\25\1\32"+
    "\34\25\1\u01fb\36\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\u01fc\55\25\3\u01bd\1\u01be\1\25\1\u01bf\1\25"+
    "\1\32\67\25\1\32\4\u01be\1\32\1\u01bf\71\32\4\25"+
    "\1\32\1\25\1\30\1\25\1\32\14\25\1\u01fd\56\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u01fe\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\12\25\1\u01ff\60\25"+
    "\1\32\1\25\1\30\1\25\1\32\34\25\1\u0200\36\25"+
    "\1\32\1\25\1\30\1\25\1\32\33\25\1\u0201\37\25"+
    "\1\32\1\25\1\30\1\25\1\32\15\25\1\u0202\55\25"+
    "\1\32\1\25\1\30\1\25\1\32\15\25\1\u0203\55\25"+
    "\1\32\1\25\1\30\1\25\1\32\22\25\1\u0204\45\25"+
    "\3\u0205\1\u0206\1\25\1\u0207\1\25\1\32\47\25\1\u0208"+
    "\17\25\61\0\1\u0209\77\0\1\u020a\16\0\6\32\1\62"+
    "\51\32\1\u020b\25\32\1\62\24\32\1\u020c\52\32\1\62"+
    "\43\32\1\u020d\33\32\1\62\20\32\1\u020e\56\32\1\62"+
    "\43\32\1\u020f\33\32\1\62\36\32\1\u0210\40\32\1\62"+
    "\36\32\1\u0211\40\32\1\62\24\32\1\u0212\45\32\4\u01d4"+
    "\1\32\1\u01f3\77\32\1\62\35\32\1\u0213\41\32\1\62"+
    "\35\32\1\u0214\41\32\1\62\32\32\1\u0215\37\32\4\u01d8"+
    "\1\32\1\u01f7\77\32\1\62\35\32\1\u0216\41\32\1\62"+
    "\17\32\1\u0217\57\32\1\62\16\32\1\u0218\60\32\1\62"+
    "\36\32\1\u0219\40\32\1\62\14\32\1\u021a\62\32\1\62"+
    "\16\32\1\u021b\60\32\1\62\32\32\1\u021c\44\32\1\62"+
    "\14\32\1\u021d\62\32\1\62\36\32\1\u021e\40\32\1\62"+
    "\35\32\1\u021f\41\32\1\62\17\32\1\u0220\57\32\1\62"+
    "\17\32\1\u0221\57\32\1\62\24\32\1\u0222\45\32\4\u0206"+
    "\1\32\1\u0207\51\32\1\u0223\17\32\4\25\1\32\1\25"+
    "\1\30\1\25\1\32\3\25\4\u01ea\64\25\1\32\1\25"+
    "\1\u0224\1\25\1\32\2\25\5\u01ea\64\25\1\32\1\25"+
    "\1\u0224\1\25\1\32\2\25\2\u01ea\67\25\1\32\1\25"+
    "\1\u0224\1\25\1\32\73\25\1\32\1\25\1\30\1\25"+
    "\1\32\14\25\1\u0225\56\25\1\32\1\25\1\30\1\25"+
    "\1\32\30\25\1\u0226\42\25\1\32\1\25\1\30\1\25"+
    "\1\32\35\25\1\u0227\35\25\1\32\1\25\1\30\1\25"+
    "\1\32\41\25\1\u0228\26\25\3\u01ef\1\u020f\1\25\1\u0229"+
    "\1\25\1\32\70\25\3\u01f0\1\u0210\1\25\1\u022a\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\36\25"+
    "\1\u022b\34\25\1\32\1\25\1\30\1\25\1\32\12\25"+
    "\1\u022c\60\25\1\32\1\25\1\30\1\25\1\32\47\25"+
    "\1\u022d\23\25\1\32\1\25\1\30\1\25\1\32\16\25"+
    "\1\u022e\54\25\1\32\1\25\1\30\1\25\1\32\15\25"+
    "\1\u022f\55\25\1\32\1\25\1\30\1\25\1\32\22\25"+
    "\1\u0230\50\25\1\32\1\25\1\30\1\25\1\32\12\25"+
    "\1\u0231\60\25\1\32\1\25\1\30\1\25\1\32\12\25"+
    "\1\u0232\60\25\1\32\1\25\1\30\1\25\1\32\36\25"+
    "\1\u0233\34\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u0234\37\25\1\32\1\25\1\30\1\25\1\32\12\25"+
    "\1\u0235\60\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u0236\37\25\1\32\1\25\1\30\1\25\1\32\34\25"+
    "\1\u0237\33\25\3\u0200\1\u021e\1\25\1\u0238\1\25\1\32"+
    "\73\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0239"+
    "\37\25\3\u0202\1\u0220\1\25\1\u023a\1\25\1\32\73\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u023b\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\34\25\1\u023c\33\25"+
    "\3\u0205\1\u0206\1\25\1\u0207\1\25\1\32\67\25\1\32"+
    "\4\u0206\1\32\1\u0207\71\32\4\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\u023d\1\25\1\u023e\12\25\1\u023f"+
    "\37\25\65\0\1\u0240\77\0\1\u0241\12\0\6\32\1\62"+
    "\16\32\1\u0242\60\32\1\62\32\32\1\u0243\44\32\1\62"+
    "\37\32\1\u0244\37\32\1\62\43\32\1\u0245\26\32\4\u020f"+
    "\1\32\1\u0229\72\32\4\u0210\1\32\1\u022a\77\32\1\62"+
    "\40\32\1\u0246\36\32\1\62\14\32\1\u0247\62\32\1\62"+
    "\51\32\1\u0248\25\32\1\62\20\32\1\u0249\56\32\1\62"+
    "\17\32\1\u024a\57\32\1\62\24\32\1\u024b\52\32\1\62"+
    "\14\32\1\u024c\62\32\1\62\14\32\1\u024d\62\32\1\62"+
    "\40\32\1\u024e\36\32\1\62\35\32\1\u024f\41\32\1\62"+
    "\14\32\1\u0250\62\32\1\62\35\32\1\u0251\41\32\1\62"+
    "\36\32\1\u0252\33\32\4\u021e\1\32\1\u0238\77\32\1\62"+
    "\32\32\1\u0253\37\32\4\u0220\1\32\1\u023a\77\32\1\62"+
    "\32\32\1\u0254\44\32\1\62\36\32\1\u0255\40\32\1\62"+
    "\14\32\1\u0256\1\32\1\u0257\12\32\1\u0258\37\32\4\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u0259\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\27\25\1\u025a\43\25"+
    "\1\32\1\25\1\30\1\25\1\32\30\25\1\u025b\42\25"+
    "\1\32\1\25\1\30\1\25\1\32\35\25\1\u025c\35\25"+
    "\1\32\1\25\1\30\1\25\1\32\12\25\1\u025d\60\25"+
    "\1\32\1\25\1\30\1\25\1\32\25\25\1\u025e\45\25"+
    "\1\32\1\25\1\30\1\25\1\32\14\25\1\u025f\2\25"+
    "\1\u0260\16\25\1\u0261\34\25\1\32\1\25\1\30\1\25"+
    "\1\32\12\25\1\u0262\60\25\1\32\1\25\1\30\1\25"+
    "\1\32\22\25\1\u0263\50\25\1\32\1\25\1\30\1\25"+
    "\1\32\30\25\1\u0264\37\25\3\u0231\1\u024c\1\25\1\u0265"+
    "\1\25\1\32\73\25\1\32\1\25\1\30\1\25\1\32"+
    "\33\25\1\u0266\37\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\u0267\60\25\1\32\1\25\1\30\1\25\1\32"+
    "\47\25\1\u0268\23\25\1\32\1\25\1\30\1\25\1\32"+
    "\26\25\1\u0269\44\25\1\32\1\25\1\30\1\25\1\32"+
    "\26\25\1\u026a\44\25\1\32\1\25\1\30\1\25\1\32"+
    "\34\25\1\u026b\36\25\1\32\1\25\1\30\1\25\1\32"+
    "\34\25\1\u026c\33\25\3\u023b\1\u0254\1\25\1\u026d\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\22\25"+
    "\1\u026e\50\25\1\32\1\25\1\30\1\25\1\32\27\25"+
    "\1\u026f\43\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u0270\37\25\1\32\1\25\1\30\1\25\1\32\36\25"+
    "\1\u0271\30\25\73\0\1\u0272\77\0\1\u0273\4\0\6\32"+
    "\1\62\32\32\1\u0274\44\32\1\62\31\32\1\u0275\45\32"+
    "\1\62\32\32\1\u0276\44\32\1\62\37\32\1\u0277\37\32"+
    "\1\62\14\32\1\u0278\62\32\1\62\27\32\1\u0279\47\32"+
    "\1\62\16\32\1\u027a\2\32\1\u027b\16\32\1\u027c\36\32"+
    "\1\62\14\32\1\u027d\62\32\1\62\24\32\1\u027e\52\32"+
    "\1\62\32\32\1\u027f\37\32\4\u024c\1\32\1\u0265\77\32"+
    "\1\62\35\32\1\u0280\41\32\1\62\14\32\1\u0281\62\32"+
    "\1\62\51\32\1\u0282\25\32\1\62\30\32\1\u0283\46\32"+
    "\1\62\30\32\1\u0284\46\32\1\62\36\32\1\u0285\40\32"+
    "\1\62\36\32\1\u0286\33\32\4\u0254\1\32\1\u026d\77\32"+
    "\1\62\24\32\1\u0287\52\32\1\62\31\32\1\u0288\45\32"+
    "\1\62\35\32\1\u0289\41\32\1\62\40\32\1\u028a\30\32"+
    "\4\25\1\32\1\25\1\30\1\25\1\32\26\25\1\u028b"+
    "\41\25\3\u025a\1\u0275\1\25\1\u028c\1\25\1\32\70\25"+
    "\3\u025b\1\u0276\1\25\1\u028d\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u028e\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u028f\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\16\25\1\u0290\54\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u0291\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u0292\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\34\25\1\u0293\36\25\1\32"+
    "\1\25\1\30\1\25\1\32\14\25\1\u0294\56\25\1\32"+
    "\1\25\1\30\1\25\1\32\17\25\1\u0295\50\25\3\u0264"+
    "\1\u027f\1\25\1\u0296\1\25\1\32\70\25\3\u0266\1\u0280"+
    "\1\25\1\u0297\1\25\1\32\73\25\1\32\1\25\1\30"+
    "\1\25\1\32\33\25\1\u0298\37\25\1\32\1\25\1\30"+
    "\1\25\1\32\14\25\1\u0299\2\25\1\u029a\16\25\1\u029b"+
    "\34\25\1\32\1\25\1\30\1\25\1\32\31\25\1\u029c"+
    "\41\25\1\32\1\25\1\30\1\25\1\32\36\25\1\u029d"+
    "\34\25\1\32\1\25\1\30\1\25\1\32\40\25\1\u029e"+
    "\32\25\1\32\1\25\1\30\1\25\1\32\47\25\1\u029f"+
    "\23\25\1\32\1\25\1\30\1\25\1\32\13\25\1\u02a0"+
    "\57\25\1\32\1\25\1\30\1\25\1\32\35\25\1\u02a1"+
    "\35\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u02a2"+
    "\54\25\1\32\1\25\1\30\1\25\1\32\16\25\1\u02a3"+
    "\50\25\74\0\1\u02a4\77\0\1\u02a5\3\0\6\32\1\62"+
    "\30\32\1\u02a6\41\32\4\u0275\1\32\1\u028c\72\32\4\u0276"+
    "\1\32\1\u028d\77\32\1\62\32\32\1\u02a7\44\32\1\62"+
    "\35\32\1\u02a8\41\32\1\62\20\32\1\u02a9\56\32\1\62"+
    "\32\32\1\u02aa\44\32\1\62\32\32\1\u02ab\44\32\1\62"+
    "\36\32\1\u02ac\40\32\1\62\16\32\1\u02ad\60\32\1\62"+
    "\21\32\1\u02ae\50\32\4\u027f\1\32\1\u0296\72\32\4\u0280"+
    "\1\32\1\u0297\77\32\1\62\35\32\1\u02af\41\32\1\62"+
    "\16\32\1\u02b0\2\32\1\u02b1\16\32\1\u02b2\36\32\1\62"+
    "\33\32\1\u02b3\43\32\1\62\40\32\1\u02b4\36\32\1\62"+
    "\42\32\1\u02b5\34\32\1\62\51\32\1\u02b6\25\32\1\62"+
    "\15\32\1\u02b7\61\32\1\62\37\32\1\u02b8\37\32\1\62"+
    "\20\32\1\u02b9\56\32\1\62\20\32\1\u02ba\50\32\4\25"+
    "\1\32\1\25\1\30\1\25\1\32\31\25\1\u02bb\36\25"+
    "\3\u028e\1\u02a7\1\25\1\u02bc\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u02bd\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\34\25\1\u02be\36\25\1\32"+
    "\1\25\1\30\1\25\1\32\26\25\1\u02bf\44\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u02c0\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\36\25\1\u02c1\34\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u02c2\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u02c3\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u02c4\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u02c5\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u02c6\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\34\25\1\u02c7\36\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u02c8\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\25\25\1\u02c9\45\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u02ca\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\14\25\1\u02cb\2\25\1\u02cc"+
    "\53\25\1\32\1\25\1\30\1\25\1\32\25\25\1\u02cd"+
    "\45\25\1\32\1\25\1\30\1\25\1\32\22\25\1\u02ce"+
    "\50\25\1\32\1\25\1\30\1\25\1\32\12\25\1\u02cf"+
    "\60\25\1\32\1\25\1\30\1\25\1\32\37\25\1\u02d0"+
    "\27\25\62\0\1\u02d1\77\0\1\u02d2\15\0\6\32\1\62"+
    "\33\32\1\u02d3\36\32\4\u02a7\1\32\1\u02bc\77\32\1\62"+
    "\24\32\1\u02d4\52\32\1\62\36\32\1\u02d5\40\32\1\62"+
    "\30\32\1\u02d6\46\32\1\62\35\32\1\u02d7\41\32\1\62"+
    "\40\32\1\u02d8\36\32\1\62\24\32\1\u02d9\52\32\1\62"+
    "\24\32\1\u02da\52\32\1\62\24\32\1\u02db\52\32\1\62"+
    "\32\32\1\u02dc\44\32\1\62\32\32\1\u02dd\44\32\1\62"+
    "\36\32\1\u02de\40\32\1\62\32\32\1\u02df\44\32\1\62"+
    "\27\32\1\u02e0\47\32\1\62\32\32\1\u02e1\44\32\1\62"+
    "\16\32\1\u02e2\2\32\1\u02e3\55\32\1\62\27\32\1\u02e4"+
    "\47\32\1\62\24\32\1\u02e5\52\32\1\62\14\32\1\u02e6"+
    "\62\32\1\62\41\32\1\u02e7\27\32\4\25\1\32\1\25"+
    "\1\30\1\25\1\32\30\25\1\u02e8\42\25\1\32\1\25"+
    "\1\30\1\25\1\32\30\25\1\u02e9\42\25\1\32\1\25"+
    "\1\30\1\25\1\32\47\25\1\u02ea\23\25\1\32\1\25"+
    "\1\30\1\25\1\32\31\25\1\u02eb\41\25\1\32\1\25"+
    "\1\30\1\25\1\32\26\25\1\u02ec\44\25\1\32\1\25"+
    "\1\30\1\25\1\32\12\25\1\u02ed\60\25\1\32\1\25"+
    "\1\30\1\25\1\32\30\25\1\u02ee\42\25\1\32\1\25"+
    "\1\30\1\25\1\32\14\25\1\u02ef\56\25\1\32\1\25"+
    "\1\30\1\25\1\32\30\25\1\u02f0\42\25\1\32\1\25"+
    "\1\30\1\25\1\32\26\25\1\u02f1\44\25\1\32\1\25"+
    "\1\30\1\25\1\32\33\25\1\u02f2\37\25\1\32\1\25"+
    "\1\30\1\25\1\32\36\25\1\u02f3\31\25\3\u02c8\1\u02df"+
    "\1\25\1\u02f4\1\25\1\32\73\25\1\32\1\25\1\30"+
    "\1\25\1\32\12\25\1\u02f5\60\25\1\32\1\25\1\30"+
    "\1\25\1\32\33\25\1\u02f6\37\25\1\32\1\25\1\30"+
    "\1\25\1\32\30\25\1\u02f7\42\25\1\32\1\25\1\30"+
    "\1\25\1\32\30\25\1\u02f8\42\25\1\32\1\25\1\30"+
    "\1\25\1\32\16\25\1\u02f9\54\25\1\32\1\25\1\30"+
    "\1\25\1\32\20\25\1\u02fa\52\25\1\32\1\25\1\30"+
    "\1\25\1\32\14\25\1\u02fb\56\25\1\32\1\25\1\30"+
    "\1\25\1\32\30\25\1\u02fc\36\25\63\0\1\u02fd\77\0"+
    "\1\u02fe\14\0\6\32\1\62\32\32\1\u02ff\44\32\1\62"+
    "\32\32\1\u0300\44\32\1\62\51\32\1\u0301\25\32\1\62"+
    "\33\32\1\u0302\43\32\1\62\30\32\1\u0303\46\32\1\62"+
    "\14\32\1\u0304\62\32\1\62\32\32\1\u0305\44\32\1\62"+
    "\16\32\1\u0306\60\32\1\62\32\32\1\u0307\44\32\1\62"+
    "\30\32\1\u0308\46\32\1\62\35\32\1\u0309\41\32\1\62"+
    "\40\32\1\u030a\31\32\4\u02df\1\32\1\u02f4\77\32\1\62"+
    "\14\32\1\u030b\62\32\1\62\35\32\1\u030c\41\32\1\62"+
    "\32\32\1\u030d\44\32\1\62\32\32\1\u030e\44\32\1\62"+
    "\20\32\1\u030f\56\32\1\62\22\32\1\u0310\54\32\1\62"+
    "\16\32\1\u0311\60\32\1\62\32\32\1\u0312\36\32\4\25"+
    "\1\32\1\25\1\30\1\25\1\32\27\25\1\u0313\40\25"+
    "\3\u02e9\1\u0300\1\25\1\u0314\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\36\25\1\u0315\34\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u0316\42\25\1\32"+
    "\1\25\1\30\1\25\1\32\36\25\1\u0317\34\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u0318\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\27\25\1\u0319\43\25\1\32"+
    "\1\25\1\30\1\25\1\32\12\25\1\u031a\55\25\3\u02f0"+
    "\1\u0307\1\25\1\u031b\1\25\1\32\73\25\1\32\1\25"+
    "\1\30\1\25\1\32\31\25\1\u031c\41\25\1\32\1\25"+
    "\1\30\1\25\1\32\26\25\1\u031d\44\25\1\32\1\25"+
    "\1\30\1\25\1\32\12\25\1\u031e\60\25\1\32\1\25"+
    "\1\30\1\25\1\32\33\25\1\u031f\37\25\1\32\1\25"+
    "\1\30\1\25\1\32\15\25\1\u0320\55\25\1\32\1\25"+
    "\1\30\1\25\1\32\26\25\1\u0321\44\25\1\32\1\25"+
    "\1\30\1\25\1\32\33\25\1\u0322\34\25\3\u02f9\1\u030f"+
    "\1\25\1\u0323\1\25\1\32\73\25\1\32\1\25\1\30"+
    "\1\25\1\32\36\25\1\u0324\34\25\1\32\1\25\1\30"+
    "\1\25\1\32\22\25\1\u0325\45\25\3\u02fc\1\u0312\1\25"+
    "\1\u0326\1\25\1\32\67\25\72\0\1\u0327\77\0\1\u0328"+
    "\5\0\6\32\1\62\31\32\1\u0329\40\32\4\u0300\1\32"+
    "\1\u0314\77\32\1\62\40\32\1\u032a\36\32\1\62\32\32"+
    "\1\u032b\44\32\1\62\40\32\1\u032c\36\32\1\62\35\32"+
    "\1\u032d\41\32\1\62\31\32\1\u032e\45\32\1\62\14\32"+
    "\1\u032f\55\32\4\u0307\1\32\1\u031b\77\32\1\62\33\32"+
    "\1\u0330\43\32\1\62\30\32\1\u0331\46\32\1\62\14\32"+
    "\1\u0332\62\32\1\62\35\32\1\u0333\41\32\1\62\17\32"+
    "\1\u0334\57\32\1\62\30\32\1\u0335\46\32\1\62\35\32"+
    "\1\u0336\34\32\4\u030f\1\32\1\u0323\77\32\1\62\40\32"+
    "\1\u0337\36\32\1\62\24\32\1\u0338\45\32\4\u0312\1\32"+
    "\1\u0326\71\32\4\25\1\32\1\25\1\30\1\25\1\32"+
    "\16\25\1\u0339\54\25\1\32\1\25\1\30\1\25\1\32"+
    "\34\25\1\u033a\36\25\1\32\1\25\1\30\1\25\1\32"+
    "\27\25\1\u033b\43\25\1\32\1\25\1\30\1\25\1\32"+
    "\25\25\1\u033c\45\25\1\32\1\25\1\30\1\25\1\32"+
    "\22\25\1\u033d\45\25\3\u0319\1\u032e\1\25\1\u033e\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\14\25"+
    "\1\u033f\56\25\1\32\1\25\1\30\1\25\1\32\30\25"+
    "\1\u0340\42\25\1\32\1\25\1\30\1\25\1\32\36\25"+
    "\1\u0341\34\25\1\32\1\25\1\30\1\25\1\32\33\25"+
    "\1\u0342\37\25\1\32\1\25\1\30\1\25\1\32\22\25"+
    "\1\u0343\45\25\3\u0320\1\u0334\1\25\1\u0344\1\25\1\32"+
    "\73\25\1\32\1\25\1\30\1\25\1\32\31\25\1\u0345"+
    "\41\25\1\32\1\25\1\30\1\25\1\32\26\25\1\u0346"+
    "\44\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0347"+
    "\42\25\1\32\1\25\1\30\1\25\1\32\30\25\1\u0348"+
    "\36\25\6\32\1\62\20\32\1\u0349\56\32\1\62\36\32"+
    "\1\u034a\40\32\1\62\31\32\1\u034b\45\32\1\62\27\32"+
    "\1\u034c\47\32\1\62\24\32\1\u034d\45\32\4\u032e\1\32"+
    "\1\u033e\77\32\1\62\16\32\1\u034e\60\32\1\62\32\32"+
    "\1\u034f\44\32\1\62\40\32\1\u0350\36\32\1\62\35\32"+
    "\1\u0351\41\32\1\62\24\32\1\u0352\45\32\4\u0334\1\32"+
    "\1\u0344\77\32\1\62\33\32\1\u0353\43\32\1\62\30\32"+
    "\1\u0354\46\32\1\62\32\32\1\u0355\44\32\1\62\32\32"+
    "\1\u0356\36\32\4\25\1\32\1\25\1\30\1\25\1\32"+
    "\27\25\1\u0357\43\25\1\32\1\25\1\30\1\25\1\32"+
    "\36\25\1\u0358\34\25\1\32\1\25\1\30\1\25\1\32"+
    "\16\25\1\u0359\54\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\u035a\60\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\u035b\42\25\1\32\1\25\1\30\1\25\1\32"+
    "\22\25\1\u035c\50\25\1\32\1\25\1\30\1\25\1\32"+
    "\27\25\1\u035d\43\25\1\32\1\25\1\30\1\25\1\32"+
    "\25\25\1\u035e\45\25\1\32\1\25\1\30\1\25\1\32"+
    "\22\25\1\u035f\50\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\u0360\42\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\u0361\42\25\1\32\1\25\1\30\1\25\1\32"+
    "\36\25\1\u0362\31\25\3\u0347\1\u0355\1\25\1\u0363\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\27\25"+
    "\1\u0364\37\25\6\32\1\62\31\32\1\u0365\45\32\1\62"+
    "\40\32\1\u0366\36\32\1\62\20\32\1\u0367\56\32\1\62"+
    "\14\32\1\u0368\62\32\1\62\32\32\1\u0369\44\32\1\62"+
    "\24\32\1\u036a\52\32\1\62\31\32\1\u036b\45\32\1\62"+
    "\27\32\1\u036c\47\32\1\62\24\32\1\u036d\52\32\1\62"+
    "\32\32\1\u036e\44\32\1\62\32\32\1\u036f\44\32\1\62"+
    "\40\32\1\u0370\31\32\4\u0355\1\32\1\u0363\77\32\1\62"+
    "\31\32\1\u0371\37\32\4\25\1\32\1\25\1\30\1\25"+
    "\1\32\35\25\1\u0372\35\25\1\32\1\25\1\30\1\25"+
    "\1\32\12\25\1\u0373\60\25\1\32\1\25\1\30\1\25"+
    "\1\32\27\25\1\u0374\43\25\1\32\1\25\1\30\1\25"+
    "\1\32\33\25\1\u0375\34\25\3\u035b\1\u0369\1\25\1\u0376"+
    "\1\25\1\32\73\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\u0377\42\25\1\32\1\25\1\30\1\25\1\32"+
    "\16\25\1\u0378\54\25\1\32\1\25\1\30\1\25\1\32"+
    "\12\25\1\u0379\60\25\1\32\1\25\1\30\1\25\1\32"+
    "\30\25\1\u037a\37\25\3\u0360\1\u036e\1\25\1\u037b\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\27\25"+
    "\1\u037c\43\25\1\32\1\25\1\30\1\25\1\32\25\25"+
    "\1\u037d\42\25\3\u0364\1\u0371\1\25\1\u037e\1\25\1\32"+
    "\67\25\6\32\1\62\37\32\1\u037f\37\32\1\62\14\32"+
    "\1\u0380\62\32\1\62\31\32\1\u0381\45\32\1\62\35\32"+
    "\1\u0382\34\32\4\u0369\1\32\1\u0376\77\32\1\62\32\32"+
    "\1\u0383\44\32\1\62\20\32\1\u0384\56\32\1\62\14\32"+
    "\1\u0385\62\32\1\62\32\32\1\u0386\37\32\4\u036e\1\32"+
    "\1\u037b\77\32\1\62\31\32\1\u0387\45\32\1\62\27\32"+
    "\1\u0388\42\32\4\u0371\1\32\1\u037e\71\32\4\25\1\32"+
    "\1\25\1\30\1\25\1\32\16\25\1\u0389\54\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u038a\37\25\1\32"+
    "\1\25\1\30\1\25\1\32\35\25\1\u038b\35\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u038c\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\27\25\1\u038d\43\25\1\32"+
    "\1\25\1\30\1\25\1\32\27\25\1\u038e\43\25\1\32"+
    "\1\25\1\30\1\25\1\32\33\25\1\u038f\34\25\3\u037a"+
    "\1\u0386\1\25\1\u0390\1\25\1\32\73\25\1\32\1\25"+
    "\1\30\1\25\1\32\16\25\1\u0391\54\25\1\32\1\25"+
    "\1\30\1\25\1\32\12\25\1\u0392\54\25\6\32\1\62"+
    "\20\32\1\u0393\56\32\1\62\35\32\1\u0394\41\32\1\62"+
    "\37\32\1\u0395\37\32\1\62\24\32\1\u0396\52\32\1\62"+
    "\31\32\1\u0397\45\32\1\62\31\32\1\u0398\45\32\1\62"+
    "\35\32\1\u0399\34\32\4\u0386\1\32\1\u0390\77\32\1\62"+
    "\20\32\1\u039a\56\32\1\62\14\32\1\u039b\54\32\1\25"+
    "\3\u0389\1\u0393\1\25\1\u039c\1\25\1\32\73\25\1\32"+
    "\1\25\1\30\1\25\1\32\22\25\1\u039d\50\25\1\32"+
    "\1\25\1\30\1\25\1\32\16\25\1\u039e\54\25\1\32"+
    "\1\25\1\30\1\25\1\32\30\25\1\u039f\37\25\3\u038d"+
    "\1\u0397\1\25\1\u03a0\1\25\1\32\73\25\1\32\1\25"+
    "\1\30\1\25\1\32\35\25\1\u03a1\35\25\1\32\1\25"+
    "\1\30\1\25\1\32\22\25\1\u03a2\50\25\1\32\1\25"+
    "\1\30\1\25\1\32\27\25\1\u03a3\43\25\1\32\1\25"+
    "\1\30\1\25\1\32\33\25\1\u03a4\33\25\1\32\4\u0393"+
    "\1\32\1\u039c\77\32\1\62\24\32\1\u03a5\52\32\1\62"+
    "\20\32\1\u03a6\56\32\1\62\32\32\1\u03a7\37\32\4\u0397"+
    "\1\32\1\u03a0\77\32\1\62\37\32\1\u03a8\37\32\1\62"+
    "\24\32\1\u03a9\52\32\1\62\31\32\1\u03aa\45\32\1\62"+
    "\35\32\1\u03ab\33\32\4\25\1\32\1\25\1\30\1\25"+
    "\1\32\30\25\1\u03ac\37\25\3\u039e\1\u03a6\1\25\1\u03ad"+
    "\1\25\1\32\70\25\3\u039f\1\u03a7\1\25\1\u03ae\1\25"+
    "\1\32\73\25\1\32\1\25\1\30\1\25\1\32\16\25"+
    "\1\u03af\54\25\1\32\1\25\1\30\1\25\1\32\30\25"+
    "\1\u03b0\42\25\1\32\1\25\1\30\1\25\1\32\35\25"+
    "\1\u03b1\35\25\1\32\1\25\1\30\1\25\1\32\22\25"+
    "\1\u03b2\44\25\6\32\1\62\32\32\1\u03b3\37\32\4\u03a6"+
    "\1\32\1\u03ad\72\32\4\u03a7\1\32\1\u03ae\77\32\1\62"+
    "\20\32\1\u03b4\56\32\1\62\32\32\1\u03b5\44\32\1\62"+
    "\37\32\1\u03b6\37\32\1\62\24\32\1\u03b7\44\32\1\25"+
    "\3\u03ac\1\u03b3\1\25\1\u03b8\1\25\1\32\70\25\3\u03af"+
    "\1\u03b4\1\25\1\u03b9\1\25\1\32\70\25\3\u03b0\1\u03b5"+
    "\1\25\1\u03ba\1\25\1\32\73\25\1\32\1\25\1\30"+
    "\1\25\1\32\16\25\1\u03bb\54\25\1\32\1\25\1\30"+
    "\1\25\1\32\30\25\1\u03bc\36\25\1\32\4\u03b3\1\32"+
    "\1\u03b8\72\32\4\u03b4\1\32\1\u03b9\72\32\4\u03b5\1\32"+
    "\1\u03ba\77\32\1\62\20\32\1\u03bd\56\32\1\62\32\32"+
    "\1\u03be\36\32\1\25\3\u03bb\1\u03bd\1\25\1\u03bf\1\25"+
    "\1\32\70\25\3\u03bc\1\u03be\1\25\1\u03c0\1\25\1\32"+
    "\67\25\1\32\4\u03bd\1\32\1\u03bf\72\32\4\u03be\1\32"+
    "\1\u03c0\71\32";

  private static int [] zzUnpackTrans() {
    int [] result = new int[57024];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\6\11\2\1\2\11"+
    "\1\1\1\11\1\1\3\0\1\11\25\0\5\11\20\0"+
    "\1\11\125\0\1\11\132\0\1\11\106\0\1\11\55\0"+
    "\1\11\3\0\1\11\1\0\1\11\6\0\1\11\14\0"+
    "\1\11\50\0\1\11\12\0\2\11\6\0\1\11\10\0"+
    "\1\11\52\0\1\11\3\0\1\11\17\0\1\11\34\0"+
    "\1\11\4\0\2\11\15\0\1\11\1\0\1\11\52\0"+
    "\1\11\7\0\1\11\36\0\2\11\10\0\2\11\44\0"+
    "\1\11\24\0\2\1\41\0\1\11\37\0\1\11\6\0"+
    "\1\11\7\0\1\11\2\0\3\11\25\0\1\11\5\0"+
    "\1\11\36\0\1\11\22\0\1\11\4\0\1\11\2\0"+
    "\1\11\21\0\1\11\13\0\1\11\3\0\1\11\14\0"+
    "\2\11\11\0\3\11\4\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[960];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();
    private StringBuffer string = new StringBuffer();

    public List<ErrorAnalisis> getErrores(){
        return this.errores;
    }

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }
    
    private Symbol symbol(int type, String lexema){
        return new Symbol(type, new Token(yyline, yycolumn, lexema);
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addLexicError();
            }
            // fall through
          case 75: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 76: break;
          case 3:
            { return symbol(EXCLAMATION_MARK);
            }
            // fall through
          case 77: break;
          case 4:
            { return symbol(COMMA);
            }
            // fall through
          case 78: break;
          case 5:
            { return symbol(COLON);
            }
            // fall through
          case 79: break;
          case 6:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 80: break;
          case 7:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 81: break;
          case 8:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 82: break;
          case 9:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 83: break;
          case 10:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 84: break;
          case 11:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 85: break;
          case 12:
            { string.append(yytext());
            }
            // fall through
          case 86: break;
          case 13:
            { yybegin(YYINITIAL);
                                        return symbol(VALUE, string.toString());
            }
            // fall through
          case 87: break;
          case 14:
            { string.append('\\');
            }
            // fall through
          case 88: break;
          case 15:
            { return symbol(VALUE);
            }
            // fall through
          case 89: break;
          case 16:
            { string.append('\"');
            }
            // fall through
          case 90: break;
          case 17:
            { string.append('\n');
            }
            // fall through
          case 91: break;
          case 18:
            { string.append('\r');
            }
            // fall through
          case 92: break;
          case 19:
            { string.append('\t');
            }
            // fall through
          case 93: break;
          case 20:
            { return symbol(LITERAL);
            }
            // fall through
          case 94: break;
          case 21:
            { return symbol(ID);
            }
            // fall through
          case 95: break;
          case 22:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 96: break;
          case 23:
            { return symbol(PARAM_URL);
            }
            // fall through
          case 97: break;
          case 24:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 98: break;
          case 25:
            { return symbol(CLASS_BOTON);
            }
            // fall through
          case 99: break;
          case 26:
            { return symbol(PARAM_CLASE);
            }
            // fall through
          case 100: break;
          case 27:
            { return symbol(CLASS_COMBO);
            }
            // fall through
          case 101: break;
          case 28:
            { return symbol(PARAM_FILAS);
            }
            // fall through
          case 102: break;
          case 29:
            { return symbol(CLASS_RADIO);
            }
            // fall through
          case 103: break;
          case 30:
            { return symbol(CENTRO);
            }
            // fall through
          case 104: break;
          case 31:
            { return symbol(CLASS_IMAGEN);
            }
            // fall through
          case 105: break;
          case 32:
            { return symbol(PARAM_INDICE);
            }
            // fall through
          case 106: break;
          case 33:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 107: break;
          case 34:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 108: break;
          case 35:
            { return symbol(DERECHA);
            }
            // fall through
          case 109: break;
          case 36:
            { return symbol(CLASS_FICHERO);
            }
            // fall through
          case 110: break;
          case 37:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 111: break;
          case 38:
            { return symbol(FECHA);
            }
            // fall through
          case 112: break;
          case 39:
            { return symbol(CLASS_CHECKBOX);
            }
            // fall through
          case 113: break;
          case 40:
            { return symbol(PARAM_COLUMNAS);
            }
            // fall through
          case 114: break;
          case 41:
            { return symbol(PARAM_OPCIONES);
            }
            // fall through
          case 115: break;
          case 42:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 116: break;
          case 43:
            { return symbol(IZQUIERDA);
            }
            // fall through
          case 117: break;
          case 44:
            { return symbol(PARAM_REQUERIDO);
            }
            // fall through
          case 118: break;
          case 45:
            { return symbol(PARAM_ALINEACION);
            }
            // fall through
          case 119: break;
          case 46:
            { return symbol(CLASS_AREA_TEXTO);
            }
            // fall through
          case 120: break;
          case 47:
            { return symbol(PARAM_FORMULARIO);
            }
            // fall through
          case 121: break;
          case 48:
            { return symbol(JUSTIFICAR);
            }
            // fall through
          case 122: break;
          case 49:
            { return symbol(CLASS_CAMPO_TEXTO);
            }
            // fall through
          case 123: break;
          case 50:
            { return symbol(END_REQUEST);
            }
            // fall through
          case 124: break;
          case 51:
            { return symbol(START_REQUEST);
            }
            // fall through
          case 125: break;
          case 52:
            { return symbol(PARAM_NOMBRE_CAMPO);
            }
            // fall through
          case 126: break;
          case 53:
            { return symbol(CREATE_USER);
            }
            // fall through
          case 127: break;
          case 54:
            { return symbol(LOGIN);
            }
            // fall through
          case 128: break;
          case 55:
            { return symbol(PARAM_TEXTO_VISIBLE);
            }
            // fall through
          case 129: break;
          case 56:
            { return symbol(PARAM_NEW_USER);
            }
            // fall through
          case 130: break;
          case 57:
            { return symbol(END_REQUESTS);
            }
            // fall through
          case 131: break;
          case 58:
            { return symbol(START_REQUESTS);
            }
            // fall through
          case 132: break;
          case 59:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 133: break;
          case 60:
            { return symbol(PARAM_NEW_PASSWORD);
            }
            // fall through
          case 134: break;
          case 61:
            { return symbol(PARAM_OLD_USER);
            }
            // fall through
          case 135: break;
          case 62:
            { return symbol(DELETE_USER);
            }
            // fall through
          case 136: break;
          case 63:
            { return symbol(NEW_FORM);
            }
            // fall through
          case 137: break;
          case 64:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 138: break;
          case 65:
            { return symbol(MODIFY_USER);
            }
            // fall through
          case 139: break;
          case 66:
            { return symbol(NEW_COMPONENT);
            }
            // fall through
          case 140: break;
          case 67:
            { return symbol(PARAM_FECHA_MODIFICACION);
            }
            // fall through
          case 141: break;
          case 68:
            { return symbol(DELETE_COMPONENT);
            }
            // fall through
          case 142: break;
          case 69:
            { return symbol(DELETE_FORM);
            }
            // fall through
          case 143: break;
          case 70:
            { return symbol(USER_CREDENTIALS);
            }
            // fall through
          case 144: break;
          case 71:
            { return symbol(EDIT_COMPONENT);
            }
            // fall through
          case 145: break;
          case 72:
            { return symbol(MODIFY_FORM);
            }
            // fall through
          case 146: break;
          case 73:
            { return symbol(COMPONENT_PARAMS);
            }
            // fall through
          case 147: break;
          case 74:
            { return symbol(FORM_PARAMS);
            }
            // fall through
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
