// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.l2ashdz.appcliente.analizadores.lexico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

import static com.l2ashdz.appcliente.analizadores.sintactico.sym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\11\0\1\6\1\7\2\0\12\7\1\10"+
    "\1\0\1\11\1\0\1\12\2\0\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\2\7\1\24"+
    "\1\25\1\26\1\27\1\30\1\7\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\3\7\1\37\1\7\1\40\1\7"+
    "\1\41\3\7\1\42\1\43\1\44\1\45\2\7\1\46"+
    "\2\7\1\47\1\7\1\50\1\51\3\7\1\52\1\53"+
    "\1\54\5\7\1\55\1\0\1\56\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\12\6\1\12\1\13\2\6\1\14\1\15"+
    "\3\6\1\16\42\6\1\17\30\6\1\20\3\6\1\21"+
    "\16\6\1\22\14\6\1\23\104\6\1\24\5\6\1\25"+
    "\7\6\1\26\1\27\1\30\3\6\1\31\4\6\1\32"+
    "\15\6\1\33\1\6\1\34\1\35\2\6\1\36\3\6"+
    "\1\37\1\6\1\40\4\6\1\41\3\6\1\42\3\6"+
    "\1\43\2\6\1\44\1\45\1\6\1\46";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\57\0\57\0\57\0\215"+
    "\0\57\0\57\0\57\0\274\0\353\0\u011a\0\u0149\0\u0178"+
    "\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\215\0\215\0\u0292"+
    "\0\u02c1\0\57\0\57\0\u02f0\0\u031f\0\u034e\0\215\0\u037d"+
    "\0\u03ac\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5"+
    "\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d"+
    "\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u07b6\0\u07e5"+
    "\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d"+
    "\0\u098c\0\215\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6"+
    "\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96"+
    "\0\u0dc5\0\u0df4\0\215\0\u0e23\0\u0e52\0\u0e81\0\215\0\u0eb0"+
    "\0\u0edf\0\u0f0e\0\u0f3d\0\u0f6c\0\u0f9b\0\u0fca\0\u0ff9\0\u1028"+
    "\0\u1057\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0"+
    "\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318"+
    "\0\u1347\0\u1376\0\215\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u1608\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751"+
    "\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a\0\u1bb9"+
    "\0\u1be8\0\u1c17\0\u1c46\0\u1c75\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31"+
    "\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9"+
    "\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\215"+
    "\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\215\0\u210c\0\u213b"+
    "\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\215\0\u2255\0\u2284"+
    "\0\u22b3\0\u22e2\0\u2311\0\215\0\u2340\0\u236f\0\u239e\0\u23cd"+
    "\0\215\0\u23fc\0\u242b\0\u245a\0\u2489\0\u24b8\0\u24e7\0\u2516"+
    "\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u2601\0\u2630\0\215\0\u265f"+
    "\0\215\0\215\0\u268e\0\u26bd\0\215\0\u26ec\0\u271b\0\u274a"+
    "\0\215\0\u2779\0\215\0\u27a8\0\u27d7\0\u2806\0\u2835\0\215"+
    "\0\u2864\0\u2893\0\u28c2\0\215\0\u28f1\0\u2920\0\u294f\0\215"+
    "\0\u297e\0\u29ad\0\215\0\215\0\u29dc\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\2\10\1\14\1\10\1\15\1\16\2\10"+
    "\1\17\1\20\1\21\1\22\1\10\1\23\2\10\1\24"+
    "\1\25\2\10\1\26\1\27\4\10\1\30\1\31\6\10"+
    "\1\32\1\33\61\0\1\3\63\0\1\10\3\0\42\10"+
    "\11\0\1\10\3\0\16\10\1\34\23\10\11\0\1\10"+
    "\3\0\11\10\1\35\30\10\11\0\1\10\3\0\4\10"+
    "\1\36\35\10\11\0\1\10\3\0\3\10\1\37\36\10"+
    "\11\0\1\10\3\0\14\10\1\40\25\10\11\0\1\10"+
    "\3\0\14\10\1\41\25\10\11\0\1\10\3\0\14\10"+
    "\1\42\4\10\1\43\20\10\11\0\1\10\3\0\1\44"+
    "\41\10\11\0\1\10\3\0\4\10\1\45\3\10\1\46"+
    "\31\10\11\0\1\10\3\0\17\10\1\47\22\10\11\0"+
    "\1\10\3\0\33\10\1\50\6\10\11\0\1\10\3\0"+
    "\35\10\1\51\4\10\11\0\1\10\3\0\4\10\1\52"+
    "\35\10\11\0\1\10\3\0\10\10\1\53\31\10\11\0"+
    "\1\10\3\0\2\10\1\54\37\10\11\0\1\10\3\0"+
    "\6\10\1\55\33\10\11\0\1\10\3\0\3\10\1\56"+
    "\36\10\11\0\1\10\3\0\12\10\1\57\27\10\11\0"+
    "\1\10\3\0\4\10\1\60\35\10\11\0\1\10\3\0"+
    "\16\10\1\61\1\62\22\10\11\0\1\10\3\0\12\10"+
    "\1\63\27\10\11\0\1\10\3\0\20\10\1\64\21\10"+
    "\11\0\1\10\3\0\21\10\1\65\20\10\11\0\1\10"+
    "\3\0\35\10\1\66\4\10\11\0\1\10\3\0\33\10"+
    "\1\67\6\10\11\0\1\10\3\0\1\70\2\10\1\71"+
    "\36\10\11\0\1\10\3\0\12\10\1\72\27\10\11\0"+
    "\1\10\3\0\7\10\1\73\32\10\11\0\1\10\3\0"+
    "\10\10\1\74\31\10\11\0\1\10\3\0\10\10\1\75"+
    "\31\10\11\0\1\10\3\0\1\10\1\76\40\10\11\0"+
    "\1\10\3\0\22\10\1\77\17\10\11\0\1\10\3\0"+
    "\1\100\41\10\11\0\1\10\3\0\17\10\1\101\22\10"+
    "\11\0\1\10\3\0\1\102\41\10\11\0\1\10\3\0"+
    "\21\10\1\103\20\10\11\0\1\10\3\0\1\104\41\10"+
    "\11\0\1\10\3\0\26\10\1\105\13\10\11\0\1\10"+
    "\3\0\26\10\1\106\13\10\11\0\1\10\3\0\16\10"+
    "\1\107\23\10\11\0\1\10\3\0\4\10\1\110\35\10"+
    "\11\0\1\10\3\0\10\10\1\111\31\10\11\0\1\10"+
    "\3\0\1\112\41\10\11\0\1\10\3\0\13\10\1\113"+
    "\26\10\11\0\1\10\3\0\5\10\1\114\34\10\11\0"+
    "\1\10\3\0\16\10\1\115\23\10\11\0\1\10\3\0"+
    "\14\10\1\116\25\10\11\0\1\10\3\0\12\10\1\117"+
    "\27\10\11\0\1\10\3\0\23\10\1\120\16\10\11\0"+
    "\1\10\3\0\11\10\1\121\30\10\11\0\1\10\3\0"+
    "\16\10\1\122\23\10\11\0\1\10\3\0\37\10\1\123"+
    "\2\10\11\0\1\10\3\0\37\10\1\124\2\10\11\0"+
    "\1\10\3\0\26\10\1\125\13\10\11\0\1\10\3\0"+
    "\13\10\1\126\26\10\11\0\1\10\3\0\13\10\1\127"+
    "\26\10\11\0\1\10\3\0\26\10\1\130\13\10\11\0"+
    "\1\10\3\0\26\10\1\131\13\10\11\0\1\10\3\0"+
    "\10\10\1\132\31\10\11\0\1\10\3\0\4\10\1\133"+
    "\35\10\11\0\1\10\3\0\26\10\1\134\13\10\11\0"+
    "\1\10\3\0\4\10\1\135\35\10\11\0\1\10\3\0"+
    "\14\10\1\136\25\10\11\0\1\10\3\0\14\10\1\137"+
    "\25\10\11\0\1\10\3\0\10\10\1\140\31\10\11\0"+
    "\1\10\3\0\36\10\1\141\3\10\11\0\1\10\3\0"+
    "\36\10\1\142\3\10\11\0\1\10\3\0\21\10\1\143"+
    "\20\10\11\0\1\10\3\0\2\10\1\144\37\10\11\0"+
    "\1\10\3\0\1\145\41\10\11\0\1\10\3\0\2\10"+
    "\1\146\7\10\1\147\27\10\11\0\1\10\3\0\21\10"+
    "\1\150\20\10\11\0\1\10\3\0\2\10\1\151\37\10"+
    "\11\0\1\10\3\0\5\10\1\152\7\10\1\153\24\10"+
    "\11\0\1\10\3\0\20\10\1\154\21\10\11\0\1\10"+
    "\3\0\16\10\1\155\23\10\11\0\1\10\3\0\14\10"+
    "\1\156\25\10\11\0\1\10\3\0\34\10\1\157\5\10"+
    "\11\0\1\10\3\0\34\10\1\160\5\10\11\0\1\10"+
    "\3\0\17\10\1\161\22\10\11\0\1\10\3\0\10\10"+
    "\1\162\31\10\11\0\1\10\3\0\16\10\1\163\23\10"+
    "\11\0\1\10\3\0\16\10\1\164\23\10\11\0\1\10"+
    "\3\0\14\10\1\165\25\10\11\0\1\10\3\0\17\10"+
    "\1\166\22\10\11\0\1\10\3\0\1\167\41\10\11\0"+
    "\1\10\3\0\14\10\1\170\25\10\11\0\1\10\3\0"+
    "\1\171\41\10\11\0\1\10\3\0\16\10\1\172\23\10"+
    "\11\0\1\10\3\0\3\10\1\173\36\10\11\0\1\10"+
    "\3\0\26\10\1\174\13\10\11\0\1\10\3\0\33\10"+
    "\1\175\6\10\11\0\1\10\3\0\33\10\1\176\6\10"+
    "\11\0\1\10\3\0\21\10\1\177\20\10\11\0\1\10"+
    "\3\0\1\200\41\10\11\0\1\10\3\0\26\10\1\201"+
    "\13\10\11\0\1\10\3\0\4\10\1\202\35\10\11\0"+
    "\1\10\3\0\3\10\1\203\36\10\11\0\1\10\3\0"+
    "\21\10\1\204\20\10\11\0\1\10\3\0\16\10\1\205"+
    "\23\10\11\0\1\10\3\0\16\10\1\206\23\10\11\0"+
    "\1\10\3\0\17\10\1\207\22\10\11\0\1\10\3\0"+
    "\14\10\1\210\25\10\11\0\1\10\3\0\1\211\1\10"+
    "\1\212\10\10\1\213\26\10\11\0\1\10\3\0\27\10"+
    "\1\214\12\10\11\0\1\10\3\0\27\10\1\215\12\10"+
    "\11\0\1\10\3\0\1\216\41\10\11\0\1\10\3\0"+
    "\11\10\1\217\30\10\11\0\1\10\3\0\5\10\1\220"+
    "\13\10\1\221\20\10\11\0\1\10\3\0\1\222\41\10"+
    "\11\0\1\10\3\0\10\10\1\223\31\10\11\0\1\10"+
    "\3\0\1\224\41\10\11\0\1\10\3\0\26\10\1\225"+
    "\13\10\11\0\1\10\3\0\12\10\1\226\27\10\11\0"+
    "\1\10\3\0\17\10\1\227\22\10\11\0\1\10\3\0"+
    "\17\10\1\230\22\10\11\0\1\10\3\0\13\10\1\231"+
    "\26\10\11\0\1\10\3\0\16\10\1\232\23\10\11\0"+
    "\1\10\3\0\21\10\1\233\20\10\11\0\1\10\3\0"+
    "\33\10\1\234\6\10\11\0\1\10\3\0\33\10\1\235"+
    "\6\10\11\0\1\10\3\0\16\10\1\236\23\10\11\0"+
    "\1\10\3\0\4\10\1\237\35\10\11\0\1\10\3\0"+
    "\14\10\1\240\25\10\11\0\1\10\3\0\17\10\1\241"+
    "\22\10\11\0\1\10\3\0\2\10\1\242\37\10\11\0"+
    "\1\10\3\0\5\10\1\243\34\10\11\0\1\10\3\0"+
    "\16\10\1\244\23\10\11\0\1\10\3\0\5\10\1\245"+
    "\13\10\1\246\20\10\11\0\1\10\3\0\21\10\1\247"+
    "\20\10\11\0\1\10\3\0\23\10\1\250\16\10\11\0"+
    "\1\10\3\0\26\10\1\251\13\10\11\0\1\10\3\0"+
    "\20\10\1\252\21\10\11\0\1\10\3\0\4\10\1\253"+
    "\35\10\11\0\1\10\3\0\4\10\1\254\35\10\11\0"+
    "\1\10\3\0\40\10\1\255\1\10\11\0\1\10\3\0"+
    "\40\10\1\256\1\10\11\0\1\10\3\0\10\10\1\257"+
    "\31\10\11\0\1\10\3\0\17\10\1\260\22\10\11\0"+
    "\1\10\3\0\16\10\1\261\23\10\11\0\1\10\3\0"+
    "\21\10\1\262\20\10\11\0\1\10\3\0\10\10\1\263"+
    "\31\10\11\0\1\10\3\0\10\10\1\264\31\10\11\0"+
    "\1\10\3\0\10\10\1\265\31\10\11\0\1\10\3\0"+
    "\14\10\1\266\25\10\11\0\1\10\3\0\17\10\1\267"+
    "\22\10\11\0\1\10\3\0\11\10\1\270\30\10\11\0"+
    "\1\10\3\0\14\10\1\271\25\10\11\0\1\10\3\0"+
    "\5\10\1\272\34\10\11\0\1\10\3\0\10\10\1\273"+
    "\31\10\11\0\1\10\3\0\1\274\41\10\11\0\1\10"+
    "\3\0\22\10\1\275\17\10\11\0\1\10\3\0\41\10"+
    "\1\276\11\0\1\10\3\0\41\10\1\277\11\0\1\10"+
    "\3\0\14\10\1\300\25\10\11\0\1\10\3\0\26\10"+
    "\1\301\13\10\11\0\1\10\3\0\12\10\1\302\27\10"+
    "\11\0\1\10\3\0\1\303\41\10\11\0\1\10\3\0"+
    "\14\10\1\304\25\10\11\0\1\10\3\0\2\10\1\305"+
    "\37\10\11\0\1\10\3\0\14\10\1\306\25\10\11\0"+
    "\1\10\3\0\16\10\1\307\23\10\11\0\1\10\3\0"+
    "\21\10\1\310\20\10\11\0\1\10\3\0\1\311\41\10"+
    "\11\0\1\10\3\0\16\10\1\312\23\10\11\0\1\10"+
    "\3\0\14\10\1\313\25\10\11\0\1\10\3\0\6\10"+
    "\1\314\33\10\11\0\1\10\3\0\2\10\1\315\37\10"+
    "\11\0\1\10\3\0\14\10\1\316\25\10\11\0\1\10"+
    "\3\0\30\10\1\317\11\10\11\0\1\10\3\0\30\10"+
    "\1\320\11\10\11\0\1\10\3\0\21\10\1\321\20\10"+
    "\11\0\1\10\3\0\21\10\1\322\20\10\11\0\1\10"+
    "\3\0\16\10\1\323\23\10\11\0\1\10\3\0\13\10"+
    "\1\324\26\10\11\0\1\10\3\0\1\325\41\10\11\0"+
    "\1\10\3\0\12\10\1\326\27\10\11\0\1\10\3\0"+
    "\1\327\41\10\11\0\1\10\3\0\16\10\1\330\23\10"+
    "\11\0\1\10\3\0\3\10\1\331\36\10\11\0\1\10"+
    "\3\0\16\10\1\332\23\10\11\0\1\10\3\0\21\10"+
    "\1\333\20\10\11\0\1\10\3\0\10\10\1\334\31\10"+
    "\11\0\1\10\3\0\31\10\1\335\10\10\11\0\1\10"+
    "\3\0\31\10\1\336\10\10\11\0\1\10\3\0\17\10"+
    "\1\337\22\10\11\0\1\10\3\0\11\10\1\340\30\10"+
    "\11\0\1\10\3\0\10\10\1\341\31\10\11\0\1\10"+
    "\3\0\2\10\1\342\37\10\11\0\1\10\3\0\21\10"+
    "\1\343\20\10\11\0\1\10\3\0\16\10\1\344\23\10"+
    "\11\0\1\10\3\0\10\10\1\345\31\10\11\0\1\10"+
    "\3\0\12\10\1\346\27\10\11\0\1\10\3\0\14\10"+
    "\1\347\25\10\11\0\1\10\3\0\14\10\1\350\25\10"+
    "\11\0\1\10\3\0\37\10\1\351\2\10\11\0\1\10"+
    "\3\0\37\10\1\352\2\10\11\0\1\10\3\0\21\10"+
    "\1\353\20\10\11\0\1\10\3\0\1\354\41\10\11\0"+
    "\1\10\3\0\14\10\1\355\25\10\11\0\1\10\3\0"+
    "\10\10\1\356\31\10\11\0\1\10\3\0\11\10\1\357"+
    "\30\10\11\0\1\10\3\0\10\10\1\360\31\10\11\0"+
    "\1\10\3\0\14\10\1\361\25\10\11\0\1\10\3\0"+
    "\21\10\1\362\20\10\11\0\1\10\3\0\13\10\1\363"+
    "\26\10\11\0\1\10\3\0\1\364\41\10\11\0\1\10"+
    "\3\0\16\10\1\365\23\10\11\0\1\10\3\0\14\10"+
    "\1\366\25\10\11\0\1\10\3\0\1\367\41\10\11\0"+
    "\1\10\3\0\14\10\1\370\25\10\11\0\1\10\3\0"+
    "\11\10\1\371\30\10\11\0\1\10\3\0\16\10\1\372"+
    "\23\10\11\0\1\10\3\0\10\10\1\373\31\10\11\0"+
    "\1\10\3\0\13\10\1\374\26\10\11\0\1\10\3\0"+
    "\16\10\1\375\23\10\11\0\1\10\3\0\1\376\41\10"+
    "\11\0\1\10\3\0\10\10\1\377\31\10\11\0\1\10"+
    "\3\0\14\10\1\u0100\25\10\11\0\1\10\3\0\10\10"+
    "\1\u0101\31\10\11\0\1\10\3\0\16\10\1\u0102\23\10"+
    "\11\0\1\10\3\0\14\10\1\u0103\25\10\11\0\1\10"+
    "\3\0\14\10\1\u0104\25\10\11\0\1\10\3\0\10\10"+
    "\1\u0105\31\10\11\0\1\10\3\0\14\10\1\u0106\25\10"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10763];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\1\1\3\11\16\1\2\11"+
    "\353\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();

    public List<ErrorAnalisis> getErrores(){
        return this.errores;
    }

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addLexicError();
            }
            // fall through
          case 39: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 40: break;
          case 3:
            { return symbol(EXCLAMATION_MARK);
            }
            // fall through
          case 41: break;
          case 4:
            { return symbol(QUOTE_MARK);
            }
            // fall through
          case 42: break;
          case 5:
            { return symbol(COMMA);
            }
            // fall through
          case 43: break;
          case 6:
            { return symbol(VALUE);
            }
            // fall through
          case 44: break;
          case 7:
            { return symbol(COLON);
            }
            // fall through
          case 45: break;
          case 8:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 46: break;
          case 9:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 47: break;
          case 10:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 48: break;
          case 11:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 49: break;
          case 12:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 50: break;
          case 13:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 51: break;
          case 14:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 52: break;
          case 15:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 53: break;
          case 16:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 54: break;
          case 17:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 55: break;
          case 18:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 56: break;
          case 19:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 57: break;
          case 20:
            { return symbol(CREATE_USER);
            }
            // fall through
          case 58: break;
          case 21:
            { return symbol(LOGIN);
            }
            // fall through
          case 59: break;
          case 22:
            { return symbol(PARAM_NEW_USER);
            }
            // fall through
          case 60: break;
          case 23:
            { return symbol(END_REQUEST);
            }
            // fall through
          case 61: break;
          case 24:
            { return symbol(START_REQUEST);
            }
            // fall through
          case 62: break;
          case 25:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 63: break;
          case 26:
            { return symbol(PARAM_NEW_PASSWORD);
            }
            // fall through
          case 64: break;
          case 27:
            { return symbol(PARAM_OLD_USER);
            }
            // fall through
          case 65: break;
          case 28:
            { return symbol(END_REQUESTS);
            }
            // fall through
          case 66: break;
          case 29:
            { return symbol(START_REQUESTS);
            }
            // fall through
          case 67: break;
          case 30:
            { return symbol(DELETE_USER);
            }
            // fall through
          case 68: break;
          case 31:
            { return symbol(NEW_FORM);
            }
            // fall through
          case 69: break;
          case 32:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 70: break;
          case 33:
            { return symbol(MODIFY_USER);
            }
            // fall through
          case 71: break;
          case 34:
            { return symbol(PARAM_FECHA_MODIFICACION);
            }
            // fall through
          case 72: break;
          case 35:
            { return symbol(DELETE_FORM);
            }
            // fall through
          case 73: break;
          case 36:
            { return symbol(USER_CREDENTIALS);
            }
            // fall through
          case 74: break;
          case 37:
            { return symbol(MODIFY_FORM);
            }
            // fall through
          case 75: break;
          case 38:
            { return symbol(FORM_PARAMS);
            }
            // fall through
          case 76: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
