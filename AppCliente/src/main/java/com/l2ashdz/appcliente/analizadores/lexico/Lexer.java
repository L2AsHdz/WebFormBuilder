// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.l2ashdz.appcliente.analizadores.lexico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

import static com.l2ashdz.appcliente.analizadores.sintactico.sym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\6\2\0"+
    "\12\10\1\11\1\0\1\12\1\0\1\13\2\0\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\10"+
    "\1\44\1\45\1\46\1\47\1\0\1\50\1\0\2\10"+
    "\1\51\1\52\1\53\1\54\2\10\1\55\2\10\1\56"+
    "\1\10\1\57\1\60\2\10\1\61\1\62\1\63\1\64"+
    "\5\10\1\65\1\0\1\66\u0182\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\2\1\1\13\1\14\1\15"+
    "\1\16\1\17\21\0\1\20\2\0\1\21\1\22\1\23"+
    "\1\24\63\0\1\25\66\0\1\26\42\0\1\27\10\0"+
    "\1\30\3\0\1\31\1\0\1\32\6\0\1\33\14\0"+
    "\1\34\12\0\1\35\12\0\1\36\1\37\5\0\1\40"+
    "\10\0\1\41\13\0\1\42\3\0\1\43\16\0\1\44"+
    "\7\0\1\45\1\46\15\0\1\47\1\0\1\50\23\0"+
    "\1\51\7\0\1\52\7\0\1\53\1\54\10\0\1\55"+
    "\1\56\17\0\1\57\24\0\1\60\1\61\14\0\1\62"+
    "\13\0\1\63\6\0\1\64\7\0\1\65\2\0\1\66"+
    "\1\67\1\70\5\0\1\71\5\0\1\72\20\0\1\73"+
    "\5\0\1\74\4\0\1\75\2\0\1\76\7\0\1\77"+
    "\2\0\1\100\3\0\1\101\5\0\1\102\1\103\4\0"+
    "\1\104\1\105\1\106\2\0\1\107\1\110";

  private static int [] zzUnpackAction() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\156\0\245\0\156\0\334\0\u0113"+
    "\0\156\0\156\0\156\0\156\0\156\0\156\0\u014a\0\u0181"+
    "\0\156\0\156\0\u01b8\0\156\0\u01ef\0\334\0\u0226\0\u025d"+
    "\0\u0294\0\u02cb\0\u0302\0\u0339\0\u0370\0\u03a7\0\u03de\0\u0415"+
    "\0\u044c\0\u0483\0\u04ba\0\u04f1\0\u0528\0\u055f\0\u0113\0\u0596"+
    "\0\u05cd\0\156\0\156\0\156\0\156\0\u0604\0\u063b\0\u0672"+
    "\0\u06a9\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a"+
    "\0\u0861\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2"+
    "\0\u0a19\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52"+
    "\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0e9c\0\u0ed3\0\u0f0a"+
    "\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u1054\0\u108b\0\u10c2"+
    "\0\156\0\u10f9\0\u1130\0\u1167\0\u119e\0\u11d5\0\u120c\0\u1243"+
    "\0\u127a\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u13fb"+
    "\0\u1432\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3"+
    "\0\u15ea\0\u1621\0\u1658\0\u168f\0\u16c6\0\u16fd\0\u1734\0\u176b"+
    "\0\u17a2\0\u17d9\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923"+
    "\0\u195a\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d\0\u1aa4\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\156"+
    "\0\u1c93\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14"+
    "\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc"+
    "\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184"+
    "\0\u21bb\0\u21f2\0\u2229\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c"+
    "\0\u2373\0\u23aa\0\156\0\u23e1\0\u2418\0\u244f\0\u2486\0\u24bd"+
    "\0\u24f4\0\u252b\0\u2562\0\156\0\u2599\0\u25d0\0\u2607\0\156"+
    "\0\u263e\0\156\0\u2675\0\u26ac\0\u26e3\0\u271a\0\u2751\0\u2788"+
    "\0\156\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909"+
    "\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\156\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\156\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\156\0\156\0\u2e9f\0\u2ed6\0\u2f0d"+
    "\0\u2f44\0\u2f7b\0\156\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e"+
    "\0\u30c5\0\u30fc\0\u3133\0\156\0\u316a\0\u31a1\0\u31d8\0\u320f"+
    "\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u3359\0\u3390\0\156"+
    "\0\u33c7\0\u33fe\0\u3435\0\156\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\156\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a"+
    "\0\u3881\0\u38b8\0\156\0\156\0\u38ef\0\u3926\0\u395d\0\u3994"+
    "\0\u39cb\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c"+
    "\0\u3b83\0\156\0\u3bba\0\156\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96"+
    "\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e"+
    "\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\156"+
    "\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2\0\u4119\0\u4150\0\156"+
    "\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a\0\u42d1\0\156"+
    "\0\156\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    "\0\u4489\0\156\0\156\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c"+
    "\0\u45d3\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754"+
    "\0\u478b\0\u47c2\0\156\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5"+
    "\0\u490c\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d"+
    "\0\u4ac4\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45"+
    "\0\u4c7c\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd"+
    "\0\u4e34\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\156\0\u4f47\0\u4f7e"+
    "\0\u4fb5\0\u4fec\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136"+
    "\0\u516d\0\156\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7"+
    "\0\156\0\u52ee\0\u5325\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438"+
    "\0\156\0\u546f\0\u54a6\0\156\0\156\0\156\0\u54dd\0\u5514"+
    "\0\u554b\0\u5582\0\u55b9\0\156\0\u55f0\0\u5627\0\u565e\0\u5695"+
    "\0\u56cc\0\156\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816"+
    "\0\u584d\0\u5884\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce"+
    "\0\u5a05\0\u5a3c\0\156\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f"+
    "\0\156\0\u5b86\0\u5bbd\0\u5bf4\0\u5c2b\0\156\0\u5c62\0\u5c99"+
    "\0\156\0\u5cd0\0\u5d07\0\u5d3e\0\u5d75\0\u5dac\0\u5de3\0\u5e1a"+
    "\0\156\0\u5e51\0\u5e88\0\156\0\u5ebf\0\u5ef6\0\u5f2d\0\156"+
    "\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\u6040\0\156\0\156\0\u6077"+
    "\0\u60ae\0\u60e5\0\u611c\0\156\0\156\0\156\0\u6153\0\u618a"+
    "\0\156\0\156";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\10\1\11\1\3"+
    "\1\12\1\13\1\14\31\3\1\15\1\3\1\16\1\10"+
    "\3\3\1\17\1\20\7\3\1\21\1\22\2\23\2\3"+
    "\1\23\1\24\40\23\1\25\20\23\71\0\1\4\65\0"+
    "\3\26\10\0\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\2\0\1\35\1\36\1\0\1\37\1\40\1\41\1\42"+
    "\1\43\1\0\1\44\1\0\1\45\1\46\34\0\1\47"+
    "\1\0\1\47\3\0\31\47\3\0\15\47\57\0\1\50"+
    "\70\0\1\51\7\0\2\23\2\0\1\23\1\0\40\23"+
    "\1\0\20\23\5\0\1\52\51\0\1\53\1\0\1\54"+
    "\1\0\1\55\25\0\1\56\4\0\1\57\5\0\1\60"+
    "\63\0\1\61\50\0\1\62\3\0\1\63\2\0\1\64"+
    "\3\0\1\65\2\0\1\66\2\0\1\67\51\0\1\70"+
    "\75\0\1\71\57\0\1\72\3\0\1\73\5\0\1\74"+
    "\53\0\1\75\10\0\1\76\1\77\12\0\1\100\62\0"+
    "\1\101\60\0\1\102\66\0\1\103\66\0\1\104\5\0"+
    "\1\105\61\0\1\106\47\0\1\107\66\0\1\110\3\0"+
    "\1\111\66\0\1\112\3\0\1\113\77\0\1\114\1\115"+
    "\107\0\1\116\64\0\1\117\46\0\1\120\55\0\1\121"+
    "\62\0\1\122\105\0\1\123\57\0\1\124\67\0\1\125"+
    "\55\0\1\126\62\0\1\127\101\0\1\130\1\131\56\0"+
    "\1\132\103\0\1\133\55\0\1\134\60\0\1\135\66\0"+
    "\1\136\10\0\1\137\74\0\1\140\32\0\3\75\1\0"+
    "\1\141\75\0\1\142\71\0\1\143\103\0\1\144\70\0"+
    "\1\145\52\0\1\146\63\0\1\147\77\0\1\150\56\0"+
    "\1\151\64\0\1\152\105\0\1\153\1\154\47\0\1\155"+
    "\103\0\1\156\62\0\1\157\12\0\1\160\62\0\1\161"+
    "\56\0\1\162\77\0\1\163\76\0\1\164\66\0\1\165"+
    "\36\0\1\166\77\0\1\167\51\0\1\170\104\0\1\171"+
    "\67\0\1\172\72\0\1\173\45\0\1\174\106\0\1\175"+
    "\70\0\1\176\43\0\1\177\65\0\1\200\2\0\1\201"+
    "\67\0\1\202\76\0\1\203\61\0\1\204\66\0\1\205"+
    "\57\0\1\206\102\0\1\207\60\0\1\210\70\0\1\211"+
    "\102\0\1\212\65\0\1\213\53\0\1\214\66\0\1\215"+
    "\57\0\1\216\112\0\1\217\51\0\1\220\56\0\1\221"+
    "\110\0\1\222\54\0\1\223\102\0\1\224\42\0\1\225"+
    "\111\0\1\226\67\0\1\227\27\0\3\162\1\0\1\230"+
    "\75\0\1\231\134\0\1\232\66\0\1\233\26\0\1\234"+
    "\64\0\1\235\116\0\1\236\47\0\1\237\67\0\1\240"+
    "\71\0\1\241\57\0\1\242\60\0\1\243\76\0\1\244"+
    "\70\0\1\245\71\0\1\246\51\0\1\247\64\0\1\250"+
    "\74\0\1\251\56\0\1\252\72\0\1\253\104\0\1\254"+
    "\70\0\1\255\46\0\1\256\64\0\1\257\74\0\1\260"+
    "\66\0\1\261\73\0\1\262\56\0\1\263\102\0\1\264"+
    "\63\0\1\265\66\0\1\266\64\0\1\267\100\0\1\270"+
    "\56\0\1\271\54\0\1\272\47\0\3\225\1\0\1\273"+
    "\113\0\1\274\63\0\1\275\74\0\1\276\111\0\1\277"+
    "\66\0\1\300\22\0\1\301\66\0\1\302\111\0\1\303"+
    "\30\0\3\237\1\0\1\304\131\0\1\305\50\0\1\306"+
    "\51\0\1\307\52\0\3\243\1\0\1\310\112\0\1\311"+
    "\36\0\3\245\1\0\1\312\131\0\1\313\47\0\1\314"+
    "\60\0\1\315\74\0\1\316\105\0\1\317\53\0\1\320"+
    "\32\0\3\254\1\0\1\321\110\0\1\322\70\0\1\323"+
    "\55\0\1\324\66\0\1\325\67\0\1\326\115\0\1\327"+
    "\42\0\1\330\62\0\1\331\116\0\1\332\47\0\1\333"+
    "\55\0\1\334\100\0\1\335\35\0\3\271\1\0\1\336"+
    "\116\0\1\337\101\0\1\340\50\0\1\341\60\0\1\342"+
    "\120\0\1\343\66\0\1\344\45\0\1\345\47\0\1\346"+
    "\70\0\1\347\105\0\1\350\30\0\3\306\1\0\1\351"+
    "\113\0\1\352\50\0\1\353\112\0\1\354\44\0\1\355"+
    "\64\0\1\356\66\0\1\357\70\0\1\360\11\0\1\361"+
    "\70\0\1\362\50\0\1\363\53\0\3\323\1\0\1\364"+
    "\62\0\3\324\1\0\1\365\116\0\1\366\55\0\1\367"+
    "\102\0\1\370\44\0\1\371\51\0\3\372\1\0\1\373"+
    "\42\0\1\374\37\0\1\375\11\0\1\376\53\0\1\377"+
    "\105\0\1\u0100\64\0\1\u0101\55\0\1\u0102\103\0\1\u0103"+
    "\26\0\3\341\1\0\1\u0104\113\0\1\u0105\111\0\1\u0106"+
    "\66\0\1\u0107\61\0\1\u0108\42\0\1\u0109\105\0\1\u010a"+
    "\43\0\1\u010b\111\0\1\u010c\61\0\1\u010d\66\0\1\u010e"+
    "\54\0\1\u010f\43\0\3\356\1\0\1\u0110\116\0\1\u0111"+
    "\66\0\1\u0112\63\0\1\u0113\35\0\3\362\1\0\1\u0114"+
    "\116\0\1\u0115\50\0\1\u0116\65\0\1\u0117\106\0\1\u0118"+
    "\44\0\1\u0119\53\0\3\372\1\0\1\373\77\0\1\u011a"+
    "\102\0\1\u011b\50\0\1\u011c\110\0\1\u011d\65\0\1\u011e"+
    "\50\0\1\u011f\66\0\1\u0120\73\0\1\u0121\43\0\3\u0122"+
    "\1\0\1\u0123\42\0\1\u0124\67\0\1\u0125\66\0\1\u0126"+
    "\33\0\1\u0127\102\0\1\u0128\73\0\1\u0129\72\0\1\u012a"+
    "\24\0\3\u010c\1\0\1\u012b\62\0\3\u010d\1\0\1\u012c"+
    "\121\0\1\u012d\42\0\1\u012e\122\0\1\u012f\36\0\1\u0130"+
    "\65\0\1\u0131\73\0\1\u0132\56\0\1\u0133\66\0\1\u0134"+
    "\112\0\1\u0135\63\0\1\u0136\45\0\1\u0137\107\0\1\u0138"+
    "\67\0\1\u0139\31\0\3\u011d\1\0\1\u013a\113\0\1\u013b"+
    "\35\0\3\u011f\1\0\1\u013c\113\0\1\u013d\72\0\1\u013e"+
    "\31\0\3\u0122\1\0\1\u0123\75\0\1\u013f\1\0\1\u0140"+
    "\12\0\1\u0141\112\0\1\u0142\66\0\1\u0143\43\0\1\u0144"+
    "\65\0\1\u0145\67\0\1\u0146\73\0\1\u0147\43\0\1\u0148"+
    "\101\0\1\u0149\55\0\1\u014a\2\0\1\u014b\16\0\1\u014c"+
    "\42\0\1\u014d\76\0\1\u014e\74\0\1\u014f\35\0\3\u0133"+
    "\1\0\1\u0150\116\0\1\u0151\45\0\1\u0152\122\0\1\u0153"+
    "\46\0\1\u0154\66\0\1\u0155\74\0\1\u0156\66\0\1\u0157"+
    "\31\0\3\u013d\1\0\1\u0158\105\0\1\u0159\73\0\1\u015a"+
    "\72\0\1\u015b\71\0\1\u015c\111\0\1\u015d\66\0\1\u015e"+
    "\33\0\1\u015f\37\0\3\u0145\1\0\1\u0160\62\0\3\u0146"+
    "\1\0\1\u0161\113\0\1\u0162\71\0\1\u0163\51\0\1\u0164"+
    "\100\0\1\u0165\66\0\1\u0166\72\0\1\u0167\46\0\1\u0168"+
    "\71\0\1\u0169\46\0\3\u014f\1\0\1\u016a\62\0\3\u0151"+
    "\1\0\1\u016b\116\0\1\u016c\47\0\1\u016d\2\0\1\u016e"+
    "\16\0\1\u016f\61\0\1\u0170\73\0\1\u0171\70\0\1\u0172"+
    "\74\0\1\u0173\33\0\1\u0174\110\0\1\u0175\47\0\1\u0176"+
    "\66\0\1\u0177\132\0\1\u0178\66\0\1\u0179\35\0\1\u017a"+
    "\34\0\3\u0162\1\0\1\u017b\105\0\1\u017c\100\0\1\u017d"+
    "\60\0\1\u017e\73\0\1\u017f\71\0\1\u0180\52\0\1\u0181"+
    "\66\0\1\u0182\66\0\1\u0183\74\0\1\u0184\66\0\1\u0185"+
    "\72\0\1\u0186\62\0\1\u0187\63\0\1\u0188\71\0\1\u0189"+
    "\52\0\1\u018a\2\0\1\u018b\74\0\1\u018c\63\0\1\u018d"+
    "\56\0\1\u018e\113\0\1\u018f\77\0\1\u0190\66\0\1\u0191"+
    "\46\0\1\u0192\66\0\1\u0193\104\0\1\u0194\51\0\1\u0195"+
    "\63\0\1\u0196\52\0\1\u0197\104\0\1\u0198\52\0\1\u0199"+
    "\102\0\1\u019a\64\0\1\u019b\73\0\1\u019c\71\0\1\u019d"+
    "\27\0\3\u0187\1\0\1\u019e\75\0\1\u019f\107\0\1\u01a0"+
    "\63\0\1\u01a1\66\0\1\u01a2\54\0\1\u01a3\70\0\1\u01a4"+
    "\62\0\1\u01a5\102\0\1\u01a6\107\0\1\u01a7\66\0\1\u01a8"+
    "\44\0\1\u01a9\36\0\3\u0193\1\0\1\u01aa\121\0\1\u01ab"+
    "\60\0\1\u01ac\74\0\1\u01ad\63\0\1\u01ae\62\0\1\u01af"+
    "\51\0\1\u01b0\53\0\3\u019a\1\0\1\u01b1\114\0\1\u01b2"+
    "\63\0\1\u01b3\52\0\1\u01b4\107\0\1\u01b5\50\0\1\u01b6"+
    "\77\0\1\u01b7\73\0\1\u01b8\32\0\3\u01a3\1\0\1\u01b9"+
    "\121\0\1\u01ba\52\0\1\u01bb\43\0\3\u01a6\1\0\1\u01bc"+
    "\143\0\1\u01bd\66\0\1\u01be\24\0\1\u01bf\104\0\1\u01c0"+
    "\61\0\1\u01c1\64\0\1\u01c2\63\0\1\u01c3\43\0\3\u01af"+
    "\1\0\1\u01c4\77\0\1\u01c5\102\0\1\u01c6\74\0\1\u01c7"+
    "\63\0\1\u01c8\55\0\1\u01c9\43\0\3\u01b6\1\0\1\u01ca"+
    "\114\0\1\u01cb\63\0\1\u01cc\70\0\1\u01cd\66\0\1\u01ce"+
    "\65\0\1\u01cf\75\0\1\u01d0\46\0\1\u01d1\62\0\1\u01d2"+
    "\104\0\1\u01d3\60\0\1\u01d4\73\0\1\u01d5\64\0\1\u01d6"+
    "\63\0\1\u01d7\74\0\1\u01d8\66\0\1\u01d9\74\0\1\u01da"+
    "\27\0\3\u01cd\1\0\1\u01db\112\0\1\u01dc\74\0\1\u01dd"+
    "\43\0\1\u01de\103\0\1\u01df\72\0\1\u01e0\32\0\3\u01d3"+
    "\1\0\1\u01e1\113\0\1\u01e2\54\0\1\u01e3\62\0\1\u01e4"+
    "\104\0\1\u01e5\35\0\3\u01d8\1\0\1\u01e6\112\0\1\u01e7"+
    "\64\0\1\u01e8\40\0\3\u01dc\1\0\1\u01e9\101\0\1\u01ea"+
    "\103\0\1\u01eb\70\0\1\u01ec\53\0\1\u01ed\73\0\1\u01ee"+
    "\66\0\1\u01ef\72\0\1\u01f0\32\0\3\u01e5\1\0\1\u01f1"+
    "\101\0\1\u01f2\62\0\1\u01f3\53\0\3\u01ea\1\0\1\u01f4"+
    "\105\0\1\u01f5\62\0\1\u01f6\100\0\1\u01f7\35\0\3\u01ee"+
    "\1\0\1\u01f8\120\0\1\u01f9\53\0\1\u01fa\73\0\1\u01fb"+
    "\72\0\1\u01fc\63\0\1\u01fd\35\0\3\u01f6\1\0\1\u01fe"+
    "\62\0\3\u01f7\1\0\1\u01ff\101\0\1\u0200\100\0\1\u0201"+
    "\73\0\1\u0202\53\0\1\u0203\43\0\3\u01fd\1\0\1\u0204"+
    "\62\0\3\u0200\1\0\1\u0205\62\0\3\u0201\1\0\1\u0206"+
    "\101\0\1\u0207\100\0\1\u0208\35\0\3\u0207\1\0\1\u0209"+
    "\62\0\3\u0208\1\0\1\u020a\61\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[25025];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\2\1\6\11\2\1\2\11"+
    "\1\1\1\11\1\1\21\0\1\1\2\0\4\11\63\0"+
    "\1\11\66\0\1\11\42\0\1\11\10\0\1\11\3\0"+
    "\1\11\1\0\1\11\6\0\1\11\14\0\1\11\12\0"+
    "\1\11\12\0\2\11\5\0\1\11\10\0\1\11\13\0"+
    "\1\11\3\0\1\11\16\0\1\11\7\0\2\11\15\0"+
    "\1\11\1\0\1\11\23\0\1\11\7\0\1\11\7\0"+
    "\2\11\10\0\2\11\17\0\1\11\24\0\2\1\14\0"+
    "\1\11\13\0\1\11\6\0\1\11\7\0\1\11\2\0"+
    "\3\11\5\0\1\11\5\0\1\11\20\0\1\11\5\0"+
    "\1\11\4\0\1\11\2\0\1\11\7\0\1\11\2\0"+
    "\1\11\3\0\1\11\5\0\2\11\4\0\3\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[522];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();
    private StringBuffer string = new StringBuffer();

    public List<ErrorAnalisis> getErrores(){
        return this.errores;
    }

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }
    
    private Symbol symbol(int type, String lexema){
        return new Symbol(type, new Token(yyline, yycolumn, lexema);
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addLexicError();
            }
            // fall through
          case 73: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 74: break;
          case 3:
            { return symbol(EXCLAMATION_MARK);
            }
            // fall through
          case 75: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 76: break;
          case 5:
            { return symbol(COMMA);
            }
            // fall through
          case 77: break;
          case 6:
            { return symbol(COLON);
            }
            // fall through
          case 78: break;
          case 7:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 79: break;
          case 8:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 80: break;
          case 9:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 81: break;
          case 10:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 82: break;
          case 11:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 83: break;
          case 12:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 84: break;
          case 13:
            { string.append(yytext());
            }
            // fall through
          case 85: break;
          case 14:
            { yybegin(YYINITIAL);
                                        return symbol(VALUE, string.toString());
            }
            // fall through
          case 86: break;
          case 15:
            { string.append('\\');
            }
            // fall through
          case 87: break;
          case 16:
            { return symbol(IDENTIFICADOR);
            }
            // fall through
          case 88: break;
          case 17:
            { string.append('\"');
            }
            // fall through
          case 89: break;
          case 18:
            { string.append('\n');
            }
            // fall through
          case 90: break;
          case 19:
            { string.append('\r');
            }
            // fall through
          case 91: break;
          case 20:
            { string.append('\t');
            }
            // fall through
          case 92: break;
          case 21:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 93: break;
          case 22:
            { return symbol(PARAM_URL);
            }
            // fall through
          case 94: break;
          case 23:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 95: break;
          case 24:
            { return symbol(CLASS_BOTON);
            }
            // fall through
          case 96: break;
          case 25:
            { return symbol(PARAM_CLASE);
            }
            // fall through
          case 97: break;
          case 26:
            { return symbol(CLASS_COMBO);
            }
            // fall through
          case 98: break;
          case 27:
            { return symbol(PARAM_FILAS);
            }
            // fall through
          case 99: break;
          case 28:
            { return symbol(CLASS_RADIO);
            }
            // fall through
          case 100: break;
          case 29:
            { return symbol(CENTRO);
            }
            // fall through
          case 101: break;
          case 30:
            { return symbol(CLASS_IMAGEN);
            }
            // fall through
          case 102: break;
          case 31:
            { return symbol(PARAM_INDICE);
            }
            // fall through
          case 103: break;
          case 32:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 104: break;
          case 33:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 105: break;
          case 34:
            { return symbol(DERECHA);
            }
            // fall through
          case 106: break;
          case 35:
            { return symbol(CLASS_FICHERO);
            }
            // fall through
          case 107: break;
          case 36:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 108: break;
          case 37:
            { return symbol(CLASS_CHECKBOX);
            }
            // fall through
          case 109: break;
          case 38:
            { return symbol(PARAM_COLUMNAS);
            }
            // fall through
          case 110: break;
          case 39:
            { return symbol(PARAM_OPCIONES);
            }
            // fall through
          case 111: break;
          case 40:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 112: break;
          case 41:
            { return symbol(IZQUIERDA);
            }
            // fall through
          case 113: break;
          case 42:
            { return symbol(PARAM_REQUERIDO);
            }
            // fall through
          case 114: break;
          case 43:
            { return symbol(PARAM_ALINEACION);
            }
            // fall through
          case 115: break;
          case 44:
            { return symbol(CLASS_AREA_TEXTO);
            }
            // fall through
          case 116: break;
          case 45:
            { return symbol(PARAM_FORMULARIO);
            }
            // fall through
          case 117: break;
          case 46:
            { return symbol(JUSTIFICAR);
            }
            // fall through
          case 118: break;
          case 47:
            { return symbol(CLASS_CAMPO_TEXTO);
            }
            // fall through
          case 119: break;
          case 48:
            { return symbol(END_REQUEST);
            }
            // fall through
          case 120: break;
          case 49:
            { return symbol(START_REQUEST);
            }
            // fall through
          case 121: break;
          case 50:
            { return symbol(PARAM_NOMBRE_CAMPO);
            }
            // fall through
          case 122: break;
          case 51:
            { return symbol(CREATE_USER);
            }
            // fall through
          case 123: break;
          case 52:
            { return symbol(LOGIN);
            }
            // fall through
          case 124: break;
          case 53:
            { return symbol(PARAM_TEXTO_VISIBLE);
            }
            // fall through
          case 125: break;
          case 54:
            { return symbol(PARAM_NEW_USER);
            }
            // fall through
          case 126: break;
          case 55:
            { return symbol(END_REQUESTS);
            }
            // fall through
          case 127: break;
          case 56:
            { return symbol(START_REQUESTS);
            }
            // fall through
          case 128: break;
          case 57:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 129: break;
          case 58:
            { return symbol(PARAM_NEW_PASSWORD);
            }
            // fall through
          case 130: break;
          case 59:
            { return symbol(PARAM_OLD_USER);
            }
            // fall through
          case 131: break;
          case 60:
            { return symbol(DELETE_USER);
            }
            // fall through
          case 132: break;
          case 61:
            { return symbol(NEW_FORM);
            }
            // fall through
          case 133: break;
          case 62:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 134: break;
          case 63:
            { return symbol(MODIFY_USER);
            }
            // fall through
          case 135: break;
          case 64:
            { return symbol(NEW_COMPONENT);
            }
            // fall through
          case 136: break;
          case 65:
            { return symbol(PARAM_FECHA_MODIFICACION);
            }
            // fall through
          case 137: break;
          case 66:
            { return symbol(DELETE_COMPONENT);
            }
            // fall through
          case 138: break;
          case 67:
            { return symbol(DELETE_FORM);
            }
            // fall through
          case 139: break;
          case 68:
            { return symbol(USER_CREDENTIALS);
            }
            // fall through
          case 140: break;
          case 69:
            { return symbol(EDIT_COMPONENT);
            }
            // fall through
          case 141: break;
          case 70:
            { return symbol(MODIFY_FORM);
            }
            // fall through
          case 142: break;
          case 71:
            { return symbol(COMPONENT_PARAMS);
            }
            // fall through
          case 143: break;
          case 72:
            { return symbol(FORM_PARAMS);
            }
            // fall through
          case 144: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
