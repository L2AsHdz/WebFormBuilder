// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: lexer.flex

package com.l2ashdz.appcliente.analizadores.lexico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

import static com.l2ashdz.appcliente.analizadores.sintactico.sym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\0\1\6\7\0\1\7\1\10\2\0"+
    "\1\11\1\12\1\13\1\14\6\15\1\16\1\0\1\17"+
    "\1\0\1\20\2\0\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\0\1\56\1\0\2\51\1\57\1\60\1\61\1\62"+
    "\2\51\1\63\2\51\1\64\1\51\1\65\1\66\2\51"+
    "\1\67\1\70\1\71\1\72\5\51\1\73\1\0\1\74"+
    "\54\0\1\51\12\0\1\51\4\0\1\51\5\0\27\51"+
    "\1\0\37\51\1\0\u01ca\51\4\0\14\51\16\0\5\51"+
    "\7\0\1\51\1\0\1\51\21\0\165\51\1\0\2\51"+
    "\2\0\4\51\1\0\1\51\6\0\1\51\1\0\3\51"+
    "\1\0\1\51\1\0\24\51\1\0\123\51\1\0\213\51"+
    "\1\0\255\51\1\0\46\51\2\0\1\51\6\0\51\51"+
    "\10\0\55\51\1\0\1\51\1\0\2\51\1\0\2\51"+
    "\1\0\1\51\10\0\33\51\4\0\4\51\35\0\13\51"+
    "\5\0\100\51\12\75\4\0\146\51\1\0\10\51\2\0"+
    "\12\51\1\0\6\51\12\75\3\51\2\0\1\51\20\0"+
    "\73\51\2\0\145\51\16\0\12\75\54\51\4\0\1\51"+
    "\2\0\1\51\2\0\56\51\22\0\34\51\4\0\13\51"+
    "\65\0\25\51\1\0\10\51\25\0\17\51\1\0\201\51"+
    "\2\0\12\75\1\0\23\51\1\0\10\51\2\0\2\51"+
    "\2\0\26\51\1\0\7\51\1\0\1\51\3\0\4\51"+
    "\2\0\11\51\2\0\2\51\2\0\4\51\10\0\1\51"+
    "\4\0\2\51\1\0\5\51\2\0\12\75\2\51\12\0"+
    "\1\51\1\0\1\51\2\0\3\51\1\0\6\51\4\0"+
    "\2\51\2\0\26\51\1\0\7\51\1\0\2\51\1\0"+
    "\2\51\1\0\2\51\2\0\1\51\1\0\5\51\4\0"+
    "\2\51\2\0\3\51\3\0\1\51\7\0\4\51\1\0"+
    "\1\51\7\0\12\75\6\51\13\0\3\51\1\0\11\51"+
    "\1\0\3\51\1\0\26\51\1\0\7\51\1\0\2\51"+
    "\1\0\5\51\2\0\12\51\1\0\3\51\1\0\3\51"+
    "\2\0\1\51\17\0\4\51\2\0\12\75\11\0\7\51"+
    "\1\0\3\51\1\0\10\51\2\0\2\51\2\0\26\51"+
    "\1\0\7\51\1\0\2\51\1\0\5\51\2\0\11\51"+
    "\2\0\2\51\2\0\3\51\10\0\2\51\4\0\2\51"+
    "\1\0\5\51\2\0\12\75\1\0\1\51\20\0\2\51"+
    "\1\0\6\51\3\0\3\51\1\0\4\51\3\0\2\51"+
    "\1\0\1\51\1\0\2\51\3\0\2\51\3\0\3\51"+
    "\3\0\14\51\4\0\5\51\3\0\3\51\1\0\4\51"+
    "\2\0\1\51\6\0\1\51\16\0\12\75\20\0\15\51"+
    "\1\0\3\51\1\0\27\51\1\0\20\51\3\0\10\51"+
    "\1\0\3\51\1\0\4\51\7\0\2\51\1\0\3\51"+
    "\5\0\4\51\2\0\12\75\20\0\4\51\1\0\10\51"+
    "\1\0\3\51\1\0\27\51\1\0\12\51\1\0\5\51"+
    "\2\0\11\51\1\0\3\51\1\0\4\51\7\0\2\51"+
    "\7\0\1\51\1\0\4\51\2\0\12\75\1\0\2\51"+
    "\15\0\4\51\1\0\10\51\1\0\3\51\1\0\63\51"+
    "\1\0\3\51\1\0\5\51\5\0\4\51\7\0\5\51"+
    "\2\0\12\75\12\0\6\51\2\0\2\51\1\0\22\51"+
    "\3\0\30\51\1\0\11\51\1\0\1\51\2\0\7\51"+
    "\3\0\1\51\4\0\6\51\1\0\1\51\1\0\10\51"+
    "\6\0\12\75\2\0\2\51\15\0\72\51\5\0\17\51"+
    "\1\0\12\75\47\0\2\51\1\0\1\51\1\0\5\51"+
    "\1\0\30\51\1\0\1\51\1\0\27\51\2\0\5\51"+
    "\1\0\1\51\1\0\6\51\2\0\12\75\2\0\4\51"+
    "\40\0\1\51\27\0\2\51\6\0\12\75\13\0\1\51"+
    "\1\0\1\51\1\0\1\51\4\0\12\51\1\0\44\51"+
    "\4\0\24\51\1\0\22\51\1\0\44\51\11\0\1\51"+
    "\71\0\100\51\12\75\6\0\100\51\12\75\4\51\2\0"+
    "\46\51\1\0\1\51\5\0\1\51\2\0\53\51\1\0"+
    "\115\51\1\0\4\51\2\0\7\51\1\0\1\51\1\0"+
    "\4\51\2\0\51\51\1\0\4\51\2\0\41\51\1\0"+
    "\4\51\2\0\7\51\1\0\1\51\1\0\4\51\2\0"+
    "\17\51\1\0\71\51\1\0\4\51\2\0\103\51\2\0"+
    "\3\51\40\0\20\51\20\0\126\51\2\0\6\51\3\0"+
    "\u016c\51\2\0\21\51\1\0\32\51\5\0\113\51\3\0"+
    "\13\51\7\0\15\51\1\0\7\51\13\0\25\51\13\0"+
    "\24\51\14\0\15\51\1\0\3\51\1\0\2\51\14\0"+
    "\124\51\3\0\1\51\4\0\2\51\2\0\12\75\41\0"+
    "\3\51\2\0\12\75\6\0\131\51\7\0\53\51\5\0"+
    "\106\51\12\0\37\51\1\0\14\51\4\0\14\51\12\0"+
    "\12\75\36\51\2\0\5\51\13\0\54\51\4\0\32\51"+
    "\6\0\12\75\46\0\34\51\4\0\77\51\1\0\35\51"+
    "\2\0\1\51\12\75\6\0\12\75\15\0\1\51\10\0"+
    "\17\51\101\0\114\51\4\0\12\75\21\0\11\51\14\0"+
    "\60\51\12\75\72\51\14\0\70\51\10\0\12\75\3\0"+
    "\3\51\12\75\44\51\2\0\11\51\7\0\53\51\2\0"+
    "\3\51\20\0\3\51\1\0\47\51\5\0\372\51\1\0"+
    "\33\51\2\0\6\51\2\0\46\51\2\0\6\51\2\0"+
    "\10\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\37\51\2\0\65\51\1\0\7\51\1\0\1\51\3\0"+
    "\3\51\1\0\7\51\3\0\4\51\2\0\6\51\4\0"+
    "\15\51\5\0\3\51\1\0\7\51\102\0\2\51\23\0"+
    "\1\51\34\0\1\51\15\0\1\51\20\0\15\51\63\0"+
    "\41\51\21\0\1\51\4\0\1\51\2\0\12\51\1\0"+
    "\1\51\3\0\5\51\6\0\1\51\1\0\1\51\1\0"+
    "\1\51\1\0\4\51\1\0\13\51\2\0\4\51\5\0"+
    "\5\51\4\0\1\51\21\0\51\51\u022d\0\64\51\26\0"+
    "\57\51\1\0\57\51\1\0\205\51\6\0\11\51\14\0"+
    "\46\51\1\0\1\51\5\0\1\51\2\0\70\51\7\0"+
    "\1\51\17\0\30\51\11\0\7\51\1\0\7\51\1\0"+
    "\7\51\1\0\7\51\1\0\7\51\1\0\7\51\1\0"+
    "\7\51\1\0\7\51\1\0\40\51\57\0\1\51\325\0"+
    "\3\51\31\0\17\51\1\0\5\51\2\0\5\51\4\0"+
    "\126\51\2\0\2\51\2\0\3\51\1\0\132\51\1\0"+
    "\4\51\5\0\53\51\1\0\136\51\21\0\33\51\65\0"+
    "\306\51\112\0\360\51\20\0\215\51\103\0\56\51\2\0"+
    "\15\51\3\0\20\51\12\75\2\51\24\0\63\51\1\0"+
    "\12\51\1\0\163\51\45\0\11\51\2\0\147\51\2\0"+
    "\65\51\2\0\5\51\60\0\61\51\30\0\64\51\14\0"+
    "\106\51\12\0\12\75\6\0\30\51\3\0\1\51\1\0"+
    "\3\51\12\75\44\51\2\0\44\51\14\0\35\51\3\0"+
    "\101\51\16\0\1\51\12\75\6\0\20\51\12\75\5\51"+
    "\1\0\67\51\11\0\16\51\2\0\12\75\6\0\27\51"+
    "\3\0\111\51\30\0\3\51\2\0\20\51\2\0\5\51"+
    "\12\0\6\51\2\0\6\51\2\0\6\51\11\0\7\51"+
    "\1\0\7\51\1\0\53\51\1\0\14\51\10\0\173\51"+
    "\1\0\2\51\2\0\12\75\6\0\244\51\14\0\27\51"+
    "\4\0\61\51\4\0\156\51\2\0\152\51\46\0\7\51"+
    "\14\0\5\51\5\0\14\51\1\0\15\51\1\0\5\51"+
    "\1\0\1\51\1\0\2\51\1\0\2\51\1\0\154\51"+
    "\41\0\153\51\22\0\100\51\2\0\66\51\50\0\14\51"+
    "\4\0\20\51\20\0\20\51\3\0\2\51\30\0\3\51"+
    "\40\0\5\51\1\0\207\51\23\0\12\75\7\0\32\51"+
    "\4\0\1\51\1\0\32\51\13\0\131\51\3\0\6\51"+
    "\2\0\6\51\2\0\6\51\2\0\3\51\43\0\14\51"+
    "\1\0\32\51\1\0\23\51\1\0\2\51\1\0\17\51"+
    "\2\0\16\51\42\0\173\51\105\0\65\51\210\0\1\51"+
    "\202\0\35\51\3\0\61\51\17\0\1\51\37\0\40\51"+
    "\15\0\36\51\5\0\53\51\5\0\36\51\2\0\44\51"+
    "\4\0\10\51\1\0\5\51\52\0\236\51\2\0\12\75"+
    "\6\0\44\51\4\0\44\51\4\0\50\51\10\0\64\51"+
    "\234\0\67\51\11\0\26\51\12\0\10\51\230\0\6\51"+
    "\2\0\1\51\1\0\54\51\1\0\2\51\3\0\1\51"+
    "\2\0\27\51\12\0\27\51\11\0\37\51\101\0\23\51"+
    "\1\0\2\51\12\0\26\51\12\0\32\51\106\0\70\51"+
    "\6\0\2\51\100\0\4\51\1\0\2\51\5\0\10\51"+
    "\1\0\3\51\1\0\35\51\2\0\3\51\4\0\1\51"+
    "\40\0\35\51\3\0\35\51\43\0\10\51\1\0\36\51"+
    "\31\0\66\51\12\0\26\51\12\0\23\51\15\0\22\51"+
    "\156\0\111\51\67\0\63\51\15\0\63\51\15\0\50\51"+
    "\10\0\12\75\306\0\35\51\12\0\1\51\10\0\41\51"+
    "\217\0\27\51\11\0\107\51\37\0\12\75\17\0\74\51"+
    "\25\0\31\51\7\0\12\75\6\0\65\51\1\0\12\75"+
    "\4\0\3\51\11\0\44\51\2\0\1\51\11\0\105\51"+
    "\4\0\4\51\3\0\12\75\1\51\1\0\1\51\43\0"+
    "\22\51\1\0\45\51\6\0\1\51\101\0\7\51\1\0"+
    "\1\51\1\0\4\51\1\0\17\51\1\0\12\51\7\0"+
    "\73\51\5\0\12\75\6\0\4\51\1\0\10\51\2\0"+
    "\2\51\2\0\26\51\1\0\7\51\1\0\2\51\1\0"+
    "\5\51\1\0\12\51\2\0\2\51\2\0\3\51\2\0"+
    "\1\51\6\0\1\51\5\0\7\51\2\0\7\51\3\0"+
    "\5\51\213\0\113\51\5\0\12\75\4\0\2\51\40\0"+
    "\106\51\1\0\1\51\10\0\12\75\246\0\66\51\2\0"+
    "\11\51\27\0\6\51\42\0\101\51\3\0\1\51\13\0"+
    "\12\75\46\0\71\51\7\0\12\75\66\0\33\51\2\0"+
    "\17\51\4\0\12\75\306\0\73\51\145\0\100\51\12\75"+
    "\25\0\1\51\240\0\10\51\2\0\56\51\2\0\10\51"+
    "\1\0\2\51\33\0\77\51\10\0\1\51\10\0\112\51"+
    "\3\0\1\51\42\0\71\51\7\0\11\51\1\0\55\51"+
    "\1\0\11\51\17\0\12\75\30\0\36\51\2\0\26\51"+
    "\1\0\16\51\111\0\7\51\1\0\2\51\1\0\54\51"+
    "\3\0\1\51\1\0\2\51\1\0\11\51\10\0\12\75"+
    "\6\0\6\51\1\0\2\51\1\0\45\51\1\0\2\51"+
    "\1\0\6\51\7\0\12\75\u0136\0\27\51\11\0\232\51"+
    "\146\0\157\51\21\0\304\51\274\0\57\51\321\0\107\51"+
    "\271\0\71\51\7\0\37\51\1\0\12\75\146\0\36\51"+
    "\2\0\5\51\13\0\67\51\11\0\4\51\14\0\12\75"+
    "\11\0\25\51\5\0\23\51\260\0\100\51\200\0\113\51"+
    "\4\0\71\51\7\0\21\51\100\0\2\51\1\0\1\51"+
    "\34\0\370\51\10\0\363\51\15\0\37\51\61\0\3\51"+
    "\21\0\4\51\10\0\u018c\51\4\0\153\51\5\0\15\51"+
    "\3\0\11\51\7\0\12\51\3\0\2\51\306\0\5\51"+
    "\3\0\6\51\10\0\10\51\2\0\7\51\36\0\4\51"+
    "\224\0\3\51\273\0\125\51\1\0\107\51\1\0\2\51"+
    "\2\0\1\51\2\0\2\51\2\0\4\51\1\0\14\51"+
    "\1\0\1\51\1\0\7\51\1\0\101\51\1\0\4\51"+
    "\2\0\10\51\1\0\7\51\1\0\34\51\1\0\4\51"+
    "\1\0\5\51\1\0\1\51\3\0\7\51\1\0\u0154\51"+
    "\2\0\31\51\1\0\31\51\1\0\37\51\1\0\31\51"+
    "\1\0\37\51\1\0\31\51\1\0\37\51\1\0\31\51"+
    "\1\0\37\51\1\0\31\51\1\0\10\51\2\0\62\75"+
    "\67\51\4\0\62\51\10\0\1\51\16\0\1\51\26\0"+
    "\5\51\1\0\17\51\120\0\7\51\1\0\21\51\2\0"+
    "\7\51\1\0\2\51\1\0\5\51\325\0\55\51\3\0"+
    "\16\51\2\0\12\75\4\0\1\51\u0171\0\60\51\12\75"+
    "\6\0\305\51\13\0\7\51\51\0\114\51\4\0\12\75"+
    "\246\0\4\51\1\0\33\51\1\0\2\51\1\0\1\51"+
    "\2\0\1\51\1\0\12\51\1\0\4\51\1\0\1\51"+
    "\1\0\1\51\6\0\1\51\4\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\3\51\1\0\2\51\1\0\1\51"+
    "\2\0\1\51\1\0\1\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\2\51\1\0\1\51\2\0\4\51"+
    "\1\0\7\51\1\0\4\51\1\0\4\51\1\0\1\51"+
    "\1\0\12\51\1\0\21\51\5\0\3\51\1\0\5\51"+
    "\1\0\21\51\164\0\32\51\6\0\32\51\6\0\32\51"+
    "\166\0\327\51\51\0\65\51\13\0\336\51\2\0\u0182\51"+
    "\16\0\u0131\51\37\0\36\51\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\2\1\1\13\1\14\1\15\1\16"+
    "\1\17\25\0\1\20\1\21\1\22\1\23\1\24\65\0"+
    "\1\25\67\0\1\26\43\0\1\27\13\0\1\30\3\0"+
    "\1\31\1\0\1\32\6\0\1\33\14\0\1\34\13\0"+
    "\1\35\12\0\1\36\1\37\5\0\1\40\10\0\1\41"+
    "\17\0\1\42\3\0\1\43\16\0\1\44\3\0\1\45"+
    "\4\0\1\46\1\47\15\0\1\50\1\0\1\51\23\0"+
    "\1\52\7\0\1\53\7\0\1\54\1\55\10\0\1\56"+
    "\1\57\17\0\1\60\24\0\1\61\1\62\14\0\1\63"+
    "\13\0\1\64\6\0\1\65\7\0\1\66\2\0\1\67"+
    "\1\70\1\71\5\0\1\72\5\0\1\73\20\0\1\74"+
    "\5\0\1\75\4\0\1\76\2\0\1\77\7\0\1\100"+
    "\2\0\1\101\3\0\1\102\5\0\1\103\1\104\4\0"+
    "\1\105\1\106\1\107\2\0\1\110\1\111";

  private static int [] zzUnpackAction() {
    int [] result = new int[536];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\174\0\272\0\174\0\370\0\174"+
    "\0\174\0\174\0\174\0\174\0\174\0\u0136\0\u0174\0\174"+
    "\0\174\0\u01b2\0\174\0\u01f0\0\u022e\0\u026c\0\u02aa\0\u02e8"+
    "\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a\0\u04d8"+
    "\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\u068a\0\u06c8"+
    "\0\u0706\0\174\0\174\0\174\0\174\0\174\0\u0744\0\u0782"+
    "\0\u07c0\0\u07fe\0\u083c\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972"+
    "\0\u09b0\0\u09ee\0\u0a2c\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62"+
    "\0\u0ba0\0\u0bde\0\u0c1c\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\u0d52"+
    "\0\u0d90\0\u0dce\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42"+
    "\0\u0f80\0\u0fbe\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132"+
    "\0\u1170\0\u11ae\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322"+
    "\0\u1360\0\u139e\0\u13dc\0\174\0\u141a\0\u1458\0\u1496\0\u14d4"+
    "\0\u1512\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4"+
    "\0\u1702\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4"+
    "\0\u18f2\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4"+
    "\0\u1ae2\0\u1b20\0\u1b5e\0\u1b9c\0\u1bda\0\u1c18\0\u1c56\0\u1c94"+
    "\0\u1cd2\0\u1d10\0\u1d4e\0\u1d8c\0\u1dca\0\u1e08\0\u1e46\0\u1e84"+
    "\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba\0\u1ff8\0\u2036\0\u2074"+
    "\0\u20b2\0\u20f0\0\u212e\0\174\0\u216c\0\u21aa\0\u21e8\0\u2226"+
    "\0\u2264\0\u22a2\0\u22e0\0\u231e\0\u235c\0\u239a\0\u23d8\0\u2416"+
    "\0\u2454\0\u2492\0\u24d0\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606"+
    "\0\u2644\0\u2682\0\u26c0\0\u26fe\0\u273c\0\u277a\0\u27b8\0\u27f6"+
    "\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\u29a8\0\174"+
    "\0\u29e6\0\u2a24\0\u2a62\0\u2aa0\0\u2ade\0\u2b1c\0\u2b5a\0\u2b98"+
    "\0\u2bd6\0\u2c14\0\u2c52\0\174\0\u2c90\0\u2cce\0\u2d0c\0\174"+
    "\0\u2d4a\0\174\0\u2d88\0\u2dc6\0\u2e04\0\u2e42\0\u2e80\0\u2ebe"+
    "\0\174\0\u2efc\0\u2f3a\0\u2f78\0\u2fb6\0\u2ff4\0\u3032\0\u3070"+
    "\0\u30ae\0\u30ec\0\u312a\0\u3168\0\u31a6\0\174\0\u31e4\0\u3222"+
    "\0\u3260\0\u329e\0\u32dc\0\u331a\0\u3358\0\u3396\0\u33d4\0\u3412"+
    "\0\u3450\0\174\0\u348e\0\u34cc\0\u350a\0\u3548\0\u3586\0\u35c4"+
    "\0\u3602\0\u3640\0\u367e\0\u36bc\0\174\0\174\0\u36fa\0\u3738"+
    "\0\u3776\0\u37b4\0\u37f2\0\174\0\u3830\0\u386e\0\u38ac\0\u38ea"+
    "\0\u3928\0\u3966\0\u39a4\0\u39e2\0\174\0\u3a20\0\u3a5e\0\u3a9c"+
    "\0\u3ada\0\u3b18\0\u3b56\0\u3b94\0\u3bd2\0\u3c10\0\u3c4e\0\u3c8c"+
    "\0\u3cca\0\u3d08\0\u3d46\0\u3d84\0\174\0\u3dc2\0\u3e00\0\u3e3e"+
    "\0\174\0\u3e7c\0\u3eba\0\u3ef8\0\u3f36\0\u3f74\0\u3fb2\0\u3ff0"+
    "\0\u402e\0\u406c\0\u40aa\0\u40e8\0\u4126\0\u4164\0\u41a2\0\174"+
    "\0\u41e0\0\u421e\0\u425c\0\174\0\u429a\0\u42d8\0\u4316\0\u4354"+
    "\0\174\0\174\0\u4392\0\u43d0\0\u440e\0\u444c\0\u448a\0\u44c8"+
    "\0\u4506\0\u4544\0\u4582\0\u45c0\0\u45fe\0\u463c\0\u467a\0\174"+
    "\0\u46b8\0\174\0\u46f6\0\u4734\0\u4772\0\u47b0\0\u47ee\0\u482c"+
    "\0\u486a\0\u48a8\0\u48e6\0\u4924\0\u4962\0\u49a0\0\u49de\0\u4a1c"+
    "\0\u4a5a\0\u4a98\0\u4ad6\0\u4b14\0\u4b52\0\174\0\u4b90\0\u4bce"+
    "\0\u4c0c\0\u4c4a\0\u4c88\0\u4cc6\0\u4d04\0\174\0\u4d42\0\u4d80"+
    "\0\u4dbe\0\u4dfc\0\u4e3a\0\u4e78\0\u4eb6\0\174\0\174\0\u4ef4"+
    "\0\u4f32\0\u4f70\0\u4fae\0\u4fec\0\u502a\0\u5068\0\u50a6\0\174"+
    "\0\174\0\u50e4\0\u5122\0\u5160\0\u519e\0\u51dc\0\u521a\0\u5258"+
    "\0\u5296\0\u52d4\0\u5312\0\u5350\0\u538e\0\u53cc\0\u540a\0\u5448"+
    "\0\174\0\u5486\0\u54c4\0\u5502\0\u5540\0\u557e\0\u55bc\0\u55fa"+
    "\0\u5638\0\u5676\0\u56b4\0\u56f2\0\u5730\0\u576e\0\u57ac\0\u57ea"+
    "\0\u5828\0\u5866\0\u58a4\0\u58e2\0\u5920\0\u595e\0\u599c\0\u59da"+
    "\0\u5a18\0\u5a56\0\u5a94\0\u5ad2\0\u5b10\0\u5b4e\0\u5b8c\0\u5bca"+
    "\0\u5c08\0\u5c46\0\u5c84\0\174\0\u5cc2\0\u5d00\0\u5d3e\0\u5d7c"+
    "\0\u5dba\0\u5df8\0\u5e36\0\u5e74\0\u5eb2\0\u5ef0\0\u5f2e\0\174"+
    "\0\u5f6c\0\u5faa\0\u5fe8\0\u6026\0\u6064\0\u60a2\0\174\0\u60e0"+
    "\0\u611e\0\u615c\0\u619a\0\u61d8\0\u6216\0\u6254\0\174\0\u6292"+
    "\0\u62d0\0\174\0\174\0\174\0\u630e\0\u634c\0\u638a\0\u63c8"+
    "\0\u6406\0\174\0\u6444\0\u6482\0\u64c0\0\u64fe\0\u653c\0\174"+
    "\0\u657a\0\u65b8\0\u65f6\0\u6634\0\u6672\0\u66b0\0\u66ee\0\u672c"+
    "\0\u676a\0\u67a8\0\u67e6\0\u6824\0\u6862\0\u68a0\0\u68de\0\u691c"+
    "\0\174\0\u695a\0\u6998\0\u69d6\0\u6a14\0\u6a52\0\174\0\u6a90"+
    "\0\u6ace\0\u6b0c\0\u6b4a\0\174\0\u6b88\0\u6bc6\0\174\0\u6c04"+
    "\0\u6c42\0\u6c80\0\u6cbe\0\u6cfc\0\u6d3a\0\u6d78\0\174\0\u6db6"+
    "\0\u6df4\0\174\0\u6e32\0\u6e70\0\u6eae\0\174\0\u6eec\0\u6f2a"+
    "\0\u6f68\0\u6fa6\0\u6fe4\0\174\0\174\0\u7022\0\u7060\0\u709e"+
    "\0\u70dc\0\174\0\174\0\174\0\u711a\0\u7158\0\174\0\174";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[536];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\5\1\6\1\7\1\3\1\10\6\3"+
    "\1\11\1\12\1\13\32\3\1\14\1\3\1\15\4\3"+
    "\1\16\1\17\7\3\1\20\1\21\1\3\2\22\2\3"+
    "\1\22\1\23\46\22\1\24\21\22\100\0\1\4\74\0"+
    "\3\25\2\0\1\26\1\0\1\26\5\27\3\0\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\2\0\1\36\1\37"+
    "\1\0\1\40\1\41\1\42\1\43\1\44\1\0\1\45"+
    "\1\0\1\46\1\47\10\0\1\26\16\0\1\27\63\0"+
    "\1\50\77\0\1\51\10\0\2\22\2\0\1\22\1\0"+
    "\46\22\1\0\21\22\5\0\1\52\57\0\1\53\1\0"+
    "\1\54\1\0\1\55\5\0\3\25\15\0\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\0\1\36\1\37\1\0"+
    "\1\40\1\41\1\42\1\43\1\44\1\0\1\45\1\0"+
    "\1\46\1\47\35\0\1\56\1\26\1\0\6\26\3\0"+
    "\32\26\3\0\15\26\2\0\1\26\11\0\5\57\57\0"+
    "\1\57\27\0\1\60\4\0\1\61\5\0\1\62\72\0"+
    "\1\63\57\0\1\64\3\0\1\65\2\0\1\66\3\0"+
    "\1\67\2\0\1\70\2\0\1\71\60\0\1\72\104\0"+
    "\1\73\66\0\1\74\3\0\1\75\5\0\1\76\62\0"+
    "\1\77\10\0\1\100\1\101\13\0\1\102\70\0\1\103"+
    "\67\0\1\104\75\0\1\105\75\0\1\106\5\0\1\107"+
    "\70\0\1\110\56\0\1\111\75\0\1\112\3\0\1\113"+
    "\75\0\1\114\3\0\1\115\106\0\1\116\1\117\117\0"+
    "\1\120\73\0\1\121\23\0\5\122\57\0\1\122\42\0"+
    "\1\123\64\0\1\124\71\0\1\125\114\0\1\126\66\0"+
    "\1\127\76\0\1\130\64\0\1\131\71\0\1\132\110\0"+
    "\1\133\1\134\65\0\1\135\112\0\1\136\64\0\1\137"+
    "\67\0\1\140\75\0\1\141\10\0\1\142\103\0\1\143"+
    "\34\0\3\77\1\0\1\144\111\0\1\145\100\0\1\146"+
    "\112\0\1\147\77\0\1\150\61\0\1\151\72\0\1\152"+
    "\106\0\1\153\65\0\1\154\73\0\1\155\114\0\1\156"+
    "\1\157\56\0\1\160\112\0\1\161\71\0\1\162\12\0"+
    "\1\163\71\0\1\164\65\0\1\165\106\0\1\166\106\0"+
    "\1\167\75\0\1\170\30\0\5\171\57\0\1\171\25\0"+
    "\1\172\106\0\1\173\60\0\1\174\113\0\1\175\76\0"+
    "\1\176\101\0\1\177\54\0\1\200\115\0\1\201\77\0"+
    "\1\202\52\0\1\203\74\0\1\204\2\0\1\205\76\0"+
    "\1\206\105\0\1\207\70\0\1\210\75\0\1\211\66\0"+
    "\1\212\111\0\1\213\67\0\1\214\77\0\1\215\111\0"+
    "\1\216\74\0\1\217\62\0\1\220\75\0\1\221\66\0"+
    "\1\222\121\0\1\223\60\0\1\224\65\0\1\225\117\0"+
    "\1\226\63\0\1\227\111\0\1\230\51\0\1\231\120\0"+
    "\1\232\76\0\1\233\31\0\3\165\1\0\1\234\111\0"+
    "\1\235\144\0\1\236\75\0\1\237\15\0\1\240\114\0"+
    "\1\241\73\0\1\242\126\0\1\243\55\0\1\244\76\0"+
    "\1\245\100\0\1\246\66\0\1\247\67\0\1\250\105\0"+
    "\1\251\77\0\1\252\100\0\1\253\60\0\1\254\73\0"+
    "\1\255\103\0\1\256\65\0\1\257\101\0\1\260\113\0"+
    "\1\261\77\0\1\262\55\0\1\263\73\0\1\264\103\0"+
    "\1\265\75\0\1\266\102\0\1\267\65\0\1\270\111\0"+
    "\1\271\72\0\1\272\75\0\1\273\73\0\1\274\107\0"+
    "\1\275\65\0\1\276\63\0\1\277\51\0\3\231\1\0"+
    "\1\300\127\0\1\301\72\0\1\302\103\0\1\303\121\0"+
    "\1\304\75\0\1\305\20\0\1\306\1\307\3\310\101\0"+
    "\1\311\75\0\1\312\120\0\1\313\32\0\3\244\1\0"+
    "\1\314\146\0\1\315\56\0\1\316\60\0\1\317\54\0"+
    "\3\250\1\0\1\320\126\0\1\321\40\0\3\252\1\0"+
    "\1\322\146\0\1\323\55\0\1\324\67\0\1\325\103\0"+
    "\1\326\115\0\1\327\61\0\1\330\34\0\3\261\1\0"+
    "\1\331\124\0\1\332\77\0\1\333\64\0\1\334\75\0"+
    "\1\335\76\0\1\336\125\0\1\337\50\0\1\340\71\0"+
    "\1\341\126\0\1\342\55\0\1\343\64\0\1\344\107\0"+
    "\1\345\37\0\3\276\1\0\1\346\132\0\1\347\111\0"+
    "\1\350\56\0\1\351\67\0\1\352\130\0\1\353\75\0"+
    "\1\354\23\0\4\310\70\0\1\355\3\310\72\0\1\355"+
    "\127\0\1\356\56\0\1\357\77\0\1\360\114\0\1\361"+
    "\32\0\3\316\1\0\1\362\127\0\1\363\57\0\1\364"+
    "\121\0\1\365\53\0\1\366\73\0\1\367\75\0\1\370"+
    "\77\0\1\371\11\0\1\372\77\0\1\373\57\0\1\374"+
    "\55\0\3\333\1\0\1\375\71\0\3\334\1\0\1\376"+
    "\132\0\1\377\64\0\1\u0100\111\0\1\u0101\53\0\1\u0102"+
    "\53\0\3\u0103\1\0\1\u0104\50\0\1\u0105\45\0\1\u0106"+
    "\11\0\1\u0107\62\0\1\u0108\114\0\1\u0109\73\0\1\u010a"+
    "\64\0\1\u010b\112\0\1\u010c\30\0\3\351\1\0\1\u010d"+
    "\127\0\1\u010e\121\0\1\u010f\75\0\1\u0110\23\0\1\u0111"+
    "\2\u0112\1\u0113\1\u0114\136\0\1\u0115\50\0\1\u0116\114\0"+
    "\1\u0117\52\0\1\u0118\120\0\1\u0119\70\0\1\u011a\75\0"+
    "\1\u011b\63\0\1\u011c\45\0\3\367\1\0\1\u011d\132\0"+
    "\1\u011e\75\0\1\u011f\72\0\1\u0120\37\0\3\373\1\0"+
    "\1\u0121\132\0\1\u0122\57\0\1\u0123\74\0\1\u0124\115\0"+
    "\1\u0125\53\0\1\u0126\55\0\3\u0103\1\0\1\u0104\113\0"+
    "\1\u0127\111\0\1\u0128\57\0\1\u0129\117\0\1\u012a\74\0"+
    "\1\u012b\57\0\1\u012c\75\0\1\u012d\102\0\1\u012e\45\0"+
    "\3\u012f\1\0\1\u0130\50\0\1\u0131\76\0\1\u0132\75\0"+
    "\1\u0133\30\0\4\u0114\65\0\1\u0134\3\0\5\u0114\65\0"+
    "\1\u0134\3\0\2\u0114\70\0\1\u0134\113\0\1\u0135\111\0"+
    "\1\u0136\102\0\1\u0137\101\0\1\u0138\26\0\3\u0119\1\0"+
    "\1\u0139\71\0\3\u011a\1\0\1\u013a\135\0\1\u013b\51\0"+
    "\1\u013c\132\0\1\u013d\44\0\1\u013e\74\0\1\u013f\102\0"+
    "\1\u0140\65\0\1\u0141\75\0\1\u0142\121\0\1\u0143\72\0"+
    "\1\u0144\54\0\1\u0145\116\0\1\u0146\76\0\1\u0147\33\0"+
    "\3\u012a\1\0\1\u0148\127\0\1\u0149\37\0\3\u012c\1\0"+
    "\1\u014a\127\0\1\u014b\101\0\1\u014c\33\0\3\u012f\1\0"+
    "\1\u0130\111\0\1\u014d\1\0\1\u014e\12\0\1\u014f\122\0"+
    "\1\u0150\75\0\1\u0151\51\0\1\u0152\74\0\1\u0153\76\0"+
    "\1\u0154\102\0\1\u0155\52\0\1\u0156\110\0\1\u0157\64\0"+
    "\1\u0158\2\0\1\u0159\16\0\1\u015a\51\0\1\u015b\105\0"+
    "\1\u015c\103\0\1\u015d\37\0\3\u0141\1\0\1\u015e\132\0"+
    "\1\u015f\54\0\1\u0160\132\0\1\u0161\54\0\1\u0162\75\0"+
    "\1\u0163\103\0\1\u0164\75\0\1\u0165\33\0\3\u014b\1\0"+
    "\1\u0166\121\0\1\u0167\102\0\1\u0168\101\0\1\u0169\100\0"+
    "\1\u016a\121\0\1\u016b\75\0\1\u016c\41\0\1\u016d\41\0"+
    "\3\u0153\1\0\1\u016e\71\0\3\u0154\1\0\1\u016f\127\0"+
    "\1\u0170\100\0\1\u0171\60\0\1\u0172\107\0\1\u0173\75\0"+
    "\1\u0174\101\0\1\u0175\55\0\1\u0176\100\0\1\u0177\50\0"+
    "\3\u015d\1\0\1\u0178\71\0\3\u015f\1\0\1\u0179\132\0"+
    "\1\u017a\56\0\1\u017b\2\0\1\u017c\16\0\1\u017d\70\0"+
    "\1\u017e\102\0\1\u017f\77\0\1\u0180\104\0\1\u0181\41\0"+
    "\1\u0182\117\0\1\u0183\56\0\1\u0184\75\0\1\u0185\142\0"+
    "\1\u0186\75\0\1\u0187\43\0\1\u0188\36\0\3\u0170\1\0"+
    "\1\u0189\121\0\1\u018a\107\0\1\u018b\67\0\1\u018c\102\0"+
    "\1\u018d\100\0\1\u018e\61\0\1\u018f\75\0\1\u0190\75\0"+
    "\1\u0191\103\0\1\u0192\75\0\1\u0193\101\0\1\u0194\71\0"+
    "\1\u0195\72\0\1\u0196\100\0\1\u0197\61\0\1\u0198\2\0"+
    "\1\u0199\103\0\1\u019a\72\0\1\u019b\65\0\1\u019c\122\0"+
    "\1\u019d\107\0\1\u019e\75\0\1\u019f\54\0\1\u01a0\75\0"+
    "\1\u01a1\114\0\1\u01a2\57\0\1\u01a3\72\0\1\u01a4\61\0"+
    "\1\u01a5\113\0\1\u01a6\61\0\1\u01a7\111\0\1\u01a8\73\0"+
    "\1\u01a9\102\0\1\u01aa\100\0\1\u01ab\31\0\3\u0195\1\0"+
    "\1\u01ac\111\0\1\u01ad\116\0\1\u01ae\72\0\1\u01af\75\0"+
    "\1\u01b0\63\0\1\u01b1\77\0\1\u01b2\71\0\1\u01b3\111\0"+
    "\1\u01b4\117\0\1\u01b5\75\0\1\u01b6\52\0\1\u01b7\40\0"+
    "\3\u01a1\1\0\1\u01b8\135\0\1\u01b9\67\0\1\u01ba\103\0"+
    "\1\u01bb\72\0\1\u01bc\71\0\1\u01bd\60\0\1\u01be\55\0"+
    "\3\u01a8\1\0\1\u01bf\130\0\1\u01c0\72\0\1\u01c1\61\0"+
    "\1\u01c2\116\0\1\u01c3\57\0\1\u01c4\106\0\1\u01c5\102\0"+
    "\1\u01c6\34\0\3\u01b1\1\0\1\u01c7\135\0\1\u01c8\61\0"+
    "\1\u01c9\45\0\3\u01b4\1\0\1\u01ca\160\0\1\u01cb\75\0"+
    "\1\u01cc\32\0\1\u01cd\113\0\1\u01ce\70\0\1\u01cf\73\0"+
    "\1\u01d0\72\0\1\u01d1\45\0\3\u01bd\1\0\1\u01d2\113\0"+
    "\1\u01d3\111\0\1\u01d4\103\0\1\u01d5\72\0\1\u01d6\64\0"+
    "\1\u01d7\45\0\3\u01c4\1\0\1\u01d8\130\0\1\u01d9\72\0"+
    "\1\u01da\77\0\1\u01db\75\0\1\u01dc\74\0\1\u01dd\104\0"+
    "\1\u01de\55\0\1\u01df\71\0\1\u01e0\113\0\1\u01e1\67\0"+
    "\1\u01e2\102\0\1\u01e3\73\0\1\u01e4\72\0\1\u01e5\103\0"+
    "\1\u01e6\75\0\1\u01e7\103\0\1\u01e8\31\0\3\u01db\1\0"+
    "\1\u01e9\126\0\1\u01ea\103\0\1\u01eb\52\0\1\u01ec\112\0"+
    "\1\u01ed\101\0\1\u01ee\34\0\3\u01e1\1\0\1\u01ef\127\0"+
    "\1\u01f0\63\0\1\u01f1\71\0\1\u01f2\113\0\1\u01f3\37\0"+
    "\3\u01e6\1\0\1\u01f4\126\0\1\u01f5\73\0\1\u01f6\42\0"+
    "\3\u01ea\1\0\1\u01f7\115\0\1\u01f8\112\0\1\u01f9\77\0"+
    "\1\u01fa\62\0\1\u01fb\102\0\1\u01fc\75\0\1\u01fd\101\0"+
    "\1\u01fe\34\0\3\u01f3\1\0\1\u01ff\115\0\1\u0200\71\0"+
    "\1\u0201\55\0\3\u01f8\1\0\1\u0202\121\0\1\u0203\71\0"+
    "\1\u0204\107\0\1\u0205\37\0\3\u01fc\1\0\1\u0206\134\0"+
    "\1\u0207\62\0\1\u0208\102\0\1\u0209\101\0\1\u020a\72\0"+
    "\1\u020b\37\0\3\u0204\1\0\1\u020c\71\0\3\u0205\1\0"+
    "\1\u020d\115\0\1\u020e\107\0\1\u020f\102\0\1\u0210\62\0"+
    "\1\u0211\45\0\3\u020b\1\0\1\u0212\71\0\3\u020e\1\0"+
    "\1\u0213\71\0\3\u020f\1\0\1\u0214\115\0\1\u0215\107\0"+
    "\1\u0216\37\0\3\u0215\1\0\1\u0217\71\0\3\u0216\1\0"+
    "\1\u0218\70\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29078];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\1\1\1\11\1\1\6\11\2\1\2\11"+
    "\1\1\1\11\1\1\25\0\5\11\65\0\1\11\67\0"+
    "\1\11\43\0\1\11\13\0\1\11\3\0\1\11\1\0"+
    "\1\11\6\0\1\11\14\0\1\11\13\0\1\11\12\0"+
    "\2\11\5\0\1\11\10\0\1\11\17\0\1\11\3\0"+
    "\1\11\16\0\1\11\3\0\1\11\4\0\2\11\15\0"+
    "\1\11\1\0\1\11\23\0\1\11\7\0\1\11\7\0"+
    "\2\11\10\0\2\11\17\0\1\11\24\0\2\1\14\0"+
    "\1\11\13\0\1\11\6\0\1\11\7\0\1\11\2\0"+
    "\3\11\5\0\1\11\5\0\1\11\20\0\1\11\5\0"+
    "\1\11\4\0\1\11\2\0\1\11\7\0\1\11\2\0"+
    "\1\11\3\0\1\11\5\0\2\11\4\0\3\11\2\0"+
    "\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[536];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private List<ErrorAnalisis> errores = new ArrayList();
    private StringBuffer string = new StringBuffer();

    public List<ErrorAnalisis> getErrores(){
        return this.errores;
    }

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }
    
    private Symbol symbol(int type, String lexema){
        return new Symbol(type, new Token(yyline, yycolumn, lexema);
    }

    private void addLexicError(){
        String descripcion = "El simbolo no pertenece al lenguaje";
        errores.add(new ErrorAnalisis(yytext(), yyline+1, yycolumn+1, TipoError.LEXICO, descripcion));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { addLexicError();
            }
            // fall through
          case 74: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 75: break;
          case 3:
            { return symbol(EXCLAMATION_MARK);
            }
            // fall through
          case 76: break;
          case 4:
            { string.setLength(0); yybegin(STRING);
            }
            // fall through
          case 77: break;
          case 5:
            { return symbol(COMMA);
            }
            // fall through
          case 78: break;
          case 6:
            { return symbol(COLON);
            }
            // fall through
          case 79: break;
          case 7:
            { return symbol(LESS_THAN);
            }
            // fall through
          case 80: break;
          case 8:
            { return symbol(GREATER_THAN);
            }
            // fall through
          case 81: break;
          case 9:
            { return symbol(OPEN_BRACKET);
            }
            // fall through
          case 82: break;
          case 10:
            { return symbol(CLOSE_BRACKET);
            }
            // fall through
          case 83: break;
          case 11:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 84: break;
          case 12:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 85: break;
          case 13:
            { string.append(yytext());
            }
            // fall through
          case 86: break;
          case 14:
            { yybegin(YYINITIAL);
                                        return symbol(VALUE, string.toString());
            }
            // fall through
          case 87: break;
          case 15:
            { string.append('\\');
            }
            // fall through
          case 88: break;
          case 16:
            { string.append('\"');
            }
            // fall through
          case 89: break;
          case 17:
            { string.append('\n');
            }
            // fall through
          case 90: break;
          case 18:
            { string.append('\r');
            }
            // fall through
          case 91: break;
          case 19:
            { string.append('\t');
            }
            // fall through
          case 92: break;
          case 20:
            { return symbol(ID);
            }
            // fall through
          case 93: break;
          case 21:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 94: break;
          case 22:
            { return symbol(PARAM_URL);
            }
            // fall through
          case 95: break;
          case 23:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 96: break;
          case 24:
            { return symbol(CLASS_BOTON);
            }
            // fall through
          case 97: break;
          case 25:
            { return symbol(PARAM_CLASE);
            }
            // fall through
          case 98: break;
          case 26:
            { return symbol(CLASS_COMBO);
            }
            // fall through
          case 99: break;
          case 27:
            { return symbol(PARAM_FILAS);
            }
            // fall through
          case 100: break;
          case 28:
            { return symbol(CLASS_RADIO);
            }
            // fall through
          case 101: break;
          case 29:
            { return symbol(CENTRO);
            }
            // fall through
          case 102: break;
          case 30:
            { return symbol(CLASS_IMAGEN);
            }
            // fall through
          case 103: break;
          case 31:
            { return symbol(PARAM_INDICE);
            }
            // fall through
          case 104: break;
          case 32:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 105: break;
          case 33:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 106: break;
          case 34:
            { return symbol(DERECHA);
            }
            // fall through
          case 107: break;
          case 35:
            { return symbol(CLASS_FICHERO);
            }
            // fall through
          case 108: break;
          case 36:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 109: break;
          case 37:
            { return symbol(FECHA);
            }
            // fall through
          case 110: break;
          case 38:
            { return symbol(CLASS_CHECKBOX);
            }
            // fall through
          case 111: break;
          case 39:
            { return symbol(PARAM_COLUMNAS);
            }
            // fall through
          case 112: break;
          case 40:
            { return symbol(PARAM_OPCIONES);
            }
            // fall through
          case 113: break;
          case 41:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 114: break;
          case 42:
            { return symbol(IZQUIERDA);
            }
            // fall through
          case 115: break;
          case 43:
            { return symbol(PARAM_REQUERIDO);
            }
            // fall through
          case 116: break;
          case 44:
            { return symbol(PARAM_ALINEACION);
            }
            // fall through
          case 117: break;
          case 45:
            { return symbol(CLASS_AREA_TEXTO);
            }
            // fall through
          case 118: break;
          case 46:
            { return symbol(PARAM_FORMULARIO);
            }
            // fall through
          case 119: break;
          case 47:
            { return symbol(JUSTIFICAR);
            }
            // fall through
          case 120: break;
          case 48:
            { return symbol(CLASS_CAMPO_TEXTO);
            }
            // fall through
          case 121: break;
          case 49:
            { return symbol(END_REQUEST);
            }
            // fall through
          case 122: break;
          case 50:
            { return symbol(START_REQUEST);
            }
            // fall through
          case 123: break;
          case 51:
            { return symbol(PARAM_NOMBRE_CAMPO);
            }
            // fall through
          case 124: break;
          case 52:
            { return symbol(CREATE_USER);
            }
            // fall through
          case 125: break;
          case 53:
            { return symbol(LOGIN);
            }
            // fall through
          case 126: break;
          case 54:
            { return symbol(PARAM_TEXTO_VISIBLE);
            }
            // fall through
          case 127: break;
          case 55:
            { return symbol(PARAM_NEW_USER);
            }
            // fall through
          case 128: break;
          case 56:
            { return symbol(END_REQUESTS);
            }
            // fall through
          case 129: break;
          case 57:
            { return symbol(START_REQUESTS);
            }
            // fall through
          case 130: break;
          case 58:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 131: break;
          case 59:
            { return symbol(PARAM_NEW_PASSWORD);
            }
            // fall through
          case 132: break;
          case 60:
            { return symbol(PARAM_OLD_USER);
            }
            // fall through
          case 133: break;
          case 61:
            { return symbol(DELETE_USER);
            }
            // fall through
          case 134: break;
          case 62:
            { return symbol(NEW_FORM);
            }
            // fall through
          case 135: break;
          case 63:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 136: break;
          case 64:
            { return symbol(MODIFY_USER);
            }
            // fall through
          case 137: break;
          case 65:
            { return symbol(NEW_COMPONENT);
            }
            // fall through
          case 138: break;
          case 66:
            { return symbol(PARAM_FECHA_MODIFICACION);
            }
            // fall through
          case 139: break;
          case 67:
            { return symbol(DELETE_COMPONENT);
            }
            // fall through
          case 140: break;
          case 68:
            { return symbol(DELETE_FORM);
            }
            // fall through
          case 141: break;
          case 69:
            { return symbol(USER_CREDENTIALS);
            }
            // fall through
          case 142: break;
          case 70:
            { return symbol(EDIT_COMPONENT);
            }
            // fall through
          case 143: break;
          case 71:
            { return symbol(MODIFY_FORM);
            }
            // fall through
          case 144: break;
          case 72:
            { return symbol(COMPONENT_PARAMS);
            }
            // fall through
          case 145: break;
          case 73:
            { return symbol(FORM_PARAMS);
            }
            // fall through
          case 146: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
