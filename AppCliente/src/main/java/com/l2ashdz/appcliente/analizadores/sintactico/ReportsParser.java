
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.l2ashdz.appcliente.analizadores.sintactico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ReportsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ReportsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ReportsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ReportsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ReportsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\003\000\002\002\004\000\002\002" +
    "\004\000\002\003\010\000\002\007\003\000\002\010\004" +
    "\000\002\010\005\000\002\011\003\000\002\011\005\000" +
    "\002\004\006\000\002\005\003\000\002\005\005\000\002" +
    "\006\005\000\002\012\003\000\002\013\003\000\002\013" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\015\003\000\002\015\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\004\005\001\002\000\006\002\001\007" +
    "\025\001\002\000\004\005\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\006\011\001" +
    "\002\000\004\013\012\001\002\000\004\026\013\001\002" +
    "\000\004\014\ufffd\001\002\000\004\014\016\001\002\000" +
    "\006\002\ufffe\007\ufffe\001\002\000\006\015\020\031\021" +
    "\001\002\000\004\015\024\001\002\000\006\002\ufffc\007" +
    "\ufffc\001\002\000\006\015\ufffa\016\022\001\002\000\004" +
    "\031\021\001\002\000\004\015\ufff9\001\002\000\006\002" +
    "\ufffb\007\ufffb\001\002\000\004\014\027\001\002\000\004" +
    "\002\uffff\001\002\000\004\026\030\001\002\000\016\020" +
    "\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\001\002" +
    "\000\016\020\044\021\046\022\042\023\050\024\043\025" +
    "\047\001\002\000\004\015\041\001\002\000\012\010\034" +
    "\011\037\012\035\015\ufff7\001\002\000\004\026\uffeb\001" +
    "\002\000\004\026\uffe9\001\002\000\004\026\030\001\002" +
    "\000\004\026\uffea\001\002\000\004\015\ufff6\001\002\000" +
    "\004\002\ufff8\001\002\000\006\027\ufff1\030\ufff1\001\002" +
    "\000\006\027\uffef\030\uffef\001\002\000\006\027\ufff3\030" +
    "\ufff3\001\002\000\006\027\051\030\053\001\002\000\006" +
    "\027\ufff2\030\ufff2\001\002\000\006\027\uffee\030\uffee\001" +
    "\002\000\006\027\ufff0\030\ufff0\001\002\000\012\010\uffed" +
    "\011\uffed\012\uffed\015\uffed\001\002\000\012\010\ufff5\011" +
    "\ufff5\012\ufff5\015\ufff5\001\002\000\012\010\uffec\011\uffec" +
    "\012\uffec\015\uffec\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\006\002\005\003\003\001\001\000\004\004" +
    "\025\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\013\001\001\000\002\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\004\011\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\031\006\032\012\030" +
    "\001\001\000\002\001\001\000\004\013\044\001\001\000" +
    "\002\001\001\000\004\014\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\037\006\032\012\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ReportsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ReportsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ReportsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorAnalisis> errores = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ReportsParser$actions {
  private final ReportsParser parser;

  /** Constructor */
  CUP$ReportsParser$actions(ReportsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ReportsParser$do_action_part00000000(
    int                        CUP$ReportsParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportsParser$parser,
    java.util.Stack            CUP$ReportsParser$stack,
    int                        CUP$ReportsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ReportsParser$result;

      /* select the action based on the action number */
      switch (CUP$ReportsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= consulta 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)).value;
		RESULT = start_val;
              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ReportsParser$parser.done_parsing();
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= consulta where 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // consulta ::= SELECT TO FORM ARROW identificador fields 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("consulta",1, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-5)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // identificador ::= ID 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("identificador",5, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // fields ::= OPEN_BRACKET CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("fields",6, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-1)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fields ::= OPEN_BRACKET campos CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("fields",6, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // campos ::= NAME 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("campos",7, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // campos ::= NAME COMMA campos 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("campos",7, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // where ::= WHERE OPEN_BRACKET restricciones CLOSE_BRACKET 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("where",2, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-3)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // restricciones ::= restriccion 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("restricciones",3, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // restricciones ::= restriccion operadorLogico restricciones 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("restricciones",3, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // restriccion ::= idCampoWhere operadorRelacional valorCompare 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("restriccion",4, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.elementAt(CUP$ReportsParser$top-2)), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // idCampoWhere ::= ID 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("idCampoWhere",8, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // operadorRelacional ::= LESS_THAN 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // operadorRelacional ::= GREATER_THAN 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // operadorRelacional ::= EQUAL_TO 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // operadorRelacional ::= LESS_THAN_OR_EQUAL_TO 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // operadorRelacional ::= GREATER_THAN_OR_EQUAL_TO 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // operadorRelacional ::= NOT_EQUAL_TO 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorRelacional",9, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // valorCompare ::= NUMERO 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("valorCompare",11, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // valorCompare ::= CADENA 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("valorCompare",11, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // operadorLogico ::= AND 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // operadorLogico ::= OR 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // operadorLogico ::= NOT 
            {
              Object RESULT =null;

              CUP$ReportsParser$result = parser.getSymbolFactory().newSymbol("operadorLogico",10, ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ReportsParser$stack.peek()), RESULT);
            }
          return CUP$ReportsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ReportsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ReportsParser$do_action(
    int                        CUP$ReportsParser$act_num,
    java_cup.runtime.lr_parser CUP$ReportsParser$parser,
    java.util.Stack            CUP$ReportsParser$stack,
    int                        CUP$ReportsParser$top)
    throws java.lang.Exception
    {
              return CUP$ReportsParser$do_action_part00000000(
                               CUP$ReportsParser$act_num,
                               CUP$ReportsParser$parser,
                               CUP$ReportsParser$stack,
                               CUP$ReportsParser$top);
    }
}

}
