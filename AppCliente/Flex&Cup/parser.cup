package com.l2ashdz.appcliente.analizadores.sintactico;

import com.l2ashdz.appcliente.model.Token;
import com.l2ashdz.appcliente.model.errores.ErrorAnalisis;
import com.l2ashdz.appcliente.model.errores.TipoError;
import com.l2ashdz.appcliente.model.solicitudes.Solicitud;
import com.l2ashdz.appcliente.model.solicitudes.TipoSolicitud;
import com.l2ashdz.appcliente.model.solicitudes.Parametro;

import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

parser code{:

    private List<ErrorAnalisis> errores = new ArrayList();
    private List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(List<Parametro> parametros, Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
            System.out.println("Se agrego el parametro");
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }
:}

//Terminales
terminal Token      START_REQUEST, START_REQUESTS, END_REQUEST, END_REQUESTS;
terminal Token      USER_CREDENTIALS;
terminal Token      LOGIN, CREATE_USER, DELETE_USER, MODIFY_USER;
terminal Token      PARAM_USUARIO, PARAM_PASSWORD, PARAM_FECHA_CREACION, PARAM_FECHA_MODIFICACION, PARAM_OLD_USER, PARAM_NEW_USER, PARAM_NEW_PASSWORD;
terminal Token      LESS_THAN, GREATER_THAN, EXCLAMATION_MARK, QUOTE_MARK, COLON, COMMA, OPEN_BRACE, CLOSE_BRACE, OPEN_BRACKET, CLOSE_BRACKET;
terminal Token      VALUE;

//no terminales
non terminal        inicio, startRequests, requests, endRequests, startRequest, endRequest;
non terminal        requestType, startContent, blockParamName, endContent;
non terminal        bloquesLogin, bloquesCreateUser, bloquesModifyUser, bloquesDeleteUser;
non terminal        bloqueLogin, bloqueCreateUser, bloqueModifyUser, bloqueDeleteUser;

non terminal List<Parametro>    paramsLogin, paramsCreateUser, paramsModifyUser;
non terminal Parametro          paramLogin, paramCreateUser, paramModifyUser, paramDeleteUser;
non terminal String             nameParamLogin, nameParamCreateUser, nameParamModifyUser, value;


inicio ::= startRequest
         | startRequests
         ;

startRequests ::= LESS_THAN EXCLAMATION_MARK START_REQUESTS GREATER_THAN requests;

requests ::= startRequest endRequests
           | startRequest requests
           ;

/******************************Produccion para el inicio de una solicitud en general******************************/
startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON QUOTE_MARK requestType endContent endRequest;

/******************************Producciones para los diferentes tipos de solicitud******************************/
requestType ::= LOGIN QUOTE_MARK GREATER_THAN startContent bloquesLogin
| CREATE_USER QUOTE_MARK GREATER_THAN startContent bloquesCreateUser
| MODIFY_USER QUOTE_MARK GREATER_THAN startContent bloquesModifyUser
| DELETE_USER QUOTE_MARK GREATER_THAN startContent bloquesDeleteUser
;

startContent ::= OPEN_BRACE QUOTE_MARK blockParamName QUOTE_MARK COLON OPEN_BRACKET;

blockParamName ::= USER_CREDENTIALS;

/******************************Producciones para parametros de solicitud Login******************************/
bloquesLogin ::= bloqueLogin COMMA bloquesLogin
               | bloqueLogin
               ;

bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE
                     {:
                        solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        parametros = new ArrayList();
                     :}
                     ;

paramsLogin ::= paramLogin:p COMMA paramsLogin        {:addParameter(parametros, p);:}
              | paramLogin:p                          {:addParameter(parametros, p);:}
              ;

paramLogin ::= QUOTE_MARK nameParamLogin:n QUOTE_MARK COLON QUOTE_MARK value:v QUOTE_MARK
               {:
                    RESULT = new Parametro(n, v);
               :}
               ;

nameParamLogin ::= PARAM_USUARIO:p          {:RESULT = p.getLexema();:}
                 | PARAM_PASSWORD:p         {:RESULT = p.getLexema();:}
                 ;
/**************************Fin de producciones para parametros de solicitud Login**************************/    



/******************************Producciones para parametros de solicitud CrearUsuario******************************/
bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser
                    | bloqueCreateUser
                    ;

bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE
                          {:
                                solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                                parametros = new ArrayList();
                          :}
                          ;

paramsCreateUser ::= paramCreateUser:p COMMA paramsCreateUser   {:addParameter(parametros, p);:}
                   | paramCreateUser:p                          {:addParameter(parametros, p);:}
                   ;
     
paramCreateUser ::= QUOTE_MARK nameParamCreateUser:n QUOTE_MARK COLON QUOTE_MARK value:v QUOTE_MARK
                    {:
                        RESULT = new Parametro(n, v);
                    :}
                    ;

nameParamCreateUser ::= PARAM_USUARIO:p               {:RESULT = p.getLexema();:}
                      | PARAM_PASSWORD:p              {:RESULT = p.getLexema();:}
                      | PARAM_FECHA_CREACION:p        {:RESULT = p.getLexema();:}
                      ;
/****************************Fin producciones para parametros de solicitud CrearUsuario****************************/      



/**************************Producciones para parametros de solicitud ModificarUsuario*************************/
bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser
                    | bloqueModifyUser
                    ;

bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE
                        {:
                            solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            parametros = new ArrayList();
                        :}
                        ;

paramsModifyUser ::= paramModifyUser:p COMMA paramsModifyUser     {:addParameter(parametros, p);:}
                   | paramModifyUser:p                            {:addParameter(parametros, p);:}
                   ;

paramModifyUser ::= QUOTE_MARK nameParamModifyUser:n QUOTE_MARK COLON QUOTE_MARK value:v QUOTE_MARK
                    {:
                        RESULT = new Parametro(n, v);
                    :}
                    ;

nameParamModifyUser ::= PARAM_OLD_USER:p                  {:RESULT = p.getLexema();:}
                      | PARAM_NEW_USER:p                  {:RESULT = p.getLexema();:}
                      | PARAM_NEW_PASSWORD:p              {:RESULT = p.getLexema();:}
                      | PARAM_FECHA_MODIFICACION:p        {:RESULT = p.getLexema();:}
                      ;
/************************Fin producciones para parametros de solicitud ModificarUsuario************************/       



/**************************Producciones para parametros de solicitud EliminarUsuario*************************/
bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser
                    | bloqueDeleteUser
                    ;

bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser:p CLOSE_BRACE
                        {:
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        :}
                        ;

paramDeleteUser ::= QUOTE_MARK PARAM_USUARIO:p QUOTE_MARK COLON QUOTE_MARK value:v QUOTE_MARK
                    {:
                        RESULT = new Parametro(p.getLexema(), v);
                    :}
                    ;
/************************Fin producciones para parametros de solicitud EliminarUsuario***********************/

value ::= VALUE:v           {:RESULT = v.getLexema();:}
        ;

endContent ::= CLOSE_BRACKET CLOSE_BRACE;

endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN;

endRequests ::= LESS_THAN EXCLAMATION_MARK END_REQUESTS GREATER_THAN;