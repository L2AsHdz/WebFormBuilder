
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import model.Token;
import model.errores.ErrorAnalisis;
import model.errores.TipoError;
import model.solicitudes.Solicitud;
import model.solicitudes.TipoSolicitud;
import model.solicitudes.Parametro;
import validator.Validator;
import validator.user.CreateUserRequestValidator;
import validator.user.ModifyUserRequestValidator;
import validator.form.CreateFormRequestValidator;
import validator.form.ModifyFormRequestValidator;
import validator.component.CreateComponentRequestValidator;
import validator.component.ModifyComponentRequestValidator;
import validator.component.DeleteComponentRequestValidator;
import validator.component.ClassParameterValidator;
import validator.component.ClassRequiredParametersValidator;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class RequestsParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return RequestsSym.class;
}

  /** Default constructor. */
  @Deprecated
  public RequestsParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public RequestsParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public RequestsParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\277\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\007\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\006\011\000\002\006\004\000" +
    "\002\010\005\000\002\010\005\000\002\010\005\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\010\005" +
    "\000\002\011\007\000\002\012\007\000\002\013\007\000" +
    "\002\015\005\000\002\015\003\000\002\021\005\000\002" +
    "\041\005\000\002\041\003\000\002\044\005\000\002\050" +
    "\003\000\002\050\003\000\002\016\005\000\002\016\003" +
    "\000\002\022\005\000\002\042\005\000\002\042\003\000" +
    "\002\045\005\000\002\045\005\000\002\051\003\000\002" +
    "\051\003\000\002\017\005\000\002\017\003\000\002\023" +
    "\005\000\002\043\005\000\002\043\003\000\002\046\005" +
    "\000\002\046\005\000\002\052\003\000\002\052\003\000" +
    "\002\052\003\000\002\020\005\000\002\020\003\000\002" +
    "\024\005\000\002\047\005\000\002\025\005\000\002\025" +
    "\003\000\002\030\005\000\002\053\005\000\002\053\003" +
    "\000\002\055\005\000\002\055\005\000\002\055\005\000" +
    "\002\055\005\000\002\055\005\000\002\060\003\000\002" +
    "\060\003\000\002\027\005\000\002\027\003\000\002\032" +
    "\005\000\002\057\005\000\002\026\005\000\002\026\003" +
    "\000\002\031\005\000\002\054\005\000\002\054\003\000" +
    "\002\056\005\000\002\056\005\000\002\056\005\000\002" +
    "\056\005\000\002\033\005\000\002\033\003\000\002\036" +
    "\005\000\002\062\005\000\002\062\003\000\002\065\005" +
    "\000\002\065\005\000\002\065\005\000\002\065\005\000" +
    "\002\065\005\000\002\065\005\000\002\065\005\000\002" +
    "\065\005\000\002\065\005\000\002\065\005\000\002\070" +
    "\003\000\002\070\003\000\002\034\005\000\002\034\003" +
    "\000\002\037\005\000\002\063\005\000\002\063\003\000" +
    "\002\066\005\000\002\066\005\000\002\066\005\000\002" +
    "\066\005\000\002\066\005\000\002\066\005\000\002\066" +
    "\005\000\002\066\005\000\002\066\005\000\002\066\005" +
    "\000\002\066\005\000\002\071\003\000\002\071\003\000" +
    "\002\035\005\000\002\035\003\000\002\040\005\000\002" +
    "\064\005\000\002\064\003\000\002\067\005\000\002\067" +
    "\005\000\002\076\003\000\002\076\003\000\002\076\003" +
    "\000\002\076\003\000\002\076\003\000\002\077\003\000" +
    "\002\100\003\000\002\101\003\000\002\101\003\000\002" +
    "\102\003\000\002\061\003\000\002\061\003\000\002\072" +
    "\003\000\002\072\003\000\002\072\003\000\002\072\003" +
    "\000\002\072\003\000\002\072\003\000\002\072\003\000" +
    "\002\072\003\000\002\073\003\000\002\073\003\000\002" +
    "\073\003\000\002\073\003\000\002\074\003\000\002\074" +
    "\003\000\002\075\003\000\002\075\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\103\003\000\002\103\003\000\002\103\003\000" +
    "\002\103\003\000\002\103\003\000\002\103\003\000\002" +
    "\103\003\000\002\103\003\000\002\103\003\000\002\103" +
    "\003\000\002\103\003\000\002\103\003\000\002\103\003" +
    "\000\002\014\004\000\002\007\006\000\002\005\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\006\003\005\075\004\001\002\000\004\077" +
    "\013\001\002\000\004\076\012\001\002\000\004\002\uffff" +
    "\001\002\000\004\002\001\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufff9\001\002" +
    "\000\006\004\014\005\015\001\002\000\004\100\033\001" +
    "\002\000\004\076\016\001\002\000\006\003\020\075\017" +
    "\001\002\000\004\077\032\001\002\000\004\076\031\001" +
    "\002\000\006\003\020\075\023\001\002\000\004\002\ufffe" +
    "\001\002\000\004\077\026\001\002\000\004\002\ufffd\001" +
    "\002\000\004\002\ufffc\001\002\000\006\004\014\007\027" +
    "\001\002\000\004\076\030\001\002\000\004\002\uff43\001" +
    "\002\000\010\002\ufffb\003\ufff9\075\ufff9\001\002\000\004" +
    "\004\014\001\002\000\026\013\035\014\045\015\042\016" +
    "\043\026\046\027\036\030\041\040\044\041\034\042\040" +
    "\001\002\000\004\076\242\001\002\000\004\076\212\001" +
    "\002\000\004\076\050\001\002\000\004\105\u0138\001\002" +
    "\000\004\076\242\001\002\000\004\076\050\001\002\000" +
    "\004\076\212\001\002\000\004\076\212\001\002\000\004" +
    "\076\242\001\002\000\004\076\212\001\002\000\004\076" +
    "\050\001\002\000\004\102\056\001\002\000\004\102\051" +
    "\001\002\000\004\011\052\001\002\000\004\100\053\001" +
    "\002\000\004\104\054\001\002\000\004\102\uffed\001\002" +
    "\000\004\105\ufff4\001\002\000\016\021\070\031\066\032" +
    "\072\033\062\034\063\035\067\001\002\000\006\101\060" +
    "\105\uffcb\001\002\000\004\102\056\001\002\000\004\105" +
    "\uffcc\001\002\000\004\100\uffc2\001\002\000\004\100\210" +
    "\001\002\000\006\101\206\103\uffc8\001\002\000\004\103" +
    "\205\001\002\000\004\100\203\001\002\000\004\100\uffc1" +
    "\001\002\000\004\100\201\001\002\000\004\100\177\001" +
    "\002\000\004\100\073\001\002\000\164\010\147\011\165" +
    "\012\141\013\161\014\132\015\137\016\156\017\176\020" +
    "\140\021\133\022\154\023\117\024\075\025\172\026\112" +
    "\027\150\030\166\031\076\032\135\033\136\034\116\035" +
    "\146\036\167\037\105\040\170\041\160\042\074\043\122" +
    "\044\125\045\107\046\151\047\101\050\100\051\174\052" +
    "\173\053\143\054\164\055\130\056\127\057\144\060\114" +
    "\061\106\062\163\063\145\064\115\065\134\066\124\067" +
    "\111\070\157\071\175\072\103\073\155\106\171\107\131" +
    "\110\113\111\153\112\104\001\002\000\006\101\uff60\103" +
    "\uff60\001\002\000\006\101\uff57\103\uff57\001\002\000\006" +
    "\101\uff55\103\uff55\001\002\000\006\101\uff85\103\uff85\001" +
    "\002\000\006\101\uff4b\103\uff4b\001\002\000\006\101\uff4c" +
    "\103\uff4c\001\002\000\006\101\uff86\103\uff86\001\002\000" +
    "\006\101\uff71\103\uff71\001\002\000\006\101\uff80\103\uff80" +
    "\001\002\000\006\101\uff7e\103\uff7e\001\002\000\006\101" +
    "\uff7a\103\uff7a\001\002\000\006\101\uff4e\103\uff4e\001\002" +
    "\000\006\101\uffc4\103\uffc4\001\002\000\006\101\uff74\103" +
    "\uff74\001\002\000\006\101\uff65\103\uff65\001\002\000\006" +
    "\101\uff83\103\uff83\001\002\000\006\101\uff7b\103\uff7b\001" +
    "\002\000\006\101\uff77\103\uff77\001\002\000\006\101\uff52" +
    "\103\uff52\001\002\000\006\101\uff58\103\uff58\001\002\000" +
    "\006\101\uff6d\103\uff6d\001\002\000\006\101\uff6b\103\uff6b" +
    "\001\002\000\006\101\uff50\103\uff50\001\002\000\006\101" +
    "\uff6a\103\uff6a\001\002\000\006\101\uff75\103\uff75\001\002" +
    "\000\006\101\uff4f\103\uff4f\001\002\000\006\101\uff6c\103" +
    "\uff6c\001\002\000\006\101\uff7d\103\uff7d\001\002\000\006" +
    "\101\uff46\103\uff46\001\002\000\006\101\uff84\103\uff84\001" +
    "\002\000\006\101\uff68\103\uff68\001\002\000\006\101\uff5a" +
    "\103\uff5a\001\002\000\006\101\uff76\103\uff76\001\002\000" +
    "\006\101\uff54\103\uff54\001\002\000\006\101\uff53\103\uff53" +
    "\001\002\000\006\101\uff67\103\uff67\001\002\000\006\101" +
    "\uff5b\103\uff5b\001\002\000\006\101\uff5d\103\uff5d\001\002" +
    "\000\006\101\uff87\103\uff87\001\002\000\006\101\uff48\103" +
    "\uff48\001\002\000\006\101\uff7c\103\uff7c\001\002\000\006" +
    "\101\uff78\103\uff78\001\002\000\006\101\uff51\103\uff51\001" +
    "\002\000\006\101\uff5f\103\uff5f\001\002\000\006\101\uff64" +
    "\103\uff64\001\002\000\006\101\uff4d\103\uff4d\001\002\000" +
    "\006\101\uff88\103\uff88\001\002\000\006\101\uff82\103\uff82" +
    "\001\002\000\006\101\uff59\103\uff59\001\002\000\006\101" +
    "\uff70\103\uff70\001\002\000\006\101\uff66\103\uff66\001\002" +
    "\000\006\101\uff73\103\uff73\001\002\000\006\101\uff61\103" +
    "\uff61\001\002\000\006\101\uff69\103\uff69\001\002\000\006" +
    "\101\uff81\103\uff81\001\002\000\006\101\uff79\103\uff79\001" +
    "\002\000\006\101\uff47\103\uff47\001\002\000\006\101\uff5e" +
    "\103\uff5e\001\002\000\006\101\uff63\103\uff63\001\002\000" +
    "\006\101\uff7f\103\uff7f\001\002\000\006\101\uff62\103\uff62" +
    "\001\002\000\006\101\uff89\103\uff89\001\002\000\006\101" +
    "\uff56\103\uff56\001\002\000\006\101\uff49\103\uff49\001\002" +
    "\000\006\101\uff4a\103\uff4a\001\002\000\006\101\uff72\103" +
    "\uff72\001\002\000\006\101\uff5c\103\uff5c\001\002\000\162" +
    "\010\147\011\165\012\141\013\161\014\132\015\137\016" +
    "\156\017\176\020\140\021\133\022\154\023\117\024\075" +
    "\025\172\026\112\027\150\030\166\031\076\032\135\033" +
    "\136\034\116\035\146\036\167\037\105\040\170\041\160" +
    "\042\074\043\122\044\125\045\107\046\151\047\101\050" +
    "\100\051\174\052\173\053\143\054\164\055\130\056\127" +
    "\057\144\060\114\061\106\062\163\063\145\064\115\065" +
    "\134\066\124\067\111\070\157\071\175\072\103\073\155" +
    "\106\171\107\131\110\113\112\104\001\002\000\006\101" +
    "\uffc7\103\uffc7\001\002\000\004\110\113\001\002\000\006" +
    "\101\uffc5\103\uffc5\001\002\000\004\107\131\001\002\000" +
    "\006\101\uffc6\103\uffc6\001\002\000\006\101\uffca\105\uffca" +
    "\001\002\000\016\021\070\031\066\032\072\033\062\034" +
    "\063\035\067\001\002\000\004\103\uffc9\001\002\000\006" +
    "\036\167\037\105\001\002\000\006\101\uffc3\103\uffc3\001" +
    "\002\000\004\102\236\001\002\000\004\102\216\001\002" +
    "\000\004\105\ufff7\001\002\000\006\101\234\105\uffe2\001" +
    "\002\000\010\017\217\020\223\021\220\001\002\000\004" +
    "\100\uffdc\001\002\000\004\100\232\001\002\000\006\101" +
    "\230\103\uffdf\001\002\000\004\103\227\001\002\000\004" +
    "\100\uffdb\001\002\000\004\100\225\001\002\000\162\010" +
    "\147\011\165\012\141\013\161\014\132\015\137\016\156" +
    "\017\176\020\140\021\133\022\154\023\117\024\075\025" +
    "\172\026\112\027\150\030\166\031\076\032\135\033\136" +
    "\034\116\035\146\036\167\037\105\040\170\041\160\042" +
    "\074\043\122\044\125\045\107\046\151\047\101\050\100" +
    "\051\174\052\173\053\143\054\164\055\130\056\127\057" +
    "\144\060\114\061\106\062\163\063\145\064\115\065\134" +
    "\066\124\067\111\070\157\071\175\072\103\073\155\106" +
    "\171\107\131\110\113\112\104\001\002\000\006\101\uffde" +
    "\103\uffde\001\002\000\006\101\uffe1\105\uffe1\001\002\000" +
    "\010\017\217\020\223\021\220\001\002\000\004\103\uffe0" +
    "\001\002\000\004\110\113\001\002\000\006\101\uffdd\103" +
    "\uffdd\001\002\000\004\102\216\001\002\000\004\105\uffe3" +
    "\001\002\000\004\010\237\001\002\000\004\100\240\001" +
    "\002\000\004\104\241\001\002\000\004\102\uffee\001\002" +
    "\000\004\102\320\001\002\000\004\102\246\001\002\000" +
    "\006\101\316\105\uffb2\001\002\000\004\105\ufff1\001\002" +
    "\000\030\031\253\043\251\044\252\045\264\047\257\050" +
    "\262\051\260\052\261\053\255\054\247\055\256\001\002" +
    "\000\004\100\314\001\002\000\004\100\312\001\002\000" +
    "\004\100\uffa4\001\002\000\004\100\310\001\002\000\004" +
    "\100\306\001\002\000\006\101\304\103\uffaf\001\002\000" +
    "\004\100\302\001\002\000\004\100\uffa3\001\002\000\004" +
    "\100\300\001\002\000\004\100\276\001\002\000\004\100" +
    "\272\001\002\000\004\100\270\001\002\000\004\103\267" +
    "\001\002\000\004\100\265\001\002\000\022\056\127\057" +
    "\144\060\114\061\106\062\163\063\145\064\115\065\134" +
    "\001\002\000\006\101\uffab\103\uffab\001\002\000\006\101" +
    "\uffb1\105\uffb1\001\002\000\012\066\124\067\111\070\157" +
    "\071\175\001\002\000\006\101\uffa9\103\uffa9\001\002\000" +
    "\164\010\147\011\165\012\141\013\161\014\132\015\137" +
    "\016\156\017\176\020\140\021\133\022\154\023\117\024" +
    "\075\025\172\026\112\027\150\030\166\031\076\032\135" +
    "\033\136\034\116\035\146\036\167\037\105\040\170\041" +
    "\160\042\074\043\122\044\125\045\107\046\151\047\101" +
    "\050\100\051\174\052\173\053\143\054\164\055\130\056" +
    "\127\057\144\060\114\061\106\062\163\063\145\064\115" +
    "\065\134\066\124\067\111\070\157\071\175\072\103\073" +
    "\155\074\275\106\171\107\131\110\113\112\104\001\002" +
    "\000\006\101\uff6e\103\uff6e\001\002\000\006\101\uffa7\103" +
    "\uffa7\001\002\000\006\101\uff6f\103\uff6f\001\002\000\006" +
    "\072\103\073\155\001\002\000\006\101\uffa8\103\uffa8\001" +
    "\002\000\164\010\147\011\165\012\141\013\161\014\132" +
    "\015\137\016\156\017\176\020\140\021\133\022\154\023" +
    "\117\024\075\025\172\026\112\027\150\030\166\031\076" +
    "\032\135\033\136\034\116\035\146\036\167\037\105\040" +
    "\170\041\160\042\074\043\122\044\125\045\107\046\151" +
    "\047\101\050\100\051\174\052\173\053\143\054\164\055" +
    "\130\056\127\057\144\060\114\061\106\062\163\063\145" +
    "\064\115\065\134\066\124\067\111\070\157\071\175\072" +
    "\103\073\155\106\171\107\131\110\113\111\153\112\104" +
    "\001\002\000\006\101\uffaa\103\uffaa\001\002\000\004\112" +
    "\104\001\002\000\006\101\uffa6\103\uffa6\001\002\000\030" +
    "\031\253\043\251\044\252\045\264\047\257\050\262\051" +
    "\260\052\261\053\255\054\247\055\256\001\002\000\004" +
    "\103\uffb0\001\002\000\004\107\131\001\002\000\006\101" +
    "\uffad\103\uffad\001\002\000\004\107\131\001\002\000\006" +
    "\101\uffac\103\uffac\001\002\000\162\010\147\011\165\012" +
    "\141\013\161\014\132\015\137\016\156\017\176\020\140" +
    "\021\133\022\154\023\117\024\075\025\172\026\112\027" +
    "\150\030\166\031\076\032\135\033\136\034\116\035\146" +
    "\036\167\037\105\040\170\041\160\042\074\043\122\044" +
    "\125\045\107\046\151\047\101\050\100\051\174\052\173" +
    "\053\143\054\164\055\130\056\127\057\144\060\114\061" +
    "\106\062\163\063\145\064\115\065\134\066\124\067\111" +
    "\070\157\071\175\072\103\073\155\106\171\107\131\110" +
    "\113\112\104\001\002\000\006\101\uffae\103\uffae\001\002" +
    "\000\004\112\104\001\002\000\006\101\uffa5\103\uffa5\001" +
    "\002\000\004\102\246\001\002\000\004\105\uffb3\001\002" +
    "\000\004\012\321\001\002\000\004\100\322\001\002\000" +
    "\004\104\323\001\002\000\004\102\uffec\001\002\000\004" +
    "\102\327\001\002\000\004\105\ufff6\001\002\000\006\101" +
    "\346\105\uffd9\001\002\000\012\022\333\023\336\024\330" +
    "\025\334\001\002\000\004\100\uffd2\001\002\000\006\101" +
    "\344\103\uffd6\001\002\000\004\103\343\001\002\000\004" +
    "\100\341\001\002\000\004\100\uffd1\001\002\000\004\100" +
    "\337\001\002\000\004\100\uffd3\001\002\000\162\010\147" +
    "\011\165\012\141\013\161\014\132\015\137\016\156\017" +
    "\176\020\140\021\133\022\154\023\117\024\075\025\172" +
    "\026\112\027\150\030\166\031\076\032\135\033\136\034" +
    "\116\035\146\036\167\037\105\040\170\041\160\042\074" +
    "\043\122\044\125\045\107\046\151\047\101\050\100\051" +
    "\174\052\173\053\143\054\164\055\130\056\127\057\144" +
    "\060\114\061\106\062\163\063\145\064\115\065\134\066" +
    "\124\067\111\070\157\071\175\072\103\073\155\106\171" +
    "\107\131\110\113\112\104\001\002\000\006\101\uffd5\103" +
    "\uffd5\001\002\000\004\110\113\001\002\000\006\101\uffd4" +
    "\103\uffd4\001\002\000\006\101\uffd8\105\uffd8\001\002\000" +
    "\012\022\333\023\336\024\330\025\334\001\002\000\004" +
    "\103\uffd7\001\002\000\004\102\327\001\002\000\004\105" +
    "\uffda\001\002\000\004\102\353\001\002\000\006\101\361" +
    "\105\uffcf\001\002\000\004\105\ufff5\001\002\000\004\017" +
    "\354\001\002\000\004\100\357\001\002\000\004\103\356" +
    "\001\002\000\006\101\uffce\105\uffce\001\002\000\162\010" +
    "\147\011\165\012\141\013\161\014\132\015\137\016\156" +
    "\017\176\020\140\021\133\022\154\023\117\024\075\025" +
    "\172\026\112\027\150\030\166\031\076\032\135\033\136" +
    "\034\116\035\146\036\167\037\105\040\170\041\160\042" +
    "\074\043\122\044\125\045\107\046\151\047\101\050\100" +
    "\051\174\052\173\053\143\054\164\055\130\056\127\057" +
    "\144\060\114\061\106\062\163\063\145\064\115\065\134" +
    "\066\124\067\111\070\157\071\175\072\103\073\155\106" +
    "\171\107\131\110\113\112\104\001\002\000\004\103\uffcd" +
    "\001\002\000\004\102\353\001\002\000\004\105\uffd0\001" +
    "\002\000\004\102\366\001\002\000\006\101\u0108\105\uffbb" +
    "\001\002\000\004\105\ufff3\001\002\000\012\031\371\032" +
    "\373\033\374\034\372\001\002\000\004\103\u0107\001\002" +
    "\000\006\101\u0105\103\uffb8\001\002\000\004\100\u0103\001" +
    "\002\000\004\100\u0101\001\002\000\004\100\377\001\002" +
    "\000\004\100\375\001\002\000\162\010\147\011\165\012" +
    "\141\013\161\014\132\015\137\016\156\017\176\020\140" +
    "\021\133\022\154\023\117\024\075\025\172\026\112\027" +
    "\150\030\166\031\076\032\135\033\136\034\116\035\146" +
    "\036\167\037\105\040\170\041\160\042\074\043\122\044" +
    "\125\045\107\046\151\047\101\050\100\051\174\052\173" +
    "\053\143\054\164\055\130\056\127\057\144\060\114\061" +
    "\106\062\163\063\145\064\115\065\134\066\124\067\111" +
    "\070\157\071\175\072\103\073\155\106\171\107\131\110" +
    "\113\112\104\001\002\000\006\101\uffb5\103\uffb5\001\002" +
    "\000\164\010\147\011\165\012\141\013\161\014\132\015" +
    "\137\016\156\017\176\020\140\021\133\022\154\023\117" +
    "\024\075\025\172\026\112\027\150\030\166\031\076\032" +
    "\135\033\136\034\116\035\146\036\167\037\105\040\170" +
    "\041\160\042\074\043\122\044\125\045\107\046\151\047" +
    "\101\050\100\051\174\052\173\053\143\054\164\055\130" +
    "\056\127\057\144\060\114\061\106\062\163\063\145\064" +
    "\115\065\134\066\124\067\111\070\157\071\175\072\103" +
    "\073\155\106\171\107\131\110\113\111\153\112\104\001" +
    "\002\000\006\101\uffb6\103\uffb6\001\002\000\006\036\167" +
    "\037\105\001\002\000\006\101\uffb4\103\uffb4\001\002\000" +
    "\004\107\131\001\002\000\006\101\uffb7\103\uffb7\001\002" +
    "\000\012\031\371\032\373\033\374\034\372\001\002\000" +
    "\004\103\uffb9\001\002\000\006\101\uffba\105\uffba\001\002" +
    "\000\004\102\366\001\002\000\004\105\uffbc\001\002\000" +
    "\004\102\u010d\001\002\000\006\101\u0136\105\uffa1\001\002" +
    "\000\004\105\ufff0\001\002\000\032\031\u0111\043\u010f\044" +
    "\u0110\045\u011c\046\u0117\047\u0116\050\u011b\051\u0119\052\u011a" +
    "\053\u0112\054\u010e\055\u0115\001\002\000\004\100\u0134\001" +
    "\002\000\004\100\uff92\001\002\000\004\100\u0132\001\002" +
    "\000\004\100\u0130\001\002\000\004\100\u012e\001\002\000" +
    "\004\100\u012c\001\002\000\004\103\u012b\001\002\000\004" +
    "\100\uff91\001\002\000\004\100\u0129\001\002\000\004\100" +
    "\u0127\001\002\000\006\101\u0125\103\uff9e\001\002\000\004" +
    "\100\u0123\001\002\000\004\100\u0121\001\002\000\004\100" +
    "\u011f\001\002\000\004\100\u011d\001\002\000\022\056\127" +
    "\057\144\060\114\061\106\062\163\063\145\064\115\065" +
    "\134\001\002\000\006\101\uff9a\103\uff9a\001\002\000\012" +
    "\066\124\067\111\070\157\071\175\001\002\000\006\101" +
    "\uff98\103\uff98\001\002\000\164\010\147\011\165\012\141" +
    "\013\161\014\132\015\137\016\156\017\176\020\140\021" +
    "\133\022\154\023\117\024\075\025\172\026\112\027\150" +
    "\030\166\031\076\032\135\033\136\034\116\035\146\036" +
    "\167\037\105\040\170\041\160\042\074\043\122\044\125" +
    "\045\107\046\151\047\101\050\100\051\174\052\173\053" +
    "\143\054\164\055\130\056\127\057\144\060\114\061\106" +
    "\062\163\063\145\064\115\065\134\066\124\067\111\070" +
    "\157\071\175\072\103\073\155\074\275\106\171\107\131" +
    "\110\113\112\104\001\002\000\006\101\uff96\103\uff96\001" +
    "\002\000\006\072\103\073\155\001\002\000\006\101\uff97" +
    "\103\uff97\001\002\000\032\031\u0111\043\u010f\044\u0110\045" +
    "\u011c\046\u0117\047\u0116\050\u011b\051\u0119\052\u011a\053\u0112" +
    "\054\u010e\055\u0115\001\002\000\004\103\uff9f\001\002\000" +
    "\004\112\104\001\002\000\006\101\uff93\103\uff93\001\002" +
    "\000\164\010\147\011\165\012\141\013\161\014\132\015" +
    "\137\016\156\017\176\020\140\021\133\022\154\023\117" +
    "\024\075\025\172\026\112\027\150\030\166\031\076\032" +
    "\135\033\136\034\116\035\146\036\167\037\105\040\170" +
    "\041\160\042\074\043\122\044\125\045\107\046\151\047" +
    "\101\050\100\051\174\052\173\053\143\054\164\055\130" +
    "\056\127\057\144\060\114\061\106\062\163\063\145\064" +
    "\115\065\134\066\124\067\111\070\157\071\175\072\103" +
    "\073\155\106\171\107\131\110\113\111\153\112\104\001" +
    "\002\000\006\101\uff99\103\uff99\001\002\000\006\101\uffa0" +
    "\105\uffa0\001\002\000\162\010\147\011\165\012\141\013" +
    "\161\014\132\015\137\016\156\017\176\020\140\021\133" +
    "\022\154\023\117\024\075\025\172\026\112\027\150\030" +
    "\166\031\076\032\135\033\136\034\116\035\146\036\167" +
    "\037\105\040\170\041\160\042\074\043\122\044\125\045" +
    "\107\046\151\047\101\050\100\051\174\052\173\053\143" +
    "\054\164\055\130\056\127\057\144\060\114\061\106\062" +
    "\163\063\145\064\115\065\134\066\124\067\111\070\157" +
    "\071\175\072\103\073\155\106\171\107\131\110\113\112" +
    "\104\001\002\000\006\101\uff9d\103\uff9d\001\002\000\004" +
    "\112\104\001\002\000\006\101\uff95\103\uff95\001\002\000" +
    "\004\107\131\001\002\000\006\101\uff9c\103\uff9c\001\002" +
    "\000\004\107\131\001\002\000\006\101\uff9b\103\uff9b\001" +
    "\002\000\004\112\104\001\002\000\006\101\uff94\103\uff94" +
    "\001\002\000\004\102\u010d\001\002\000\004\105\uffa2\001" +
    "\002\000\004\103\u013f\001\002\000\004\075\u013a\001\002" +
    "\000\004\006\u013c\001\002\000\010\002\ufffa\003\ufffa\075" +
    "\ufffa\001\002\000\004\077\u013d\001\002\000\004\076\u013e" +
    "\001\002\000\010\002\uff44\003\uff44\075\uff44\001\002\000" +
    "\004\075\uff45\001\002\000\004\102\u0143\001\002\000\004" +
    "\105\ufff2\001\002\000\006\101\u0149\105\uffbf\001\002\000" +
    "\004\031\u0145\001\002\000\004\103\u0148\001\002\000\004" +
    "\100\u0146\001\002\000\004\107\131\001\002\000\004\103" +
    "\uffbd\001\002\000\006\101\uffbe\105\uffbe\001\002\000\004" +
    "\102\u0143\001\002\000\004\105\uffc0\001\002\000\004\102" +
    "\u014e\001\002\000\004\105\ufff8\001\002\000\006\101\u0159" +
    "\105\uffea\001\002\000\006\017\u014f\020\u0153\001\002\000" +
    "\004\100\uffe5\001\002\000\004\100\u0157\001\002\000\004" +
    "\103\u0156\001\002\000\006\101\u0154\103\uffe7\001\002\000" +
    "\004\100\uffe4\001\002\000\006\017\u014f\020\u0153\001\002" +
    "\000\004\103\uffe8\001\002\000\006\101\uffe9\105\uffe9\001" +
    "\002\000\162\010\147\011\165\012\141\013\161\014\132" +
    "\015\137\016\156\017\176\020\140\021\133\022\154\023" +
    "\117\024\075\025\172\026\112\027\150\030\166\031\076" +
    "\032\135\033\136\034\116\035\146\036\167\037\105\040" +
    "\170\041\160\042\074\043\122\044\125\045\107\046\151" +
    "\047\101\050\100\051\174\052\173\053\143\054\164\055" +
    "\130\056\127\057\144\060\114\061\106\062\163\063\145" +
    "\064\115\065\134\066\124\067\111\070\157\071\175\072" +
    "\103\073\155\106\171\107\131\110\113\112\104\001\002" +
    "\000\006\101\uffe6\103\uffe6\001\002\000\004\102\u014e\001" +
    "\002\000\004\105\uffeb\001\002\000\004\102\u015e\001\002" +
    "\000\006\101\u016a\105\uff8f\001\002\000\004\105\uffef\001" +
    "\002\000\006\031\u0160\044\u015f\001\002\000\004\100\u0168" +
    "\001\002\000\004\100\u0166\001\002\000\006\101\u0164\103" +
    "\uff8c\001\002\000\004\103\u0163\001\002\000\006\101\uff8e" +
    "\105\uff8e\001\002\000\006\031\u0160\044\u015f\001\002\000" +
    "\004\103\uff8d\001\002\000\004\107\131\001\002\000\006" +
    "\101\uff8b\103\uff8b\001\002\000\004\107\131\001\002\000" +
    "\006\101\uff8a\103\uff8a\001\002\000\004\102\u015e\001\002" +
    "\000\004\105\uff90\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0169\000\010\002\007\003\005\006\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\004\021\006\020\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\024\005\023\006\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\036\001\001\000\004\013\u015a\001\001\000\004\011\u014a" +
    "\001\001\000\004\012\u013f\001\001\000\004\014\u0138\001" +
    "\001\000\004\013\u0109\001\001\000\004\012\362\001\001" +
    "\000\004\011\347\001\001\000\004\011\323\001\001\000" +
    "\004\013\242\001\001\000\004\011\212\001\001\000\004" +
    "\012\046\001\001\000\006\025\054\030\056\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\053" +
    "\064\055\063\060\070\001\001\000\002\001\001\000\006" +
    "\025\060\030\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\061\117\072\125" +
    "\073\120\074\122\076\161\077\151\100\101\101\107\102" +
    "\141\103\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\061\117\072\125\073\120\074\122\076\177\077" +
    "\151\100\101\102\141\103\076\001\001\000\002\001\001" +
    "\000\004\100\201\001\001\000\002\001\001\000\004\077" +
    "\203\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\053\206\055\063\060\070\001\001\000\002\001\001\000" +
    "\004\061\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\016\213\022\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\042\221\045\220\051\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\061\117\072\125\073\120\074\122\076\225\077\151\100" +
    "\101\102\141\103\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\230\045\220\051\223\001\001\000" +
    "\002\001\001\000\004\100\232\001\001\000\002\001\001" +
    "\000\006\016\234\022\214\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\244\036\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\062\262" +
    "\065\253\070\247\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\072" +
    "\265\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\073\270\001\001\000\002\001\001\000\026\061\117\072" +
    "\125\073\120\074\122\075\273\076\272\077\151\100\101" +
    "\102\141\103\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\074\276\001\001\000\002" +
    "\001\001\000\026\061\117\072\125\073\120\074\122\076" +
    "\161\077\151\100\101\101\300\102\141\103\076\001\001" +
    "\000\002\001\001\000\004\102\302\001\001\000\002\001" +
    "\001\000\010\062\304\065\253\070\247\001\001\000\002" +
    "\001\001\000\004\077\306\001\001\000\002\001\001\000" +
    "\004\077\310\001\001\000\002\001\001\000\024\061\117" +
    "\072\125\073\120\074\122\076\312\077\151\100\101\102" +
    "\141\103\076\001\001\000\002\001\001\000\004\102\314" +
    "\001\001\000\002\001\001\000\006\033\316\036\243\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\324\023" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\331\046\330\052\334\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\061" +
    "\117\072\125\073\120\074\122\076\337\077\151\100\101" +
    "\102\141\103\076\001\001\000\002\001\001\000\004\100" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\043\344\046\330\052\334\001\001\000\002\001\001\000" +
    "\006\017\346\023\325\001\001\000\002\001\001\000\006" +
    "\020\351\024\350\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\061\117\072\125\073" +
    "\120\074\122\076\357\077\151\100\101\102\141\103\076" +
    "\001\001\000\002\001\001\000\006\020\361\024\350\001" +
    "\001\000\002\001\001\000\006\026\364\031\363\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\054\366\056" +
    "\367\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\061\117\072\125\073\120\074\122\076\375" +
    "\077\151\100\101\102\141\103\076\001\001\000\002\001" +
    "\001\000\026\061\117\072\125\073\120\074\122\076\161" +
    "\077\151\100\101\101\377\102\141\103\076\001\001\000" +
    "\002\001\001\000\004\061\u0101\001\001\000\002\001\001" +
    "\000\004\077\u0103\001\001\000\002\001\001\000\006\054" +
    "\u0105\056\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\u0108\031\363\001\001\000\002\001\001\000" +
    "\006\034\u010b\037\u010a\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\063\u0113\066\u0117\071\u0112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\072\u011d\001\001" +
    "\000\002\001\001\000\004\073\u011f\001\001\000\002\001" +
    "\001\000\026\061\117\072\125\073\120\074\122\075\u0121" +
    "\076\272\077\151\100\101\102\141\103\076\001\001\000" +
    "\002\001\001\000\004\074\u0123\001\001\000\002\001\001" +
    "\000\010\063\u0125\066\u0117\071\u0112\001\001\000\002\001" +
    "\001\000\004\102\u0127\001\001\000\002\001\001\000\026" +
    "\061\117\072\125\073\120\074\122\076\161\077\151\100" +
    "\101\101\u0129\102\141\103\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\061\117\072\125\073\120\074" +
    "\122\076\u012c\077\151\100\101\102\141\103\076\001\001" +
    "\000\002\001\001\000\004\102\u012e\001\001\000\002\001" +
    "\001\000\004\077\u0130\001\001\000\002\001\001\000\004" +
    "\077\u0132\001\001\000\002\001\001\000\004\102\u0134\001" +
    "\001\000\002\001\001\000\006\034\u0136\037\u010a\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\u013a\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\027\u0140\032\u0141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\057\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\077\u0146\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\027\u0149\032\u0141\001\001\000" +
    "\002\001\001\000\006\015\u014b\021\u014c\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\041\u0150\044\u0151\050" +
    "\u014f\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\041" +
    "\u0154\044\u0151\050\u014f\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\061\117\072\125\073\120\074\122\076" +
    "\u0157\077\151\100\101\102\141\103\076\001\001\000\002" +
    "\001\001\000\006\015\u0159\021\u014c\001\001\000\002\001" +
    "\001\000\006\035\u015c\040\u015b\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\064\u0161\067\u0160\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\064\u0164\067\u0160\001" +
    "\001\000\002\001\001\000\004\077\u0166\001\001\000\002" +
    "\001\001\000\004\077\u0168\001\001\000\002\001\001\000" +
    "\006\035\u016a\040\u015b\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$RequestsParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$RequestsParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$RequestsParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    private List<ErrorAnalisis> errores = new ArrayList();
    private List<Solicitud> solicitudes = new ArrayList();
    private List<Parametro> parametros = new ArrayList();

    private Validator createUserRV = new CreateUserRequestValidator();
    private Validator modifyUserRV = new ModifyUserRequestValidator();
    private Validator createFormRV = new CreateFormRequestValidator();
    private Validator modifyFormRV = new ModifyFormRequestValidator();
    private Validator createComponentRV = new CreateComponentRequestValidator();
    private Validator modifyComponentRV = new ModifyComponentRequestValidator();
    private Validator deleteComponentRV = new DeleteComponentRequestValidator();
    private Validator classParameterV = new ClassParameterValidator();
    private Validator classRequiredParametersV = new ClassRequiredParametersValidator();
    String error;

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<Solicitud> getSolicitudes() {
        return this.solicitudes;
    }

    private void addParameter(Parametro param) {
        boolean add = true;
        
        for (Parametro p : parametros) {
            if (p.getName().equalsIgnoreCase(param.getName())) {
                add = false;
            }
        }
        
        if (add) {
            parametros.add(param);
        } else {
            System.out.println("El parametro ya esta agregado");
        }
    }

    public void syntax_error(Symbol s) {
        Token t = (Token) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        errores.add(new ErrorAnalisis(t.getLexema(), t.getLinea(), t.getColumna(), TipoError.SINTACTICO, descripcion.toString()));
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        Token t = (Token) cur_token.value;
        System.out.println("Error irrecuperable " + t.getLexema());
    }

    protected int error_sync_size() {
        return 1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$RequestsParser$actions {
  private final RequestsParser parser;

  /** Constructor */
  CUP$RequestsParser$actions(RequestsParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$RequestsParser$do_action_part00000000(
    int                        CUP$RequestsParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestsParser$parser,
    java.util.Stack            CUP$RequestsParser$stack,
    int                        CUP$RequestsParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$RequestsParser$result;

      /* select the action based on the action number */
      switch (CUP$RequestsParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startRequest 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).value;
		RESULT = start_val;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$RequestsParser$parser.done_parsing();
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startRequests 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startRequests ::= LESS_THAN EXCLAMATION_MARK START_REQUESTS GREATER_THAN requests 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startRequests",1, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // requests ::= startRequest endRequests 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // requests ::= startRequest requests 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // requests ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requests",2, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // startRequest ::= LESS_THAN EXCLAMATION_MARK START_REQUEST COLON requestType endContent endRequest 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startRequest",4, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-6)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // startRequest ::= error GREATER_THAN 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startRequest",4, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // requestType ::= LOGIN startContentUser bloquesLogin 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // requestType ::= CREATE_USER startContentUser bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // requestType ::= MODIFY_USER startContentUser bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // requestType ::= DELETE_USER startContentUser bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // requestType ::= NEW_FORM startContentForm bloquesNewForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // requestType ::= MODIFY_FORM startContentForm bloquesEditForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // requestType ::= DELETE_FORM startContentForm bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // requestType ::= NEW_COMPONENT startContentComponent bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // requestType ::= EDIT_COMPONENT startContentComponent bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // requestType ::= DELETE_COMPONENT startContentComponent bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("requestType",6, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // startContentUser ::= GREATER_THAN OPEN_BRACE USER_CREDENTIALS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startContentUser",7, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // startContentForm ::= GREATER_THAN OPEN_BRACE FORM_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startContentForm",8, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // startContentComponent ::= GREATER_THAN OPEN_BRACE COMPONENT_PARAMS COLON OPEN_BRACKET 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("startContentComponent",9, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-4)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bloquesLogin ::= bloqueLogin COMMA bloquesLogin 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bloquesLogin ::= bloqueLogin 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesLogin",11, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bloqueLogin ::= OPEN_BRACE paramsLogin CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.LOGIN, parametros));
                        } else {
                            System.out.println(error);
                        }
                        parametros = new ArrayList();
                     
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueLogin",15, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // paramsLogin ::= paramLogin COMMA paramsLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // paramsLogin ::= paramLogin 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsLogin",31, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // paramLogin ::= nameParamLogin COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramLogin",34, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nameParamLogin ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // nameParamLogin ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamLogin",38, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bloquesCreateUser ::= bloqueCreateUser COMMA bloquesCreateUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bloquesCreateUser ::= bloqueCreateUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesCreateUser",12, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bloqueCreateUser ::= OPEN_BRACE paramsCreateUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                        error = createUserRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.CREATE_USER, parametros));
                        } else {
                            System.out.println(error);
                        }
                        parametros = new ArrayList();
                   
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueCreateUser",16, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // paramsCreateUser ::= paramCreateUser COMMA paramsCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // paramsCreateUser ::= paramCreateUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsCreateUser",32, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // paramCreateUser ::= nameParamCreateUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",35, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // paramCreateUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramCreateUser",35, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nameParamCreateUser ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // nameParamCreateUser ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamCreateUser",39, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // bloquesModifyUser ::= bloqueModifyUser COMMA bloquesModifyUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // bloquesModifyUser ::= bloqueModifyUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesModifyUser",13, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // bloqueModifyUser ::= OPEN_BRACE paramsModifyUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                            error = modifyUserRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.MODIFY_USER, parametros));
                            } else {
                                System.out.println(error);
                            }
                            parametros = new ArrayList();
                        
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueModifyUser",17, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramsModifyUser ::= paramModifyUser COMMA paramsModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramsModifyUser ::= paramModifyUser 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsModifyUser",33, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // paramModifyUser ::= nameParamModifyUser COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",36, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // paramModifyUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramModifyUser",36, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nameParamModifyUser ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nameParamModifyUser ::= PARAM_NEW_USER 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nameParamModifyUser ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamModifyUser",40, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // bloquesDeleteUser ::= bloqueDeleteUser COMMA bloquesDeleteUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // bloquesDeleteUser ::= bloqueDeleteUser 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteUser",14, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // bloqueDeleteUser ::= OPEN_BRACE paramDeleteUser CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_USER, parametros));
                            parametros = new ArrayList();
                        
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteUser",18, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // paramDeleteUser ::= PARAM_USUARIO COLON value 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		
                        RESULT = new Parametro(p.getLexema(), v);
                    
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramDeleteUser",37, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bloquesNewForm ::= bloqueNewForm COMMA bloquesNewForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // bloquesNewForm ::= bloqueNewForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesNewForm",19, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // bloqueNewForm ::= OPEN_BRACE paramsNewForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                        error = createFormRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            solicitudes.add(new Solicitud(TipoSolicitud.NEW_FORM, parametros));
                        } else {
                            System.out.println(error);
                        }
                        parametros = new ArrayList();
                     
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueNewForm",22, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // paramsNewForm ::= paramNewForm COMMA paramsNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",41, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // paramsNewForm ::= paramNewForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsNewForm",41, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // paramNewForm ::= nameParamNewForm COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // paramNewForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // paramNewForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), f);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // paramNewForm ::= PARAM_TITULO_FORM COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // paramNewForm ::= PARAM_TEMA COLON tema 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), t);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewForm",43, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // nameParamNewForm ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",46, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // nameParamNewForm ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamNewForm",46, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // bloquesDeleteForm ::= bloqueDeleteForm COMMA bloquesDeleteForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // bloquesDeleteForm ::= bloqueDeleteForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteForm",21, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // bloqueDeleteForm ::= OPEN_BRACE paramDeleteForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)).value;
		
                            parametros.add(p);
                            solicitudes.add(new Solicitud(TipoSolicitud.DELETE_FORM, parametros));
                            parametros = new ArrayList();
                        
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteForm",24, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // paramDeleteForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramDeleteForm",45, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // bloquesEditForm ::= bloqueEditForm COMMA bloquesEditForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // bloquesEditForm ::= bloqueEditForm 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesEditForm",20, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // bloqueEditForm ::= OPEN_BRACE paramsEditForm CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                    error = modifyFormRV.validate(o, parametros);
                    if (error.isEmpty()) {
                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_FORM, parametros));
                    } else {
                        System.out.println(error);
                    }
                    parametros = new ArrayList();
                 
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueEditForm",23, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // paramsEditForm ::= paramEditForm COMMA paramsEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",42, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // paramsEditForm ::= paramEditForm 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsEditForm",42, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // paramEditForm ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // paramEditForm ::= PARAM_TITULO_FORM COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // paramEditForm ::= PARAM_NOMBRE_FORM COLON value 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // paramEditForm ::= PARAM_TEMA COLON tema 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), t);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditForm",44, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // bloquesNewComponent ::= bloqueNewComponent COMMA bloquesNewComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // bloquesNewComponent ::= bloqueNewComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesNewComponent",25, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // bloqueNewComponent ::= OPEN_BRACE paramsNewComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		

                        error = createComponentRV.validate(o, parametros);
                        if (error.isEmpty()) {
                            error = classRequiredParametersV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classParameterV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    solicitudes.add(new Solicitud(TipoSolicitud.NEW_COMPONENT, parametros));
                                } else {
                                    System.out.println(error);
                                }
                            } else {
                                System.out.println(error);
                            }
                        } else {
                            System.out.println(error);
                        }
                        parametros = new ArrayList();
                     
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueNewComponent",28, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // paramsNewComponent ::= paramNewComponent COMMA paramsNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",48, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // paramsNewComponent ::= paramNewComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsNewComponent",48, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // paramNewComponent ::= nameParamNewComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // paramNewComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // paramNewComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // paramNewComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // paramNewComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // paramNewComponent ::= PARAM_ALINEACION COLON alineacion 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), a);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // paramNewComponent ::= PARAM_REQUERIDO COLON required 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), r);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // paramNewComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // paramNewComponent ::= PARAM_FILAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // paramNewComponent ::= PARAM_COLUMNAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramNewComponent",51, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // nameParamNewComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",54, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // nameParamNewComponent ::= PARAM_URL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamNewComponent",54, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // bloquesEditComponent ::= bloqueEditComponent COMMA bloquesEditComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // bloquesEditComponent ::= bloqueEditComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesEditComponent",26, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // bloqueEditComponent ::= OPEN_BRACE paramsEditComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                            error = modifyComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                error = classRequiredParametersV.validate(o, parametros);
                                if (error.isEmpty()) {
                                    error = classParameterV.validate(o, parametros);
                                    if (error.isEmpty()) {
                                        solicitudes.add(new Solicitud(TipoSolicitud.EDIT_COMPONENT, parametros));
                                    } else {
                                        System.out.println(error);
                                    }
                                } else {
                                    System.out.println(error);
                                }
                            } else {
                                System.out.println(error);
                            }
                            parametros = new ArrayList();
                      
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueEditComponent",29, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // paramsEditComponent ::= paramEditComponent COMMA paramsEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",49, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // paramsEditComponent ::= paramEditComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsEditComponent",49, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // paramEditComponent ::= nameParamEditComponent COLON value 
            {
              Parametro RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(n, v);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // paramEditComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // paramEditComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // paramEditComponent ::= PARAM_CLASE COLON clase 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), c);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // paramEditComponent ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), l);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // paramEditComponent ::= PARAM_ALINEACION COLON alineacion 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), a);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // paramEditComponent ::= PARAM_REQUERIDO COLON required 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), r);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // paramEditComponent ::= PARAM_OPCIONES COLON opciones 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), o);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // paramEditComponent ::= PARAM_FILAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // paramEditComponent ::= PARAM_COLUMNAS COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // paramEditComponent ::= PARAM_INDICE COLON entero 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), e);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramEditComponent",52, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // nameParamEditComponent ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",55, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // nameParamEditComponent ::= PARAM_URL 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = p.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("nameParamEditComponent",55, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // bloquesDeleteComponent ::= bloqueDeleteComponent COMMA bloquesDeleteComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // bloquesDeleteComponent ::= bloqueDeleteComponent 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloquesDeleteComponent",27, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // bloqueDeleteComponent ::= OPEN_BRACE paramsDeleteComponent CLOSE_BRACE 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		
                            error = deleteComponentRV.validate(o, parametros);
                            if (error.isEmpty()) {
                                solicitudes.add(new Solicitud(TipoSolicitud.DELETE_COMPONENT, parametros));
                            } else {
                                System.out.println(error);
                            }
                            parametros = new ArrayList();
                        
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("bloqueDeleteComponent",30, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // paramsDeleteComponent ::= paramDeleteComponent COMMA paramsDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",50, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // paramsDeleteComponent ::= paramDeleteComponent 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Parametro p = (Parametro)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		addParameter(p);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramsDeleteComponent",50, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // paramDeleteComponent ::= PARAM_ID COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",53, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // paramDeleteComponent ::= PARAM_FORMULARIO COLON id 
            {
              Parametro RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).right;
		Token p = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = new Parametro(p.getLexema(), i);
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("paramDeleteComponent",53, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-2)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = v.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = i;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = e;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = f;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("value",60, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = i.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("id",61, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token f = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = f.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("fecha",62, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = l.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // literal ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = v;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("literal",63, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token e = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = e.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("entero",64, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // tema ::= DARK 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("tema",47, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // tema ::= WHITE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token t = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = t.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("tema",47, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // clase ::= CLASS_IMAGEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // clase ::= CLASS_BOTON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token c = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("clase",56, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // alineacion ::= CENTRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("alineacion",57, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // alineacion ::= IZQUIERDA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("alineacion",57, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // alineacion ::= DERECHA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("alineacion",57, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // alineacion ::= JUSTIFICAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token a = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = a.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("alineacion",57, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // required ::= SI 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT =r.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("required",58, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // required ::= NO 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token r = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT =r.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("required",58, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token o = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = o.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("opciones",59, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = v;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("opciones",59, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // keyword ::= tema 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = t;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = c;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // keyword ::= alineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = a;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // keyword ::= required 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = r;
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // keyword ::= LOGIN 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // keyword ::= CREATE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // keyword ::= DELETE_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // keyword ::= MODIFY_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // keyword ::= NEW_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // keyword ::= DELETE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // keyword ::= MODIFY_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // keyword ::= NEW_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // keyword ::= DELETE_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // keyword ::= EDIT_COMPONENT 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // keyword ::= USER_CREDENTIALS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // keyword ::= FORM_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // keyword ::= COMPONENT_PARAMS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // keyword ::= PARAM_OLD_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // keyword ::= PARAM_NEW_USER 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // keyword ::= PARAM_NEW_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // keyword ::= PARAM_TITULO_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // keyword ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // keyword ::= PARAM_INDICE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // keyword ::= PARAM_ALINEACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // keyword ::= PARAM_REQUERIDO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // keyword ::= PARAM_URL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()).right;
		Token k = (Token)((java_cup.runtime.Symbol) CUP$RequestsParser$stack.peek()).value;
		RESULT = k.getLexema();
              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("keyword",65, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // endContent ::= CLOSE_BRACKET CLOSE_BRACE 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("endContent",10, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-1)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // endRequest ::= LESS_THAN END_REQUEST EXCLAMATION_MARK GREATER_THAN 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("endRequest",5, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // endRequests ::= LESS_THAN EXCLAMATION_MARK END_REQUESTS GREATER_THAN 
            {
              Object RESULT =null;

              CUP$RequestsParser$result = parser.getSymbolFactory().newSymbol("endRequests",3, ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.elementAt(CUP$RequestsParser$top-3)), ((java_cup.runtime.Symbol)CUP$RequestsParser$stack.peek()), RESULT);
            }
          return CUP$RequestsParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$RequestsParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$RequestsParser$do_action(
    int                        CUP$RequestsParser$act_num,
    java_cup.runtime.lr_parser CUP$RequestsParser$parser,
    java.util.Stack            CUP$RequestsParser$stack,
    int                        CUP$RequestsParser$top)
    throws java.lang.Exception
    {
              return CUP$RequestsParser$do_action_part00000000(
                               CUP$RequestsParser$act_num,
                               CUP$RequestsParser$parser,
                               CUP$RequestsParser$stack,
                               CUP$RequestsParser$top);
    }
}

}
