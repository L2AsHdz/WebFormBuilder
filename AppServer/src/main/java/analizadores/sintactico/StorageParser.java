
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import model.Componente;
import model.Formulario;
import model.Usuario;
import model.errores.ErrorAnalisis;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StorageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StorageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public StorageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StorageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StorageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\132\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\003\006\000\002\004\006\000\002\005\004" +
    "\000\002\007\005\000\002\007\003\000\002\010\005\000" +
    "\002\010\005\000\002\010\005\000\002\011\005\000\002" +
    "\011\003\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\003\000\002\013\006\000\002\013\007\000" +
    "\002\014\005\000\002\014\003\000\002\015\005\000\002" +
    "\016\005\000\002\016\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\005\000" +
    "\002\017\005\000\002\017\005\000\002\017\005\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\024\003\000\002\030\003\000\002\025\003" +
    "\000\002\027\003\000\002\027\003\000\002\026\003\000" +
    "\002\031\003\000\002\031\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\021\003\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\022\003\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\006\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\006\004\004\005\005\001\002\000\004\012" +
    "\013\001\002\000\004\012\013\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffff\001\002\000\004\002\011\001" +
    "\002\000\004\002\000\001\002\000\020\016\025\017\022" +
    "\020\026\021\020\022\017\023\023\024\016\001\002\000" +
    "\004\010\014\001\002\000\024\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\001" +
    "\002\000\004\011\207\001\002\000\004\006\126\001\002" +
    "\000\004\006\124\001\002\000\004\006\122\001\002\000" +
    "\006\007\uffee\011\uffee\001\002\000\004\006\120\001\002" +
    "\000\004\006\116\001\002\000\006\007\114\011\ufff5\001" +
    "\002\000\004\006\112\001\002\000\004\006\027\001\002" +
    "\000\122\014\111\015\067\016\063\017\030\020\065\021" +
    "\066\022\047\023\074\024\057\025\052\026\055\027\040" +
    "\030\033\031\032\032\107\033\106\034\071\035\103\036" +
    "\061\037\060\040\072\041\045\042\041\043\102\044\073" +
    "\045\046\046\064\047\054\050\043\051\100\052\110\053" +
    "\035\054\077\056\062\057\044\060\036\061\105\062\076" +
    "\063\104\064\037\001\002\000\006\007\uffb8\011\uffb8\001" +
    "\002\000\006\007\uffd7\011\uffd7\001\002\000\006\007\uffae" +
    "\011\uffae\001\002\000\006\007\uffaf\011\uffaf\001\002\000" +
    "\006\007\uffd9\011\uffd9\001\002\000\006\007\uffc3\011\uffc3" +
    "\001\002\000\006\007\uffd2\011\uffd2\001\002\000\006\007" +
    "\uffd0\011\uffd0\001\002\000\006\007\uffb0\011\uffb0\001\002" +
    "\000\006\007\uffcc\011\uffcc\001\002\000\006\007\ufff0\011" +
    "\ufff0\001\002\000\006\007\uffc6\011\uffc6\001\002\000\006" +
    "\007\uffd5\011\uffd5\001\002\000\006\007\uffcd\011\uffcd\001" +
    "\002\000\006\007\uffc9\011\uffc9\001\002\000\006\007\uffb5" +
    "\011\uffb5\001\002\000\006\007\uffbd\011\uffbd\001\002\000" +
    "\006\007\uffbf\011\uffbf\001\002\000\006\007\uffb2\011\uffb2" +
    "\001\002\000\006\007\uffbc\011\uffbc\001\002\000\006\007" +
    "\uffc7\011\uffc7\001\002\000\006\007\uffb1\011\uffb1\001\002" +
    "\000\006\007\uffbe\011\uffbe\001\002\000\006\007\uffb3\011" +
    "\uffb3\001\002\000\006\007\uffcf\011\uffcf\001\002\000\006" +
    "\007\uffa9\011\uffa9\001\002\000\006\007\uffd6\011\uffd6\001" +
    "\002\000\006\007\uffb9\011\uffb9\001\002\000\006\007\uffc8" +
    "\011\uffc8\001\002\000\006\007\uffb7\011\uffb7\001\002\000" +
    "\006\007\uffb6\011\uffb6\001\002\000\006\007\uffba\011\uffba" +
    "\001\002\000\006\007\uffd8\011\uffd8\001\002\000\006\007" +
    "\uffab\011\uffab\001\002\000\006\007\uffce\011\uffce\001\002" +
    "\000\006\007\uffca\011\uffca\001\002\000\006\007\uffb4\011" +
    "\uffb4\001\002\000\006\007\uffda\011\uffda\001\002\000\006" +
    "\007\uffd4\011\uffd4\001\002\000\006\007\uffc2\011\uffc2\001" +
    "\002\000\006\007\uffc5\011\uffc5\001\002\000\006\007\uffd3" +
    "\011\uffd3\001\002\000\006\007\uffcb\011\uffcb\001\002\000" +
    "\006\007\uffaa\011\uffaa\001\002\000\006\007\uffd1\011\uffd1" +
    "\001\002\000\006\007\uffdb\011\uffdb\001\002\000\006\007" +
    "\uffac\011\uffac\001\002\000\006\007\uffad\011\uffad\001\002" +
    "\000\006\007\uffc4\011\uffc4\001\002\000\006\007\uffbb\011" +
    "\uffbb\001\002\000\004\057\044\001\002\000\006\007\ufff1" +
    "\011\ufff1\001\002\000\020\016\025\017\022\020\026\021" +
    "\020\022\017\023\023\024\016\001\002\000\004\011\ufff6" +
    "\001\002\000\120\014\111\015\067\016\063\017\030\020" +
    "\065\021\066\022\047\023\074\024\057\025\052\026\055" +
    "\027\040\030\033\031\032\032\107\033\106\034\071\035" +
    "\103\036\061\037\060\040\072\041\045\042\041\043\102" +
    "\044\073\045\046\046\064\047\054\050\043\051\100\052" +
    "\110\053\035\054\077\056\062\057\044\060\036\061\105" +
    "\063\104\064\037\001\002\000\006\007\ufff3\011\ufff3\001" +
    "\002\000\004\056\062\001\002\000\006\007\ufff2\011\ufff2" +
    "\001\002\000\120\014\111\015\067\016\063\017\030\020" +
    "\065\021\066\022\047\023\074\024\057\025\052\026\055" +
    "\027\040\030\033\031\032\032\107\033\106\034\071\035" +
    "\103\036\061\037\060\040\072\041\045\042\041\043\102" +
    "\044\073\045\046\046\064\047\054\050\043\051\100\052" +
    "\110\053\035\054\077\056\062\057\044\060\036\061\105" +
    "\063\104\064\037\001\002\000\006\007\ufff4\011\ufff4\001" +
    "\002\000\006\063\104\064\037\001\002\000\006\007\uffef" +
    "\011\uffef\001\002\000\004\012\127\001\002\000\006\010" +
    "\133\013\132\001\002\000\006\007\205\013\uffea\001\002" +
    "\000\004\013\204\001\002\000\006\007\uffed\011\uffed\001" +
    "\002\000\030\017\141\025\136\026\140\027\150\030\144" +
    "\031\146\032\145\033\147\034\142\035\134\036\143\001" +
    "\002\000\004\006\202\001\002\000\006\007\200\011\uffe7" +
    "\001\002\000\004\006\176\001\002\000\004\011\175\001" +
    "\002\000\004\006\173\001\002\000\004\006\171\001\002" +
    "\000\004\006\167\001\002\000\004\006\165\001\002\000" +
    "\004\006\163\001\002\000\004\006\161\001\002\000\004" +
    "\006\157\001\002\000\004\006\153\001\002\000\004\006" +
    "\151\001\002\000\022\037\060\040\072\041\045\042\041" +
    "\043\102\044\073\045\046\046\064\001\002\000\006\007" +
    "\uffe3\011\uffe3\001\002\000\122\014\111\015\067\016\063" +
    "\017\030\020\065\021\066\022\047\023\074\024\057\025" +
    "\052\026\055\027\040\030\033\031\032\032\107\033\106" +
    "\034\071\035\103\036\061\037\060\040\072\041\045\042" +
    "\041\043\102\044\073\045\046\046\064\047\054\050\043" +
    "\051\100\052\110\053\035\054\077\055\156\056\062\057" +
    "\044\060\036\061\105\063\104\064\037\001\002\000\006" +
    "\007\uffc0\011\uffc0\001\002\000\006\007\uffdf\011\uffdf\001" +
    "\002\000\006\007\uffc1\011\uffc1\001\002\000\012\047\054" +
    "\050\043\051\100\052\110\001\002\000\006\007\uffe1\011" +
    "\uffe1\001\002\000\006\053\035\054\077\001\002\000\006" +
    "\007\uffe0\011\uffe0\001\002\000\122\014\111\015\067\016" +
    "\063\017\030\020\065\021\066\022\047\023\074\024\057" +
    "\025\052\026\055\027\040\030\033\031\032\032\107\033" +
    "\106\034\071\035\103\036\061\037\060\040\072\041\045" +
    "\042\041\043\102\044\073\045\046\046\064\047\054\050" +
    "\043\051\100\052\110\053\035\054\077\056\062\057\044" +
    "\060\036\061\105\062\076\063\104\064\037\001\002\000" +
    "\006\007\uffe2\011\uffe2\001\002\000\120\014\111\015\067" +
    "\016\063\017\030\020\065\021\066\022\047\023\074\024" +
    "\057\025\052\026\055\027\040\030\033\031\032\032\107" +
    "\033\106\034\071\035\103\036\061\037\060\040\072\041" +
    "\045\042\041\043\102\044\073\045\046\046\064\047\054" +
    "\050\043\051\100\052\110\053\035\054\077\056\062\057" +
    "\044\060\036\061\105\063\104\064\037\001\002\000\006" +
    "\007\uffdc\011\uffdc\001\002\000\004\060\036\001\002\000" +
    "\006\007\uffde\011\uffde\001\002\000\004\056\062\001\002" +
    "\000\006\007\uffe6\011\uffe6\001\002\000\004\056\062\001" +
    "\002\000\006\007\uffe4\011\uffe4\001\002\000\006\007\uffe9" +
    "\013\uffe9\001\002\000\120\014\111\015\067\016\063\017" +
    "\030\020\065\021\066\022\047\023\074\024\057\025\052" +
    "\026\055\027\040\030\033\031\032\032\107\033\106\034" +
    "\071\035\103\036\061\037\060\040\072\041\045\042\041" +
    "\043\102\044\073\045\046\046\064\047\054\050\043\051" +
    "\100\052\110\053\035\054\077\056\062\057\044\060\036" +
    "\061\105\063\104\064\037\001\002\000\006\007\uffe5\011" +
    "\uffe5\001\002\000\030\017\141\025\136\026\140\027\150" +
    "\030\144\031\146\032\145\033\147\034\142\035\134\036" +
    "\143\001\002\000\004\011\uffe8\001\002\000\004\060\036" +
    "\001\002\000\006\007\uffdd\011\uffdd\001\002\000\006\007" +
    "\uffec\011\uffec\001\002\000\004\010\133\001\002\000\004" +
    "\013\uffeb\001\002\000\004\013\211\001\002\000\004\002" +
    "\ufffd\001\002\000\004\002\uffa8\001\002\000\010\014\213" +
    "\015\216\016\214\001\002\000\004\006\227\001\002\000" +
    "\004\006\225\001\002\000\004\011\207\001\002\000\004" +
    "\006\222\001\002\000\006\007\220\011\ufffa\001\002\000" +
    "\010\014\213\015\216\016\214\001\002\000\004\011\ufffb" +
    "\001\002\000\120\014\111\015\067\016\063\017\030\020" +
    "\065\021\066\022\047\023\074\024\057\025\052\026\055" +
    "\027\040\030\033\031\032\032\107\033\106\034\071\035" +
    "\103\036\061\037\060\040\072\041\045\042\041\043\102" +
    "\044\073\045\046\046\064\047\054\050\043\051\100\052" +
    "\110\053\035\054\077\056\062\057\044\060\036\061\105" +
    "\063\104\064\037\001\002\000\006\007\ufff8\011\ufff8\001" +
    "\002\000\004\002\ufffe\001\002\000\004\057\044\001\002" +
    "\000\006\007\ufff7\011\ufff7\001\002\000\120\014\111\015" +
    "\067\016\063\017\030\020\065\021\066\022\047\023\074" +
    "\024\057\025\052\026\055\027\040\030\033\031\032\032" +
    "\107\033\106\034\071\035\103\036\061\037\060\040\072" +
    "\041\045\042\041\043\102\044\073\045\046\046\064\047" +
    "\054\050\043\051\100\052\110\053\035\054\077\056\062" +
    "\057\044\060\036\061\105\063\104\064\037\001\002\000" +
    "\006\007\ufff9\011\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\226\000\010\002\007\003\005\004\006\001\001\000" +
    "\004\005\211\001\001\000\004\005\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\011\014\012\023\013\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\020\055" +
    "\021\047\022\052\024\100\025\033\026\067\027\041\030" +
    "\074\031\050\032\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\112\001\001\000\002\001\001\000\010\011\114" +
    "\012\023\013\020\001\001\000\002\001\001\000\024\020" +
    "\055\021\047\022\052\024\116\025\033\026\067\030\074" +
    "\031\050\032\030\001\001\000\002\001\001\000\004\030" +
    "\120\001\001\000\002\001\001\000\024\020\055\021\047" +
    "\022\052\024\122\025\033\026\067\030\074\031\050\032" +
    "\030\001\001\000\002\001\001\000\004\031\124\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\130\015" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\016\136\017\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\020" +
    "\151\001\001\000\002\001\001\000\026\020\055\021\047" +
    "\022\052\023\154\024\153\025\033\026\067\030\074\031" +
    "\050\032\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\021\157\001\001\000\002\001" +
    "\001\000\004\022\161\001\001\000\002\001\001\000\026" +
    "\020\055\021\047\022\052\024\100\025\033\026\067\027" +
    "\163\030\074\031\050\032\030\001\001\000\002\001\001" +
    "\000\024\020\055\021\047\022\052\024\165\025\033\026" +
    "\067\030\074\031\050\032\030\001\001\000\002\001\001" +
    "\000\004\026\167\001\001\000\002\001\001\000\004\030" +
    "\171\001\001\000\002\001\001\000\004\030\173\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\020\055\021" +
    "\047\022\052\024\176\025\033\026\067\030\074\031\050" +
    "\032\030\001\001\000\002\001\001\000\006\016\200\017" +
    "\134\001\001\000\002\001\001\000\004\026\202\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\205\015" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\007\214\010\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\007" +
    "\220\010\216\001\001\000\002\001\001\000\024\020\055" +
    "\021\047\022\052\024\222\025\033\026\067\030\074\031" +
    "\050\032\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\025\225\001\001\000\002\001\001\000\024\020" +
    "\055\021\047\022\052\024\227\025\033\026\067\030\074" +
    "\031\050\032\030\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StorageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StorageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StorageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorAnalisis> errores = new ArrayList();
    private Usuario user = new Usuario();
    private Formulario form = new Formulario();
    private Componente comp = new Componente();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public Usuario getUsuario(){
        return this.user;
    }

    public Formulario getForm(){
        return this.form;
    }

    private void addComponent() {
        form.getComponentes().add(comp);
        comp = new Componente();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StorageParser$actions {
  private final StorageParser parser;

  /** Constructor */
  CUP$StorageParser$actions(StorageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action_part00000000(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StorageParser$result;

      /* select the action based on the action number */
      switch (CUP$StorageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startUserStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).value;
		RESULT = start_val;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StorageParser$parser.done_parsing();
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startFormStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // startUserStructure ::= INICIO_USER startStructure paramsUser endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startUserStructure",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // startFormStructure ::= INICIO_FORM startStructure paramsForm endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startFormStructure",2, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startStructure ::= OPEN_ROUND_BRACKET OPEN_BRACE 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startStructure",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // paramsUser ::= paramUser COMMA paramsUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // paramsUser ::= paramUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramUser ::= PARAM_USUARIO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramUser ::= PARAM_PASSWORD COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setPassword(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramsForm ::= paramForm COMMA paramsForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramsForm ::= paramForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramForm ::= PARAM_NOMBRE_FORM COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramForm ::= PARAM_USUARIO_CREACION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setUsuarioCreacion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramForm ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramForm ::= PARAM_TITULO_FORM COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTitulo(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramForm ::= PARAM_TEMA COLON tema 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTema(t.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramForm ::= componentStruct 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET components CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-4)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // components ::= component COMMA components 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // components ::= component 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // component ::= OPEN_BRACE params CLOSE_BRACE 
            {
              Object RESULT =null;
		addComponent();
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("component",11, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // params ::= param COMMA params 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // params ::= param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // param ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // param ::= PARAM_NOMBRE_CAMPO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNombreCampo(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // param ::= PARAM_FORMULARIO COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setFormulario(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= PARAM_CLASE COLON clase 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setClase(c.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setTextoVisible(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= PARAM_ALINEACION COLON alineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setAlineacion(a.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= PARAM_REQUERIDO COLON required 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setRequerido(r.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= PARAM_OPCIONES COLON opciones 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setOpciones(o.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= PARAM_FILAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoFilas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param ::= PARAM_COLUMNAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoColumnas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= PARAM_URL COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setUrl(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("id",22, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("fecha",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = l;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // literal ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("entero",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // tema ::= DARK 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("tema",23, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // tema ::= WHITE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("tema",23, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // clase ::= CLASS_IMAGEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // clase ::= CLASS_BOTON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // alineacion ::= CENTRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // alineacion ::= IZQUIERDA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // alineacion ::= DERECHA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // alineacion ::= JUSTIFICAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // required ::= SI 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT =r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("required",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // required ::= NO 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT =r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("required",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // keyword ::= tema 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // keyword ::= alineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // keyword ::= required 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // keyword ::= PARAM_TITULO_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // keyword ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // keyword ::= PARAM_COMPONENTES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // keyword ::= PARAM_ALINEACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // keyword ::= PARAM_REQUERIDO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // keyword ::= PARAM_URL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // endStructure ::= CLOSE_BRACE CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("endStructure",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StorageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
              return CUP$StorageParser$do_action_part00000000(
                               CUP$StorageParser$act_num,
                               CUP$StorageParser$parser,
                               CUP$StorageParser$stack,
                               CUP$StorageParser$top);
    }
}

}
