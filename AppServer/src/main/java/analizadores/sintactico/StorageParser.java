
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import model.Componente;
import model.Formulario;
import model.Usuario;
import model.DatoRecopilado;
import model.errores.ErrorAnalisis;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class StorageParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return StorageSym.class;
}

  /** Default constructor. */
  @Deprecated
  public StorageParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public StorageParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public StorageParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\003\006\000\002\004\006" +
    "\000\002\005\006\000\002\006\004\000\002\010\005\000" +
    "\002\010\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\012\005\000\002\012" +
    "\003\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\003\000\002\016\006\000\002\016\007\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\021" +
    "\005\000\002\021\003\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\005\000" +
    "\002\022\005\000\002\022\005\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\014" +
    "\005\000\002\014\003\000\002\015\005\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\033\003\000\002\030\003\000\002" +
    "\032\003\000\002\032\003\000\002\031\003\000\002\034" +
    "\003\000\002\034\003\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\025\003\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\010\004\005\005\006\006\004\001\002\000" +
    "\004\013\014\001\002\000\004\013\014\001\002\000\004" +
    "\013\014\001\002\000\004\002\001\001\002\000\004\002" +
    "\uffff\001\002\000\004\002\ufffe\001\002\000\004\002\013" +
    "\001\002\000\004\002\000\001\002\000\004\011\215\001" +
    "\002\000\020\017\026\021\023\022\027\023\021\024\020" +
    "\025\024\026\017\001\002\000\004\012\212\001\002\000" +
    "\004\007\133\001\002\000\004\007\131\001\002\000\004" +
    "\007\127\001\002\000\006\010\uffeb\012\uffeb\001\002\000" +
    "\004\007\125\001\002\000\004\007\123\001\002\000\006" +
    "\010\121\012\ufff2\001\002\000\004\007\117\001\002\000" +
    "\004\007\030\001\002\000\130\015\114\016\071\017\064" +
    "\020\101\021\031\022\066\023\067\024\050\025\076\026" +
    "\060\027\053\030\056\031\041\032\034\033\033\034\112" +
    "\035\111\036\073\037\106\040\062\041\061\042\074\043" +
    "\046\044\042\045\105\046\075\047\047\050\065\051\055" +
    "\052\044\053\103\054\113\055\037\056\102\057\116\060" +
    "\070\061\063\062\045\063\036\064\110\065\100\066\107" +
    "\067\040\001\002\000\010\007\uffb0\010\uffb0\012\uffb0\001" +
    "\002\000\010\007\uffd1\010\uffd1\012\uffd1\001\002\000\010" +
    "\007\uffa6\010\uffa6\012\uffa6\001\002\000\010\007\uffa7\010" +
    "\uffa7\012\uffa7\001\002\000\010\007\uffd3\010\uffd3\012\uffd3" +
    "\001\002\000\010\007\uffcc\010\uffcc\012\uffcc\001\002\000" +
    "\010\007\uffbd\010\uffbd\012\uffbd\001\002\000\010\007\uffca" +
    "\010\uffca\012\uffca\001\002\000\010\007\uffa8\010\uffa8\012" +
    "\uffa8\001\002\000\010\007\uffc6\010\uffc6\012\uffc6\001\002" +
    "\000\006\010\uffed\012\uffed\001\002\000\010\007\uffc0\010" +
    "\uffc0\012\uffc0\001\002\000\010\007\uffcf\010\uffcf\012\uffcf" +
    "\001\002\000\010\007\uffc7\010\uffc7\012\uffc7\001\002\000" +
    "\010\007\uffc3\010\uffc3\012\uffc3\001\002\000\010\007\uffad" +
    "\010\uffad\012\uffad\001\002\000\010\007\uffb6\010\uffb6\012" +
    "\uffb6\001\002\000\010\007\uffb8\010\uffb8\012\uffb8\001\002" +
    "\000\010\007\uffaa\010\uffaa\012\uffaa\001\002\000\010\007" +
    "\uffb5\010\uffb5\012\uffb5\001\002\000\010\007\uffc1\010\uffc1" +
    "\012\uffc1\001\002\000\010\007\uffa9\010\uffa9\012\uffa9\001" +
    "\002\000\010\007\uffb7\010\uffb7\012\uffb7\001\002\000\010" +
    "\007\uffab\010\uffab\012\uffab\001\002\000\010\007\uffc9\010" +
    "\uffc9\012\uffc9\001\002\000\010\007\uffa1\010\uffa1\012\uffa1" +
    "\001\002\000\010\007\uffd0\010\uffd0\012\uffd0\001\002\000" +
    "\010\007\uffb2\010\uffb2\012\uffb2\001\002\000\010\007\uffc2" +
    "\010\uffc2\012\uffc2\001\002\000\010\007\uffaf\010\uffaf\012" +
    "\uffaf\001\002\000\010\007\uffae\010\uffae\012\uffae\001\002" +
    "\000\006\010\uffba\012\uffba\001\002\000\010\007\uffb3\010" +
    "\uffb3\012\uffb3\001\002\000\010\007\uffd2\010\uffd2\012\uffd2" +
    "\001\002\000\010\007\uffa3\010\uffa3\012\uffa3\001\002\000" +
    "\010\007\uffc8\010\uffc8\012\uffc8\001\002\000\010\007\uffc4" +
    "\010\uffc4\012\uffc4\001\002\000\010\007\uffac\010\uffac\012" +
    "\uffac\001\002\000\010\007\uffd4\010\uffd4\012\uffd4\001\002" +
    "\000\006\010\uffce\012\uffce\001\002\000\010\007\uffb1\010" +
    "\uffb1\012\uffb1\001\002\000\010\007\uffbc\010\uffbc\012\uffbc" +
    "\001\002\000\010\007\uffbf\010\uffbf\012\uffbf\001\002\000" +
    "\006\010\uffb9\012\uffb9\001\002\000\010\007\uffc5\010\uffc5" +
    "\012\uffc5\001\002\000\010\007\uffa2\010\uffa2\012\uffa2\001" +
    "\002\000\010\007\uffcb\010\uffcb\012\uffcb\001\002\000\010" +
    "\007\uffd5\010\uffd5\012\uffd5\001\002\000\010\007\uffa4\010" +
    "\uffa4\012\uffa4\001\002\000\010\007\uffa5\010\uffa5\012\uffa5" +
    "\001\002\000\010\007\uffbe\010\uffbe\012\uffbe\001\002\000" +
    "\010\007\uffb4\010\uffb4\012\uffb4\001\002\000\006\010\uffcd" +
    "\012\uffcd\001\002\000\006\010\uffbb\012\uffbb\001\002\000" +
    "\004\062\045\001\002\000\006\010\uffee\012\uffee\001\002" +
    "\000\020\017\026\021\023\022\027\023\021\024\020\025" +
    "\024\026\017\001\002\000\004\012\ufff3\001\002\000\122" +
    "\015\114\016\071\017\064\020\101\021\031\022\066\023" +
    "\067\024\050\025\076\026\060\027\053\030\056\031\041" +
    "\032\034\033\033\034\112\035\111\036\073\037\106\040" +
    "\062\041\061\042\074\043\046\044\042\045\105\046\075" +
    "\047\047\050\065\051\055\052\044\053\103\054\113\055" +
    "\037\056\102\061\063\062\045\063\036\064\110\066\107" +
    "\067\040\001\002\000\006\010\ufff0\012\ufff0\001\002\000" +
    "\004\061\063\001\002\000\006\010\uffef\012\uffef\001\002" +
    "\000\122\015\114\016\071\017\064\020\101\021\031\022" +
    "\066\023\067\024\050\025\076\026\060\027\053\030\056" +
    "\031\041\032\034\033\033\034\112\035\111\036\073\037" +
    "\106\040\062\041\061\042\074\043\046\044\042\045\105" +
    "\046\075\047\047\050\065\051\055\052\044\053\103\054" +
    "\113\055\037\056\102\061\063\062\045\063\036\064\110" +
    "\066\107\067\040\001\002\000\006\010\ufff1\012\ufff1\001" +
    "\002\000\006\066\107\067\040\001\002\000\006\010\uffec" +
    "\012\uffec\001\002\000\004\013\134\001\002\000\006\011" +
    "\140\014\137\001\002\000\006\010\210\014\uffe7\001\002" +
    "\000\004\014\207\001\002\000\006\010\uffea\012\uffea\001" +
    "\002\000\030\021\146\027\143\030\145\031\155\032\151" +
    "\033\153\034\152\035\154\036\147\037\141\040\150\001" +
    "\002\000\004\007\205\001\002\000\006\010\203\012\uffe4" +
    "\001\002\000\004\007\201\001\002\000\004\012\200\001" +
    "\002\000\004\007\176\001\002\000\004\007\174\001\002" +
    "\000\004\007\172\001\002\000\004\007\170\001\002\000" +
    "\004\007\166\001\002\000\004\007\164\001\002\000\004" +
    "\007\162\001\002\000\004\007\160\001\002\000\004\007" +
    "\156\001\002\000\022\041\061\042\074\043\046\044\042" +
    "\045\105\046\075\047\047\050\065\001\002\000\006\010" +
    "\uffe0\012\uffe0\001\002\000\126\015\114\016\071\017\064" +
    "\020\101\021\031\022\066\023\067\024\050\025\076\026" +
    "\060\027\053\030\056\031\041\032\034\033\033\034\112" +
    "\035\111\036\073\037\106\040\062\041\061\042\074\043" +
    "\046\044\042\045\105\046\075\047\047\050\065\051\055" +
    "\052\044\053\103\054\113\055\037\056\102\057\116\060" +
    "\070\061\063\062\045\063\036\064\110\066\107\067\040" +
    "\001\002\000\006\010\uffdc\012\uffdc\001\002\000\012\051" +
    "\055\052\044\053\103\054\113\001\002\000\006\010\uffde" +
    "\012\uffde\001\002\000\006\055\037\056\102\001\002\000" +
    "\006\010\uffdd\012\uffdd\001\002\000\130\015\114\016\071" +
    "\017\064\020\101\021\031\022\066\023\067\024\050\025" +
    "\076\026\060\027\053\030\056\031\041\032\034\033\033" +
    "\034\112\035\111\036\073\037\106\040\062\041\061\042" +
    "\074\043\046\044\042\045\105\046\075\047\047\050\065" +
    "\051\055\052\044\053\103\054\113\055\037\056\102\057" +
    "\116\060\070\061\063\062\045\063\036\064\110\065\100" +
    "\066\107\067\040\001\002\000\006\010\uffdf\012\uffdf\001" +
    "\002\000\122\015\114\016\071\017\064\020\101\021\031" +
    "\022\066\023\067\024\050\025\076\026\060\027\053\030" +
    "\056\031\041\032\034\033\033\034\112\035\111\036\073" +
    "\037\106\040\062\041\061\042\074\043\046\044\042\045" +
    "\105\046\075\047\047\050\065\051\055\052\044\053\103" +
    "\054\113\055\037\056\102\061\063\062\045\063\036\064" +
    "\110\066\107\067\040\001\002\000\006\010\uffd9\012\uffd9" +
    "\001\002\000\004\063\036\001\002\000\006\010\uffdb\012" +
    "\uffdb\001\002\000\004\061\063\001\002\000\006\010\uffe3" +
    "\012\uffe3\001\002\000\004\061\063\001\002\000\006\010" +
    "\uffe1\012\uffe1\001\002\000\006\010\uffe6\014\uffe6\001\002" +
    "\000\122\015\114\016\071\017\064\020\101\021\031\022" +
    "\066\023\067\024\050\025\076\026\060\027\053\030\056" +
    "\031\041\032\034\033\033\034\112\035\111\036\073\037" +
    "\106\040\062\041\061\042\074\043\046\044\042\045\105" +
    "\046\075\047\047\050\065\051\055\052\044\053\103\054" +
    "\113\055\037\056\102\061\063\062\045\063\036\064\110" +
    "\066\107\067\040\001\002\000\006\010\uffe2\012\uffe2\001" +
    "\002\000\030\021\146\027\143\030\145\031\155\032\151" +
    "\033\153\034\152\035\154\036\147\037\141\040\150\001" +
    "\002\000\004\012\uffe5\001\002\000\004\063\036\001\002" +
    "\000\006\010\uffda\012\uffda\001\002\000\006\010\uffe9\012" +
    "\uffe9\001\002\000\004\011\140\001\002\000\004\014\uffe8" +
    "\001\002\000\004\014\214\001\002\000\004\002\ufffc\001" +
    "\002\000\004\002\uffa0\001\002\000\122\015\ufffa\016\ufffa" +
    "\017\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa\056\ufffa\061" +
    "\ufffa\062\ufffa\063\ufffa\064\ufffa\066\ufffa\067\ufffa\001\002" +
    "\000\012\015\217\016\222\017\220\020\223\001\002\000" +
    "\004\007\236\001\002\000\004\007\234\001\002\000\004" +
    "\012\212\001\002\000\004\007\231\001\002\000\004\007" +
    "\227\001\002\000\006\010\225\012\ufff8\001\002\000\012" +
    "\015\217\016\222\017\220\020\223\001\002\000\004\012" +
    "\ufff9\001\002\000\004\062\045\001\002\000\006\010\ufff4" +
    "\012\ufff4\001\002\000\122\015\114\016\071\017\064\020" +
    "\101\021\031\022\066\023\067\024\050\025\076\026\060" +
    "\027\053\030\056\031\041\032\034\033\033\034\112\035" +
    "\111\036\073\037\106\040\062\041\061\042\074\043\046" +
    "\044\042\045\105\046\075\047\047\050\065\051\055\052" +
    "\044\053\103\054\113\055\037\056\102\061\063\062\045" +
    "\063\036\064\110\066\107\067\040\001\002\000\006\010" +
    "\ufff6\012\ufff6\001\002\000\004\002\ufffd\001\002\000\004" +
    "\062\045\001\002\000\006\010\ufff5\012\ufff5\001\002\000" +
    "\122\015\114\016\071\017\064\020\101\021\031\022\066" +
    "\023\067\024\050\025\076\026\060\027\053\030\056\031" +
    "\041\032\034\033\033\034\112\035\111\036\073\037\106" +
    "\040\062\041\061\042\074\043\046\044\042\045\105\046" +
    "\075\047\047\050\065\051\055\052\044\053\103\054\113" +
    "\055\037\056\102\061\063\062\045\063\036\064\110\066" +
    "\107\067\040\001\002\000\006\010\ufff7\012\ufff7\001\002" +
    "\000\122\015\114\016\071\017\064\020\101\021\031\022" +
    "\066\023\067\024\050\025\076\026\060\027\053\030\056" +
    "\031\041\032\034\033\033\034\112\035\111\036\073\037" +
    "\106\040\062\041\061\042\074\043\046\044\042\045\105" +
    "\046\075\047\047\050\065\051\055\052\044\053\103\054" +
    "\113\055\037\056\102\061\063\062\045\063\036\064\110" +
    "\066\107\067\040\001\002\000\004\012\212\001\002\000" +
    "\006\010\246\012\uffd7\001\002\000\004\007\244\001\002" +
    "\000\130\015\114\016\071\017\064\020\101\021\031\022" +
    "\066\023\067\024\050\025\076\026\060\027\053\030\056" +
    "\031\041\032\034\033\033\034\112\035\111\036\073\037" +
    "\106\040\062\041\061\042\074\043\046\044\042\045\105" +
    "\046\075\047\047\050\065\051\055\052\044\053\103\054" +
    "\113\055\037\056\102\057\116\060\070\061\063\062\045" +
    "\063\036\064\110\065\100\066\107\067\040\001\002\000" +
    "\006\010\uffd6\012\uffd6\001\002\000\122\015\114\016\071" +
    "\017\064\020\101\021\031\022\066\023\067\024\050\025" +
    "\076\026\060\027\053\030\056\031\041\032\034\033\033" +
    "\034\112\035\111\036\073\037\106\040\062\041\061\042" +
    "\074\043\046\044\042\045\105\046\075\047\047\050\065" +
    "\051\055\052\044\053\103\054\113\055\037\056\102\061" +
    "\063\062\045\063\036\064\110\066\107\067\040\001\002" +
    "\000\004\012\uffd8\001\002\000\004\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\246\000\012\002\011\003\006\004\007\005\010\001" +
    "\001\000\004\006\237\001\001\000\004\006\215\001\001" +
    "\000\004\006\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\015\013\024\016\021\001" +
    "\001\000\004\007\212\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\023\056\024\050\025\053\026" +
    "\114\027\103\030\034\031\071\032\042\033\076\034\051" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\117\001\001\000\002\001\001\000\010\012\121" +
    "\013\024\016\021\001\001\000\002\001\001\000\024\023" +
    "\056\024\050\025\053\027\123\030\034\031\071\033\076" +
    "\034\051\035\031\001\001\000\002\001\001\000\004\033" +
    "\125\001\001\000\002\001\001\000\024\023\056\024\050" +
    "\025\053\027\127\030\034\031\071\033\076\034\051\035" +
    "\031\001\001\000\002\001\001\000\004\034\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\017\135\020" +
    "\134\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\143\022\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\156\001\001\000\002\001\001\000\026\023\056\024\050" +
    "\025\053\026\160\027\103\030\034\031\071\033\076\034" +
    "\051\035\031\001\001\000\002\001\001\000\004\024\162" +
    "\001\001\000\002\001\001\000\004\025\164\001\001\000" +
    "\002\001\001\000\030\023\056\024\050\025\053\026\114" +
    "\027\103\030\034\031\071\032\166\033\076\034\051\035" +
    "\031\001\001\000\002\001\001\000\024\023\056\024\050" +
    "\025\053\027\170\030\034\031\071\033\076\034\051\035" +
    "\031\001\001\000\002\001\001\000\004\031\172\001\001" +
    "\000\002\001\001\000\004\033\174\001\001\000\002\001" +
    "\001\000\004\033\176\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\023\056\024\050\025\053\027\201\030" +
    "\034\031\071\033\076\034\051\035\031\001\001\000\002" +
    "\001\001\000\006\021\203\022\141\001\001\000\002\001" +
    "\001\000\004\031\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\210\020\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\220\011\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\232\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\010\225\011\223\001\001\000\002\001\001\000\004" +
    "\030\227\001\001\000\002\001\001\000\024\023\056\024" +
    "\050\025\053\027\231\030\034\031\071\033\076\034\051" +
    "\035\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\234\001\001\000\002\001\001\000\024\023\056" +
    "\024\050\025\053\027\236\030\034\031\071\033\076\034" +
    "\051\035\031\001\001\000\002\001\001\000\030\014\240" +
    "\015\241\023\056\024\050\025\053\027\242\030\034\031" +
    "\071\033\076\034\051\035\031\001\001\000\004\007\247" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\023" +
    "\056\024\050\025\053\026\114\027\103\030\034\031\071" +
    "\032\244\033\076\034\051\035\031\001\001\000\002\001" +
    "\001\000\030\014\246\015\241\023\056\024\050\025\053" +
    "\027\242\030\034\031\071\033\076\034\051\035\031\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$StorageParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$StorageParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$StorageParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    private List<ErrorAnalisis> errores = new ArrayList();
    private Usuario user = new Usuario();
    private Formulario form = new Formulario();
    private Componente comp = new Componente();
    private List<DatoRecopilado> datos = new ArrayList();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public List<DatoRecopilado> getDatos() {
        return this.datos;
    }

    public Usuario getUsuario(){
        return this.user;
    }

    public Formulario getForm(){
        return this.form;
    }

    private void addComponent() {
        form.getComponentes().add(comp);
        comp = new Componente();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$StorageParser$actions {
  private final StorageParser parser;

  /** Constructor */
  CUP$StorageParser$actions(StorageParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action_part00000000(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$StorageParser$result;

      /* select the action based on the action number */
      switch (CUP$StorageParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= startUserStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)).value;
		RESULT = start_val;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$StorageParser$parser.done_parsing();
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= startFormStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= startDataStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // startUserStructure ::= INICIO_USER startStructure paramsUser endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startUserStructure",1, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // startFormStructure ::= INICIO_FORM startStructure paramsForm endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startFormStructure",2, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // startDataStructure ::= INICIO_DATOS startStructure paramsData endStructure 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startDataStructure",3, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // startStructure ::= OPEN_ROUND_BRACKET OPEN_BRACE 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("startStructure",4, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // paramsUser ::= paramUser COMMA paramsUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // paramsUser ::= paramUser 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsUser",6, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // paramUser ::= PARAM_USUARIO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // paramUser ::= PARAM_PASSWORD COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setPassword(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // paramUser ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // paramUser ::= PARAM_FECHA_MODIFICACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		user.setFechaModificacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramUser",7, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // paramsForm ::= paramForm COMMA paramsForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // paramsForm ::= paramForm 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsForm",8, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // paramForm ::= PARAM_NOMBRE_FORM COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setNombre(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // paramForm ::= PARAM_USUARIO_CREACION COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setUsuarioCreacion(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // paramForm ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // paramForm ::= PARAM_FECHA_CREACION COLON fecha 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setFechaCreacion(f.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // paramForm ::= PARAM_TITULO_FORM COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTitulo(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // paramForm ::= PARAM_TEMA COLON tema 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		form.setTema(t.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // paramForm ::= componentStruct 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramForm",9, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-3)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET components CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("componentStruct",12, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-4)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // components ::= component COMMA components 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // components ::= component 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("components",13, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // component ::= OPEN_BRACE params CLOSE_BRACE 
            {
              Object RESULT =null;
		addComponent();
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("component",14, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // params ::= param COMMA params 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // params ::= param 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("params",15, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // param ::= PARAM_ID COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setId(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // param ::= PARAM_NOMBRE_CAMPO COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNombreCampo(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // param ::= PARAM_FORMULARIO COLON id 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setFormulario(i.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // param ::= PARAM_CLASE COLON clase 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setClase(c.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // param ::= PARAM_TEXTO_VISIBLE COLON literal 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setTextoVisible(l.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // param ::= PARAM_ALINEACION COLON alineacion 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setAlineacion(a.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // param ::= PARAM_REQUERIDO COLON required 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setRequerido(r.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // param ::= PARAM_OPCIONES COLON opciones 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setOpciones(o.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // param ::= PARAM_FILAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoFilas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // param ::= PARAM_COLUMNAS COLON entero 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setNoColumnas(e.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param ::= PARAM_URL COLON value 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		comp.setUrl(v.replace("\"",""));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("param",16, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // paramsData ::= paramData COMMA paramsData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // paramsData ::= paramData 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramsData",10, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // paramData ::= value COLON literal 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		datos.add(new DatoRecopilado(n.replace("\"",""),v.replace("\"","")));
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("paramData",11, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-2)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // value ::= VALUE 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // value ::= id 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // value ::= fecha 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // value ::= entero 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // value ::= keyword 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("value",21, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // id ::= ID 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = i;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("id",25, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // fecha ::= FECHA 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = f;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("fecha",22, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // literal ::= LITERAL 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = l;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // literal ::= opciones 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("literal",24, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // entero ::= ENTERO 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = e;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("entero",23, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tema ::= DARK 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("tema",26, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tema ::= WHITE 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("tema",26, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // clase ::= CLASS_CAMPO_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // clase ::= CLASS_AREA_TEXTO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // clase ::= CLASS_CHECKBOX 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // clase ::= CLASS_RADIO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // clase ::= CLASS_FICHERO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // clase ::= CLASS_IMAGEN 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // clase ::= CLASS_COMBO 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // clase ::= CLASS_BOTON 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("clase",17, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // alineacion ::= CENTRO 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // alineacion ::= IZQUIERDA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // alineacion ::= DERECHA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // alineacion ::= JUSTIFICAR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("alineacion",18, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // required ::= SI 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT =r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("required",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // required ::= NO 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT =r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("required",19, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // opciones ::= OPCIONES 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // opciones ::= OPCIONES2 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = o;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // opciones ::= value 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = v;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("opciones",20, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // keyword ::= tema 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = t;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // keyword ::= clase 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = c;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // keyword ::= alineacion 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = a;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // keyword ::= required 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = r;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // keyword ::= PARAM_USUARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // keyword ::= PARAM_PASSWORD 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // keyword ::= PARAM_FECHA_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // keyword ::= PARAM_FECHA_MODIFICACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // keyword ::= PARAM_ID 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // keyword ::= PARAM_TITULO_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // keyword ::= PARAM_NOMBRE_FORM 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // keyword ::= PARAM_TEMA 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // keyword ::= PARAM_USUARIO_CREACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // keyword ::= PARAM_COMPONENTES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // keyword ::= PARAM_NOMBRE_CAMPO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // keyword ::= PARAM_FORMULARIO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // keyword ::= PARAM_CLASE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // keyword ::= PARAM_TEXTO_VISIBLE 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // keyword ::= PARAM_ALINEACION 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // keyword ::= PARAM_REQUERIDO 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // keyword ::= PARAM_OPCIONES 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // keyword ::= PARAM_FILAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // keyword ::= PARAM_COLUMNAS 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // keyword ::= PARAM_URL 
            {
              String RESULT =null;
		int kleft = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).left;
		int kright = ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()).right;
		String k = (String)((java_cup.runtime.Symbol) CUP$StorageParser$stack.peek()).value;
		RESULT = k;
              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("keyword",27, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // endStructure ::= CLOSE_BRACE CLOSE_ROUND_BRACKET 
            {
              Object RESULT =null;

              CUP$StorageParser$result = parser.getSymbolFactory().newSymbol("endStructure",5, ((java_cup.runtime.Symbol)CUP$StorageParser$stack.elementAt(CUP$StorageParser$top-1)), ((java_cup.runtime.Symbol)CUP$StorageParser$stack.peek()), RESULT);
            }
          return CUP$StorageParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$StorageParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$StorageParser$do_action(
    int                        CUP$StorageParser$act_num,
    java_cup.runtime.lr_parser CUP$StorageParser$parser,
    java.util.Stack            CUP$StorageParser$stack,
    int                        CUP$StorageParser$top)
    throws java.lang.Exception
    {
              return CUP$StorageParser$do_action_part00000000(
                               CUP$StorageParser$act_num,
                               CUP$StorageParser$parser,
                               CUP$StorageParser$stack,
                               CUP$StorageParser$top);
    }
}

}
