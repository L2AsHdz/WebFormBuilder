// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: storageLexer.flex

package analizadores.lexico;

import model.Token;
import java.util.ArrayList;
import java.util.List;

import java_cup.runtime.Symbol;

import static analizadores.sintactico.StorageSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class StorageLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\40\0\1\1\1\0\1\2\1\0\1\3\2\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\10\1\0\1\11"+
    "\1\12\1\13\1\14\6\15\1\16\6\0\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\25"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\25\1\36"+
    "\1\37\1\40\1\41\1\25\1\42\3\25\4\0\1\43"+
    "\1\0\1\44\1\45\1\25\1\46\1\47\1\50\1\25"+
    "\1\51\1\52\1\25\1\30\1\25\1\53\1\25\1\54"+
    "\2\25\1\55\1\56\1\57\1\60\1\25\1\61\3\25"+
    "\1\62\1\0\1\63\54\0\1\25\12\0\1\25\4\0"+
    "\1\25\5\0\27\25\1\0\37\25\1\0\u01ca\25\4\0"+
    "\14\25\16\0\5\25\7\0\1\25\1\0\1\25\21\0"+
    "\165\25\1\0\2\25\2\0\4\25\1\0\1\25\6\0"+
    "\1\25\1\0\3\25\1\0\1\25\1\0\24\25\1\0"+
    "\123\25\1\0\213\25\1\0\255\25\1\0\46\25\2\0"+
    "\1\25\6\0\51\25\10\0\55\25\1\0\1\25\1\0"+
    "\2\25\1\0\2\25\1\0\1\25\10\0\33\25\4\0"+
    "\4\25\35\0\13\25\5\0\100\25\12\64\4\0\146\25"+
    "\1\0\10\25\2\0\12\25\1\0\6\25\12\64\3\25"+
    "\2\0\1\25\20\0\73\25\2\0\145\25\16\0\12\64"+
    "\54\25\4\0\1\25\2\0\1\25\2\0\56\25\22\0"+
    "\34\25\4\0\13\25\65\0\25\25\1\0\10\25\25\0"+
    "\17\25\1\0\201\25\2\0\12\64\1\0\23\25\1\0"+
    "\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\1\25\3\0\4\25\2\0\11\25\2\0\2\25\2\0"+
    "\4\25\10\0\1\25\4\0\2\25\1\0\5\25\2\0"+
    "\12\64\2\25\12\0\1\25\1\0\1\25\2\0\3\25"+
    "\1\0\6\25\4\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\2\25\1\0\2\25\2\0\1\25"+
    "\1\0\5\25\4\0\2\25\2\0\3\25\3\0\1\25"+
    "\7\0\4\25\1\0\1\25\7\0\12\64\6\25\13\0"+
    "\3\25\1\0\11\25\1\0\3\25\1\0\26\25\1\0"+
    "\7\25\1\0\2\25\1\0\5\25\2\0\12\25\1\0"+
    "\3\25\1\0\3\25\2\0\1\25\17\0\4\25\2\0"+
    "\12\64\11\0\7\25\1\0\3\25\1\0\10\25\2\0"+
    "\2\25\2\0\26\25\1\0\7\25\1\0\2\25\1\0"+
    "\5\25\2\0\11\25\2\0\2\25\2\0\3\25\10\0"+
    "\2\25\4\0\2\25\1\0\5\25\2\0\12\64\1\0"+
    "\1\25\20\0\2\25\1\0\6\25\3\0\3\25\1\0"+
    "\4\25\3\0\2\25\1\0\1\25\1\0\2\25\3\0"+
    "\2\25\3\0\3\25\3\0\14\25\4\0\5\25\3\0"+
    "\3\25\1\0\4\25\2\0\1\25\6\0\1\25\16\0"+
    "\12\64\20\0\15\25\1\0\3\25\1\0\27\25\1\0"+
    "\20\25\3\0\10\25\1\0\3\25\1\0\4\25\7\0"+
    "\2\25\1\0\3\25\5\0\4\25\2\0\12\64\20\0"+
    "\4\25\1\0\10\25\1\0\3\25\1\0\27\25\1\0"+
    "\12\25\1\0\5\25\2\0\11\25\1\0\3\25\1\0"+
    "\4\25\7\0\2\25\7\0\1\25\1\0\4\25\2\0"+
    "\12\64\1\0\2\25\15\0\4\25\1\0\10\25\1\0"+
    "\3\25\1\0\63\25\1\0\3\25\1\0\5\25\5\0"+
    "\4\25\7\0\5\25\2\0\12\64\12\0\6\25\2\0"+
    "\2\25\1\0\22\25\3\0\30\25\1\0\11\25\1\0"+
    "\1\25\2\0\7\25\3\0\1\25\4\0\6\25\1\0"+
    "\1\25\1\0\10\25\6\0\12\64\2\0\2\25\15\0"+
    "\72\25\5\0\17\25\1\0\12\64\47\0\2\25\1\0"+
    "\1\25\1\0\5\25\1\0\30\25\1\0\1\25\1\0"+
    "\27\25\2\0\5\25\1\0\1\25\1\0\6\25\2\0"+
    "\12\64\2\0\4\25\40\0\1\25\27\0\2\25\6\0"+
    "\12\64\13\0\1\25\1\0\1\25\1\0\1\25\4\0"+
    "\12\25\1\0\44\25\4\0\24\25\1\0\22\25\1\0"+
    "\44\25\11\0\1\25\71\0\100\25\12\64\6\0\100\25"+
    "\12\64\4\25\2\0\46\25\1\0\1\25\5\0\1\25"+
    "\2\0\53\25\1\0\115\25\1\0\4\25\2\0\7\25"+
    "\1\0\1\25\1\0\4\25\2\0\51\25\1\0\4\25"+
    "\2\0\41\25\1\0\4\25\2\0\7\25\1\0\1\25"+
    "\1\0\4\25\2\0\17\25\1\0\71\25\1\0\4\25"+
    "\2\0\103\25\2\0\3\25\40\0\20\25\20\0\126\25"+
    "\2\0\6\25\3\0\u016c\25\2\0\21\25\1\0\32\25"+
    "\5\0\113\25\3\0\13\25\7\0\15\25\1\0\7\25"+
    "\13\0\25\25\13\0\24\25\14\0\15\25\1\0\3\25"+
    "\1\0\2\25\14\0\124\25\3\0\1\25\4\0\2\25"+
    "\2\0\12\64\41\0\3\25\2\0\12\64\6\0\131\25"+
    "\7\0\53\25\5\0\106\25\12\0\37\25\1\0\14\25"+
    "\4\0\14\25\12\0\12\64\36\25\2\0\5\25\13\0"+
    "\54\25\4\0\32\25\6\0\12\64\46\0\34\25\4\0"+
    "\77\25\1\0\35\25\2\0\1\25\12\64\6\0\12\64"+
    "\15\0\1\25\10\0\17\25\101\0\114\25\4\0\12\64"+
    "\21\0\11\25\14\0\60\25\12\64\72\25\14\0\70\25"+
    "\10\0\12\64\3\0\3\25\12\64\44\25\2\0\11\25"+
    "\7\0\53\25\2\0\3\25\20\0\3\25\1\0\47\25"+
    "\5\0\372\25\1\0\33\25\2\0\6\25\2\0\46\25"+
    "\2\0\6\25\2\0\10\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\37\25\2\0\65\25\1\0\7\25"+
    "\1\0\1\25\3\0\3\25\1\0\7\25\3\0\4\25"+
    "\2\0\6\25\4\0\15\25\5\0\3\25\1\0\7\25"+
    "\102\0\2\25\23\0\1\25\34\0\1\25\15\0\1\25"+
    "\20\0\15\25\63\0\41\25\21\0\1\25\4\0\1\25"+
    "\2\0\12\25\1\0\1\25\3\0\5\25\6\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\4\25\1\0\13\25"+
    "\2\0\4\25\5\0\5\25\4\0\1\25\21\0\51\25"+
    "\u022d\0\64\25\26\0\57\25\1\0\57\25\1\0\205\25"+
    "\6\0\11\25\14\0\46\25\1\0\1\25\5\0\1\25"+
    "\2\0\70\25\7\0\1\25\17\0\30\25\11\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\7\25"+
    "\1\0\7\25\1\0\7\25\1\0\7\25\1\0\40\25"+
    "\57\0\1\25\325\0\3\25\31\0\17\25\1\0\5\25"+
    "\2\0\5\25\4\0\126\25\2\0\2\25\2\0\3\25"+
    "\1\0\132\25\1\0\4\25\5\0\53\25\1\0\136\25"+
    "\21\0\33\25\65\0\306\25\112\0\360\25\20\0\215\25"+
    "\103\0\56\25\2\0\15\25\3\0\20\25\12\64\2\25"+
    "\24\0\63\25\1\0\12\25\1\0\163\25\45\0\11\25"+
    "\2\0\147\25\2\0\65\25\2\0\5\25\60\0\61\25"+
    "\30\0\64\25\14\0\106\25\12\0\12\64\6\0\30\25"+
    "\3\0\1\25\1\0\3\25\12\64\44\25\2\0\44\25"+
    "\14\0\35\25\3\0\101\25\16\0\1\25\12\64\6\0"+
    "\20\25\12\64\5\25\1\0\67\25\11\0\16\25\2\0"+
    "\12\64\6\0\27\25\3\0\111\25\30\0\3\25\2\0"+
    "\20\25\2\0\5\25\12\0\6\25\2\0\6\25\2\0"+
    "\6\25\11\0\7\25\1\0\7\25\1\0\53\25\1\0"+
    "\14\25\10\0\173\25\1\0\2\25\2\0\12\64\6\0"+
    "\244\25\14\0\27\25\4\0\61\25\4\0\156\25\2\0"+
    "\152\25\46\0\7\25\14\0\5\25\5\0\14\25\1\0"+
    "\15\25\1\0\5\25\1\0\1\25\1\0\2\25\1\0"+
    "\2\25\1\0\154\25\41\0\153\25\22\0\100\25\2\0"+
    "\66\25\50\0\14\25\4\0\20\25\20\0\20\25\3\0"+
    "\2\25\30\0\3\25\40\0\5\25\1\0\207\25\23\0"+
    "\12\64\7\0\32\25\4\0\1\25\1\0\32\25\13\0"+
    "\131\25\3\0\6\25\2\0\6\25\2\0\6\25\2\0"+
    "\3\25\43\0\14\25\1\0\32\25\1\0\23\25\1\0"+
    "\2\25\1\0\17\25\2\0\16\25\42\0\173\25\105\0"+
    "\65\25\210\0\1\25\202\0\35\25\3\0\61\25\17\0"+
    "\1\25\37\0\40\25\15\0\36\25\5\0\53\25\5\0"+
    "\36\25\2\0\44\25\4\0\10\25\1\0\5\25\52\0"+
    "\236\25\2\0\12\64\6\0\44\25\4\0\44\25\4\0"+
    "\50\25\10\0\64\25\234\0\67\25\11\0\26\25\12\0"+
    "\10\25\230\0\6\25\2\0\1\25\1\0\54\25\1\0"+
    "\2\25\3\0\1\25\2\0\27\25\12\0\27\25\11\0"+
    "\37\25\101\0\23\25\1\0\2\25\12\0\26\25\12\0"+
    "\32\25\106\0\70\25\6\0\2\25\100\0\4\25\1\0"+
    "\2\25\5\0\10\25\1\0\3\25\1\0\35\25\2\0"+
    "\3\25\4\0\1\25\40\0\35\25\3\0\35\25\43\0"+
    "\10\25\1\0\36\25\31\0\66\25\12\0\26\25\12\0"+
    "\23\25\15\0\22\25\156\0\111\25\67\0\63\25\15\0"+
    "\63\25\15\0\50\25\10\0\12\64\306\0\35\25\12\0"+
    "\1\25\10\0\41\25\217\0\27\25\11\0\107\25\37\0"+
    "\12\64\17\0\74\25\25\0\31\25\7\0\12\64\6\0"+
    "\65\25\1\0\12\64\4\0\3\25\11\0\44\25\2\0"+
    "\1\25\11\0\105\25\4\0\4\25\3\0\12\64\1\25"+
    "\1\0\1\25\43\0\22\25\1\0\45\25\6\0\1\25"+
    "\101\0\7\25\1\0\1\25\1\0\4\25\1\0\17\25"+
    "\1\0\12\25\7\0\73\25\5\0\12\64\6\0\4\25"+
    "\1\0\10\25\2\0\2\25\2\0\26\25\1\0\7\25"+
    "\1\0\2\25\1\0\5\25\1\0\12\25\2\0\2\25"+
    "\2\0\3\25\2\0\1\25\6\0\1\25\5\0\7\25"+
    "\2\0\7\25\3\0\5\25\213\0\113\25\5\0\12\64"+
    "\4\0\2\25\40\0\106\25\1\0\1\25\10\0\12\64"+
    "\246\0\66\25\2\0\11\25\27\0\6\25\42\0\101\25"+
    "\3\0\1\25\13\0\12\64\46\0\71\25\7\0\12\64"+
    "\66\0\33\25\2\0\17\25\4\0\12\64\306\0\73\25"+
    "\145\0\100\25\12\64\25\0\1\25\240\0\10\25\2\0"+
    "\56\25\2\0\10\25\1\0\2\25\33\0\77\25\10\0"+
    "\1\25\10\0\112\25\3\0\1\25\42\0\71\25\7\0"+
    "\11\25\1\0\55\25\1\0\11\25\17\0\12\64\30\0"+
    "\36\25\2\0\26\25\1\0\16\25\111\0\7\25\1\0"+
    "\2\25\1\0\54\25\3\0\1\25\1\0\2\25\1\0"+
    "\11\25\10\0\12\64\6\0\6\25\1\0\2\25\1\0"+
    "\45\25\1\0\2\25\1\0\6\25\7\0\12\64\u0136\0"+
    "\27\25\11\0\232\25\146\0\157\25\21\0\304\25\274\0"+
    "\57\25\321\0\107\25\271\0\71\25\7\0\37\25\1\0"+
    "\12\64\146\0\36\25\2\0\5\25\13\0\67\25\11\0"+
    "\4\25\14\0\12\64\11\0\25\25\5\0\23\25\260\0"+
    "\100\25\200\0\113\25\4\0\71\25\7\0\21\25\100\0"+
    "\2\25\1\0\1\25\34\0\370\25\10\0\363\25\15\0"+
    "\37\25\61\0\3\25\21\0\4\25\10\0\u018c\25\4\0"+
    "\153\25\5\0\15\25\3\0\11\25\7\0\12\25\3\0"+
    "\2\25\306\0\5\25\3\0\6\25\10\0\10\25\2\0"+
    "\7\25\36\0\4\25\224\0\3\25\273\0\125\25\1\0"+
    "\107\25\1\0\2\25\2\0\1\25\2\0\2\25\2\0"+
    "\4\25\1\0\14\25\1\0\1\25\1\0\7\25\1\0"+
    "\101\25\1\0\4\25\2\0\10\25\1\0\7\25\1\0"+
    "\34\25\1\0\4\25\1\0\5\25\1\0\1\25\3\0"+
    "\7\25\1\0\u0154\25\2\0\31\25\1\0\31\25\1\0"+
    "\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0"+
    "\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0"+
    "\10\25\2\0\62\64\67\25\4\0\62\25\10\0\1\25"+
    "\16\0\1\25\26\0\5\25\1\0\17\25\120\0\7\25"+
    "\1\0\21\25\2\0\7\25\1\0\2\25\1\0\5\25"+
    "\325\0\55\25\3\0\16\25\2\0\12\64\4\0\1\25"+
    "\u0171\0\60\25\12\64\6\0\305\25\13\0\7\25\51\0"+
    "\114\25\4\0\12\64\246\0\4\25\1\0\33\25\1\0"+
    "\2\25\1\0\1\25\2\0\1\25\1\0\12\25\1\0"+
    "\4\25\1\0\1\25\1\0\1\25\6\0\1\25\4\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\3\25\1\0"+
    "\2\25\1\0\1\25\2\0\1\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\1\25\1\0\2\25\1\0"+
    "\1\25\2\0\4\25\1\0\7\25\1\0\4\25\1\0"+
    "\4\25\1\0\1\25\1\0\12\25\1\0\21\25\5\0"+
    "\3\25\1\0\5\25\1\0\21\25\164\0\32\25\6\0"+
    "\32\25\6\0\32\25\166\0\327\25\51\0\65\25\13\0"+
    "\336\25\2\0\u0182\25\16\0\u0131\25\37\0\36\25\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\4\1\0\1\5\1\6"+
    "\1\7\2\0\1\10\15\0\1\11\1\12\1\13\20\0"+
    "\1\14\26\0\1\15\3\0\1\16\15\0\1\17\1\20"+
    "\1\21\2\0\1\22\1\0\1\23\7\0\1\24\1\0"+
    "\1\25\1\0\1\26\13\0\1\27\2\0\1\30";

  private static int [] zzUnpackAction() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\152\0\152\0\152\0\237\0\152"+
    "\0\152\0\152\0\324\0\u0109\0\152\0\u013e\0\u0173\0\u01a8"+
    "\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6\0\u031b\0\u0350"+
    "\0\u0385\0\u03ba\0\152\0\152\0\152\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\u05cc\0\u0601"+
    "\0\u0636\0\u066b\0\u06a0\0\u06d5\0\u070a\0\152\0\u073f\0\u0774"+
    "\0\u07a9\0\u07de\0\u0813\0\u0848\0\u087d\0\u08b2\0\u08e7\0\u091c"+
    "\0\u0951\0\u0986\0\u09bb\0\u09f0\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4"+
    "\0\u0af9\0\u0b2e\0\u0b63\0\u0b98\0\152\0\u0bcd\0\u0c02\0\u0c37"+
    "\0\152\0\u0c6c\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa"+
    "\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3\0\u0ee8\0\152\0\152"+
    "\0\152\0\u0f1d\0\u0f52\0\152\0\u0f87\0\152\0\u0fbc\0\u0ff1"+
    "\0\u1026\0\u105b\0\u1090\0\u10c5\0\u10fa\0\152\0\u112f\0\152"+
    "\0\u1164\0\152\0\u1199\0\u11ce\0\u1203\0\u1238\0\u126d\0\u12a2"+
    "\0\u12d7\0\u130c\0\u1341\0\u1376\0\u13ab\0\152\0\u13e0\0\u1415"+
    "\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\2\0\1\2\1\0\1\3\1\4\1\5\7\0\1\6"+
    "\27\0\1\7\7\0\1\10\3\0\1\11\1\12\1\0"+
    "\1\13\1\14\1\15\1\16\3\13\1\16\1\13\1\17"+
    "\4\20\4\13\1\21\1\13\1\22\2\13\1\23\3\13"+
    "\1\24\1\13\1\25\2\13\1\26\1\27\1\30\1\16"+
    "\2\13\1\21\12\13\1\30\2\13\1\31\132\0\1\32"+
    "\17\0\1\13\1\14\1\15\62\13\2\14\1\33\62\14"+
    "\1\13\1\14\1\34\1\16\3\13\1\16\1\13\5\16"+
    "\1\13\43\16\2\13\1\16\1\13\1\14\1\35\6\13"+
    "\5\36\46\13\1\36\1\13\1\14\1\35\6\13\5\37"+
    "\46\13\1\36\1\13\1\14\1\15\14\13\1\40\24\13"+
    "\1\40\21\13\1\14\1\15\20\13\1\41\42\13\1\14"+
    "\1\15\17\13\1\42\43\13\1\14\1\15\31\13\1\43"+
    "\31\13\1\14\1\15\14\13\1\44\46\13\1\14\1\15"+
    "\20\13\1\45\3\13\1\46\36\13\1\14\1\15\34\13"+
    "\1\47\26\13\1\14\1\15\23\13\1\50\22\13\1\50"+
    "\14\13\1\14\1\15\6\13\5\36\46\13\1\36\10\0"+
    "\1\51\54\0\1\13\1\14\1\15\6\13\5\52\46\13"+
    "\1\52\1\13\1\14\1\35\6\13\5\53\46\13\1\52"+
    "\1\13\1\14\1\15\33\13\1\54\16\13\1\54\10\13"+
    "\1\14\1\15\16\13\1\55\44\13\1\14\1\56\63\13"+
    "\1\14\1\15\27\13\1\57\33\13\1\14\1\15\34\13"+
    "\1\60\26\13\1\14\1\15\27\13\1\61\33\13\1\14"+
    "\1\15\35\13\1\62\25\13\1\14\1\15\36\13\1\63"+
    "\24\13\1\14\1\15\24\13\1\64\22\13\1\64\12\13"+
    "\50\0\1\65\7\0\1\66\4\0\1\13\1\14\1\15"+
    "\6\13\5\67\46\13\1\67\1\13\1\14\1\35\6\13"+
    "\5\70\46\13\1\67\1\13\1\14\1\15\25\13\1\71"+
    "\35\13\1\14\1\15\23\13\1\72\37\13\1\14\1\15"+
    "\15\13\1\73\45\13\1\14\1\15\34\13\1\74\26\13"+
    "\1\14\1\15\14\13\1\75\46\13\1\14\1\15\36\13"+
    "\1\76\24\13\1\14\1\15\14\13\1\77\46\13\1\14"+
    "\1\15\35\13\1\100\16\13\1\100\5\13\54\0\1\101"+
    "\66\0\1\102\6\0\1\13\1\14\1\15\4\13\1\103"+
    "\56\13\1\14\1\35\4\13\1\103\1\13\5\104\50\13"+
    "\1\14\1\105\63\13\1\14\1\15\14\13\1\106\46\13"+
    "\1\14\1\15\33\13\1\107\27\13\1\14\1\15\37\13"+
    "\1\110\23\13\1\14\1\111\63\13\1\14\1\15\26\13"+
    "\1\112\34\13\1\14\1\15\33\13\1\113\27\13\1\14"+
    "\1\15\20\13\1\114\23\13\1\114\15\13\55\0\1\115"+
    "\56\0\1\116\15\0\1\13\1\14\1\15\6\13\1\117"+
    "\1\120\3\121\50\13\1\14\1\35\6\13\5\104\50\13"+
    "\1\14\1\15\40\13\1\122\22\13\1\14\1\15\20\13"+
    "\1\123\42\13\1\14\1\15\31\13\1\124\31\13\1\14"+
    "\1\15\31\13\1\125\31\13\1\14\1\15\24\13\1\126"+
    "\36\13\1\14\1\127\62\13\53\0\1\130\66\0\1\131"+
    "\7\0\1\13\1\14\1\15\7\13\4\121\50\13\1\14"+
    "\1\15\4\13\1\132\1\13\3\121\52\13\1\14\1\15"+
    "\4\13\1\132\56\13\1\14\1\15\16\13\1\133\44\13"+
    "\1\14\1\134\63\13\1\14\1\15\33\13\1\135\27\13"+
    "\1\14\1\136\63\13\1\14\1\15\31\13\1\137\31\13"+
    "\1\14\1\15\6\13\1\140\2\141\1\142\1\143\50\13"+
    "\1\14\1\15\33\13\1\144\27\13\1\14\1\15\17\13"+
    "\1\145\43\13\1\14\1\146\40\13\1\147\22\13\1\14"+
    "\1\15\7\13\4\143\50\13\1\14\1\150\6\13\5\143"+
    "\50\13\1\14\1\150\6\13\2\143\53\13\1\14\1\150"+
    "\63\13\1\14\1\15\20\13\1\151\42\13\1\14\1\152"+
    "\63\13\1\14\1\15\16\13\1\153\44\13\1\14\1\15"+
    "\14\13\1\154\46\13\1\14\1\15\33\13\1\155\27\13"+
    "\1\14\1\15\16\13\1\156\44\13\1\14\1\15\20\13"+
    "\1\157\42\13\1\14\1\15\24\13\1\160\36\13\1\14"+
    "\1\15\14\13\1\161\46\13\1\14\1\15\31\13\1\162"+
    "\31\13\1\14\1\15\16\13\1\163\44\13\1\14\1\15"+
    "\30\13\1\164\32\13\1\14\1\15\24\13\1\165\36\13"+
    "\1\14\1\166\63\13\1\14\1\15\31\13\1\167\31\13"+
    "\1\14\1\15\30\13\1\170\32\13\1\14\1\171\62\13";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5194];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\4\11\1\0\3\11\2\0\1\11\15\0\3\11"+
    "\20\0\1\11\26\0\1\11\3\0\1\11\15\0\3\11"+
    "\2\0\1\11\1\0\1\11\7\0\1\11\1\0\1\11"+
    "\1\0\1\11\13\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[121];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, new Token(yyline, yycolumn, yytext()));
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StorageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new Symbol(EOF, new Token(yyline, yycolumn, "Fin de linea"));
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 25: break;
          case 2:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 26: break;
          case 3:
            { return symbol(COMMA);
            }
            // fall through
          case 27: break;
          case 4:
            { return symbol(COLON);
            }
            // fall through
          case 28: break;
          case 5:
            { /*Ignorar*/
            }
            // fall through
          case 29: break;
          case 6:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 30: break;
          case 7:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 31: break;
          case 8:
            { return symbol(VALUE);
            }
            // fall through
          case 32: break;
          case 9:
            { return symbol(LITERAL);
            }
            // fall through
          case 33: break;
          case 10:
            { return symbol(ID);
            }
            // fall through
          case 34: break;
          case 11:
            { return symbol(ENTERO);
            }
            // fall through
          case 35: break;
          case 12:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 36: break;
          case 13:
            { return symbol(DARK);
            }
            // fall through
          case 37: break;
          case 14:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 38: break;
          case 15:
            { return symbol(WHITE);
            }
            // fall through
          case 39: break;
          case 16:
            { return symbol(INICIO_FORM);
            }
            // fall through
          case 40: break;
          case 17:
            { return symbol(INICIO_USER);
            }
            // fall through
          case 41: break;
          case 18:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 42: break;
          case 19:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 43: break;
          case 20:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 44: break;
          case 21:
            { return symbol(FECHA);
            }
            // fall through
          case 45: break;
          case 22:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 46: break;
          case 23:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 47: break;
          case 24:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
