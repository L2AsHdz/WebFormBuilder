// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: storageLexer.flex

package analizadores.lexico;

import java_cup.runtime.Symbol;
import static analizadores.sintactico.StorageSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class StorageLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\0\1\6\2\0\1\7\1\10\1\11"+
    "\2\0\1\12\1\13\1\14\1\0\1\15\1\16\1\17"+
    "\1\20\6\21\1\22\6\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\31\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\47\1\50\1\51\2\31\4\0\1\52\1\0"+
    "\1\53\1\54\1\31\1\55\1\56\1\57\1\31\1\60"+
    "\1\61\1\31\1\34\1\31\1\62\1\31\1\63\2\31"+
    "\1\64\1\65\1\66\1\67\1\31\1\70\3\31\1\71"+
    "\1\0\1\72\54\0\1\31\12\0\1\31\4\0\1\31"+
    "\5\0\27\31\1\0\37\31\1\0\u01ca\31\4\0\14\31"+
    "\16\0\5\31\7\0\1\31\1\0\1\31\21\0\165\31"+
    "\1\0\2\31\2\0\4\31\1\0\1\31\6\0\1\31"+
    "\1\0\3\31\1\0\1\31\1\0\24\31\1\0\123\31"+
    "\1\0\213\31\1\0\255\31\1\0\46\31\2\0\1\31"+
    "\6\0\51\31\10\0\55\31\1\0\1\31\1\0\2\31"+
    "\1\0\2\31\1\0\1\31\10\0\33\31\4\0\4\31"+
    "\35\0\13\31\5\0\100\31\12\73\4\0\146\31\1\0"+
    "\10\31\2\0\12\31\1\0\6\31\12\73\3\31\2\0"+
    "\1\31\20\0\73\31\2\0\145\31\16\0\12\73\54\31"+
    "\4\0\1\31\2\0\1\31\2\0\56\31\22\0\34\31"+
    "\4\0\13\31\65\0\25\31\1\0\10\31\25\0\17\31"+
    "\1\0\201\31\2\0\12\73\1\0\23\31\1\0\10\31"+
    "\2\0\2\31\2\0\26\31\1\0\7\31\1\0\1\31"+
    "\3\0\4\31\2\0\11\31\2\0\2\31\2\0\4\31"+
    "\10\0\1\31\4\0\2\31\1\0\5\31\2\0\12\73"+
    "\2\31\12\0\1\31\1\0\1\31\2\0\3\31\1\0"+
    "\6\31\4\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\2\31\1\0\2\31\2\0\1\31\1\0"+
    "\5\31\4\0\2\31\2\0\3\31\3\0\1\31\7\0"+
    "\4\31\1\0\1\31\7\0\12\73\6\31\13\0\3\31"+
    "\1\0\11\31\1\0\3\31\1\0\26\31\1\0\7\31"+
    "\1\0\2\31\1\0\5\31\2\0\12\31\1\0\3\31"+
    "\1\0\3\31\2\0\1\31\17\0\4\31\2\0\12\73"+
    "\11\0\7\31\1\0\3\31\1\0\10\31\2\0\2\31"+
    "\2\0\26\31\1\0\7\31\1\0\2\31\1\0\5\31"+
    "\2\0\11\31\2\0\2\31\2\0\3\31\10\0\2\31"+
    "\4\0\2\31\1\0\5\31\2\0\12\73\1\0\1\31"+
    "\20\0\2\31\1\0\6\31\3\0\3\31\1\0\4\31"+
    "\3\0\2\31\1\0\1\31\1\0\2\31\3\0\2\31"+
    "\3\0\3\31\3\0\14\31\4\0\5\31\3\0\3\31"+
    "\1\0\4\31\2\0\1\31\6\0\1\31\16\0\12\73"+
    "\20\0\15\31\1\0\3\31\1\0\27\31\1\0\20\31"+
    "\3\0\10\31\1\0\3\31\1\0\4\31\7\0\2\31"+
    "\1\0\3\31\5\0\4\31\2\0\12\73\20\0\4\31"+
    "\1\0\10\31\1\0\3\31\1\0\27\31\1\0\12\31"+
    "\1\0\5\31\2\0\11\31\1\0\3\31\1\0\4\31"+
    "\7\0\2\31\7\0\1\31\1\0\4\31\2\0\12\73"+
    "\1\0\2\31\15\0\4\31\1\0\10\31\1\0\3\31"+
    "\1\0\63\31\1\0\3\31\1\0\5\31\5\0\4\31"+
    "\7\0\5\31\2\0\12\73\12\0\6\31\2\0\2\31"+
    "\1\0\22\31\3\0\30\31\1\0\11\31\1\0\1\31"+
    "\2\0\7\31\3\0\1\31\4\0\6\31\1\0\1\31"+
    "\1\0\10\31\6\0\12\73\2\0\2\31\15\0\72\31"+
    "\5\0\17\31\1\0\12\73\47\0\2\31\1\0\1\31"+
    "\1\0\5\31\1\0\30\31\1\0\1\31\1\0\27\31"+
    "\2\0\5\31\1\0\1\31\1\0\6\31\2\0\12\73"+
    "\2\0\4\31\40\0\1\31\27\0\2\31\6\0\12\73"+
    "\13\0\1\31\1\0\1\31\1\0\1\31\4\0\12\31"+
    "\1\0\44\31\4\0\24\31\1\0\22\31\1\0\44\31"+
    "\11\0\1\31\71\0\100\31\12\73\6\0\100\31\12\73"+
    "\4\31\2\0\46\31\1\0\1\31\5\0\1\31\2\0"+
    "\53\31\1\0\115\31\1\0\4\31\2\0\7\31\1\0"+
    "\1\31\1\0\4\31\2\0\51\31\1\0\4\31\2\0"+
    "\41\31\1\0\4\31\2\0\7\31\1\0\1\31\1\0"+
    "\4\31\2\0\17\31\1\0\71\31\1\0\4\31\2\0"+
    "\103\31\2\0\3\31\40\0\20\31\20\0\126\31\2\0"+
    "\6\31\3\0\u016c\31\2\0\21\31\1\0\32\31\5\0"+
    "\113\31\3\0\13\31\7\0\15\31\1\0\7\31\13\0"+
    "\25\31\13\0\24\31\14\0\15\31\1\0\3\31\1\0"+
    "\2\31\14\0\124\31\3\0\1\31\4\0\2\31\2\0"+
    "\12\73\41\0\3\31\2\0\12\73\6\0\131\31\7\0"+
    "\53\31\5\0\106\31\12\0\37\31\1\0\14\31\4\0"+
    "\14\31\12\0\12\73\36\31\2\0\5\31\13\0\54\31"+
    "\4\0\32\31\6\0\12\73\46\0\34\31\4\0\77\31"+
    "\1\0\35\31\2\0\1\31\12\73\6\0\12\73\15\0"+
    "\1\31\10\0\17\31\101\0\114\31\4\0\12\73\21\0"+
    "\11\31\14\0\60\31\12\73\72\31\14\0\70\31\10\0"+
    "\12\73\3\0\3\31\12\73\44\31\2\0\11\31\7\0"+
    "\53\31\2\0\3\31\20\0\3\31\1\0\47\31\5\0"+
    "\372\31\1\0\33\31\2\0\6\31\2\0\46\31\2\0"+
    "\6\31\2\0\10\31\1\0\1\31\1\0\1\31\1\0"+
    "\1\31\1\0\37\31\2\0\65\31\1\0\7\31\1\0"+
    "\1\31\3\0\3\31\1\0\7\31\3\0\4\31\2\0"+
    "\6\31\4\0\15\31\5\0\3\31\1\0\7\31\102\0"+
    "\2\31\23\0\1\31\34\0\1\31\15\0\1\31\20\0"+
    "\15\31\63\0\41\31\21\0\1\31\4\0\1\31\2\0"+
    "\12\31\1\0\1\31\3\0\5\31\6\0\1\31\1\0"+
    "\1\31\1\0\1\31\1\0\4\31\1\0\13\31\2\0"+
    "\4\31\5\0\5\31\4\0\1\31\21\0\51\31\u022d\0"+
    "\64\31\26\0\57\31\1\0\57\31\1\0\205\31\6\0"+
    "\11\31\14\0\46\31\1\0\1\31\5\0\1\31\2\0"+
    "\70\31\7\0\1\31\17\0\30\31\11\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\7\31\1\0"+
    "\7\31\1\0\7\31\1\0\7\31\1\0\40\31\57\0"+
    "\1\31\325\0\3\31\31\0\17\31\1\0\5\31\2\0"+
    "\5\31\4\0\126\31\2\0\2\31\2\0\3\31\1\0"+
    "\132\31\1\0\4\31\5\0\53\31\1\0\136\31\21\0"+
    "\33\31\65\0\306\31\112\0\360\31\20\0\215\31\103\0"+
    "\56\31\2\0\15\31\3\0\20\31\12\73\2\31\24\0"+
    "\63\31\1\0\12\31\1\0\163\31\45\0\11\31\2\0"+
    "\147\31\2\0\65\31\2\0\5\31\60\0\61\31\30\0"+
    "\64\31\14\0\106\31\12\0\12\73\6\0\30\31\3\0"+
    "\1\31\1\0\3\31\12\73\44\31\2\0\44\31\14\0"+
    "\35\31\3\0\101\31\16\0\1\31\12\73\6\0\20\31"+
    "\12\73\5\31\1\0\67\31\11\0\16\31\2\0\12\73"+
    "\6\0\27\31\3\0\111\31\30\0\3\31\2\0\20\31"+
    "\2\0\5\31\12\0\6\31\2\0\6\31\2\0\6\31"+
    "\11\0\7\31\1\0\7\31\1\0\53\31\1\0\14\31"+
    "\10\0\173\31\1\0\2\31\2\0\12\73\6\0\244\31"+
    "\14\0\27\31\4\0\61\31\4\0\156\31\2\0\152\31"+
    "\46\0\7\31\14\0\5\31\5\0\14\31\1\0\15\31"+
    "\1\0\5\31\1\0\1\31\1\0\2\31\1\0\2\31"+
    "\1\0\154\31\41\0\153\31\22\0\100\31\2\0\66\31"+
    "\50\0\14\31\4\0\20\31\20\0\20\31\3\0\2\31"+
    "\30\0\3\31\40\0\5\31\1\0\207\31\23\0\12\73"+
    "\7\0\32\31\4\0\1\31\1\0\32\31\13\0\131\31"+
    "\3\0\6\31\2\0\6\31\2\0\6\31\2\0\3\31"+
    "\43\0\14\31\1\0\32\31\1\0\23\31\1\0\2\31"+
    "\1\0\17\31\2\0\16\31\42\0\173\31\105\0\65\31"+
    "\210\0\1\31\202\0\35\31\3\0\61\31\17\0\1\31"+
    "\37\0\40\31\15\0\36\31\5\0\53\31\5\0\36\31"+
    "\2\0\44\31\4\0\10\31\1\0\5\31\52\0\236\31"+
    "\2\0\12\73\6\0\44\31\4\0\44\31\4\0\50\31"+
    "\10\0\64\31\234\0\67\31\11\0\26\31\12\0\10\31"+
    "\230\0\6\31\2\0\1\31\1\0\54\31\1\0\2\31"+
    "\3\0\1\31\2\0\27\31\12\0\27\31\11\0\37\31"+
    "\101\0\23\31\1\0\2\31\12\0\26\31\12\0\32\31"+
    "\106\0\70\31\6\0\2\31\100\0\4\31\1\0\2\31"+
    "\5\0\10\31\1\0\3\31\1\0\35\31\2\0\3\31"+
    "\4\0\1\31\40\0\35\31\3\0\35\31\43\0\10\31"+
    "\1\0\36\31\31\0\66\31\12\0\26\31\12\0\23\31"+
    "\15\0\22\31\156\0\111\31\67\0\63\31\15\0\63\31"+
    "\15\0\50\31\10\0\12\73\306\0\35\31\12\0\1\31"+
    "\10\0\41\31\217\0\27\31\11\0\107\31\37\0\12\73"+
    "\17\0\74\31\25\0\31\31\7\0\12\73\6\0\65\31"+
    "\1\0\12\73\4\0\3\31\11\0\44\31\2\0\1\31"+
    "\11\0\105\31\4\0\4\31\3\0\12\73\1\31\1\0"+
    "\1\31\43\0\22\31\1\0\45\31\6\0\1\31\101\0"+
    "\7\31\1\0\1\31\1\0\4\31\1\0\17\31\1\0"+
    "\12\31\7\0\73\31\5\0\12\73\6\0\4\31\1\0"+
    "\10\31\2\0\2\31\2\0\26\31\1\0\7\31\1\0"+
    "\2\31\1\0\5\31\1\0\12\31\2\0\2\31\2\0"+
    "\3\31\2\0\1\31\6\0\1\31\5\0\7\31\2\0"+
    "\7\31\3\0\5\31\213\0\113\31\5\0\12\73\4\0"+
    "\2\31\40\0\106\31\1\0\1\31\10\0\12\73\246\0"+
    "\66\31\2\0\11\31\27\0\6\31\42\0\101\31\3\0"+
    "\1\31\13\0\12\73\46\0\71\31\7\0\12\73\66\0"+
    "\33\31\2\0\17\31\4\0\12\73\306\0\73\31\145\0"+
    "\100\31\12\73\25\0\1\31\240\0\10\31\2\0\56\31"+
    "\2\0\10\31\1\0\2\31\33\0\77\31\10\0\1\31"+
    "\10\0\112\31\3\0\1\31\42\0\71\31\7\0\11\31"+
    "\1\0\55\31\1\0\11\31\17\0\12\73\30\0\36\31"+
    "\2\0\26\31\1\0\16\31\111\0\7\31\1\0\2\31"+
    "\1\0\54\31\3\0\1\31\1\0\2\31\1\0\11\31"+
    "\10\0\12\73\6\0\6\31\1\0\2\31\1\0\45\31"+
    "\1\0\2\31\1\0\6\31\7\0\12\73\u0136\0\27\31"+
    "\11\0\232\31\146\0\157\31\21\0\304\31\274\0\57\31"+
    "\321\0\107\31\271\0\71\31\7\0\37\31\1\0\12\73"+
    "\146\0\36\31\2\0\5\31\13\0\67\31\11\0\4\31"+
    "\14\0\12\73\11\0\25\31\5\0\23\31\260\0\100\31"+
    "\200\0\113\31\4\0\71\31\7\0\21\31\100\0\2\31"+
    "\1\0\1\31\34\0\370\31\10\0\363\31\15\0\37\31"+
    "\61\0\3\31\21\0\4\31\10\0\u018c\31\4\0\153\31"+
    "\5\0\15\31\3\0\11\31\7\0\12\31\3\0\2\31"+
    "\306\0\5\31\3\0\6\31\10\0\10\31\2\0\7\31"+
    "\36\0\4\31\224\0\3\31\273\0\125\31\1\0\107\31"+
    "\1\0\2\31\2\0\1\31\2\0\2\31\2\0\4\31"+
    "\1\0\14\31\1\0\1\31\1\0\7\31\1\0\101\31"+
    "\1\0\4\31\2\0\10\31\1\0\7\31\1\0\34\31"+
    "\1\0\4\31\1\0\5\31\1\0\1\31\3\0\7\31"+
    "\1\0\u0154\31\2\0\31\31\1\0\31\31\1\0\37\31"+
    "\1\0\31\31\1\0\37\31\1\0\31\31\1\0\37\31"+
    "\1\0\31\31\1\0\37\31\1\0\31\31\1\0\10\31"+
    "\2\0\62\73\67\31\4\0\62\31\10\0\1\31\16\0"+
    "\1\31\26\0\5\31\1\0\17\31\120\0\7\31\1\0"+
    "\21\31\2\0\7\31\1\0\2\31\1\0\5\31\325\0"+
    "\55\31\3\0\16\31\2\0\12\73\4\0\1\31\u0171\0"+
    "\60\31\12\73\6\0\305\31\13\0\7\31\51\0\114\31"+
    "\4\0\12\73\246\0\4\31\1\0\33\31\1\0\2\31"+
    "\1\0\1\31\2\0\1\31\1\0\12\31\1\0\4\31"+
    "\1\0\1\31\1\0\1\31\6\0\1\31\4\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\3\31\1\0\2\31"+
    "\1\0\1\31\2\0\1\31\1\0\1\31\1\0\1\31"+
    "\1\0\1\31\1\0\1\31\1\0\2\31\1\0\1\31"+
    "\2\0\4\31\1\0\7\31\1\0\4\31\1\0\4\31"+
    "\1\0\1\31\1\0\12\31\1\0\21\31\5\0\3\31"+
    "\1\0\5\31\1\0\21\31\164\0\32\31\6\0\32\31"+
    "\6\0\32\31\166\0\327\31\51\0\65\31\13\0\336\31"+
    "\2\0\u0182\31\16\0\u0131\31\37\0\36\31\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\2\0\1\11\21\0\1\12\1\13"+
    "\1\14\36\0\1\15\35\0\1\16\12\0\1\17\7\0"+
    "\1\20\12\0\1\21\3\0\1\22\10\0\1\23\1\24"+
    "\1\25\6\0\1\26\5\0\1\27\17\0\1\30\1\0"+
    "\1\31\1\0\1\32\4\0\1\33\1\34\10\0\1\35"+
    "\2\0\1\36\2\0\1\37\3\0\1\40\5\0\1\41"+
    "\3\0\1\42\1\0\1\43\2\0\1\44";

  private static int [] zzUnpackAction() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\74\0\74\0\74"+
    "\0\74\0\360\0\74\0\74\0\u012c\0\u0168\0\74\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u0384"+
    "\0\u03c0\0\u03fc\0\u0438\0\u0474\0\u04b0\0\u04ec\0\u0528\0\u0564"+
    "\0\74\0\74\0\74\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690"+
    "\0\u06cc\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u0870"+
    "\0\u08ac\0\u08e8\0\u0924\0\u0960\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8\0\u0bf4\0\u0c30"+
    "\0\u0c6c\0\74\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98\0\u0dd4"+
    "\0\u0e10\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c\0\u0f78\0\u0fb4"+
    "\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c\0\u1158\0\u1194"+
    "\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc\0\u1338\0\74"+
    "\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc\0\u1518"+
    "\0\u1554\0\u1590\0\74\0\u15cc\0\u1608\0\u1644\0\u1680\0\u16bc"+
    "\0\u16f8\0\u1734\0\74\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\74\0\u19c8\0\u1a04"+
    "\0\u1a40\0\74\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8"+
    "\0\u1be4\0\u1c20\0\74\0\74\0\74\0\u1c5c\0\u1c98\0\u1cd4"+
    "\0\u1d10\0\u1d4c\0\u1d88\0\74\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\74\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c"+
    "\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc"+
    "\0\u2238\0\74\0\u2274\0\74\0\u22b0\0\74\0\u22ec\0\u2328"+
    "\0\u2364\0\u23a0\0\74\0\74\0\u23dc\0\u2418\0\u2454\0\u2490"+
    "\0\u24cc\0\u2508\0\u2544\0\u2580\0\74\0\u25bc\0\u25f8\0\74"+
    "\0\u2634\0\u2670\0\74\0\u26ac\0\u26e8\0\u2724\0\74\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\74\0\u288c\0\u28c8\0\u2904"+
    "\0\74\0\u2940\0\74\0\u297c\0\u29b8\0\74";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\2\2\1\6\1\7"+
    "\1\10\7\2\1\11\32\2\1\12\13\2\1\13\1\14"+
    "\1\2\76\0\1\3\71\0\4\15\1\16\1\17\1\20"+
    "\1\16\3\15\1\20\1\15\1\21\4\22\1\15\1\23"+
    "\1\15\1\24\1\25\1\15\1\26\2\15\1\27\3\15"+
    "\1\30\1\31\1\32\1\15\1\33\1\15\1\34\1\35"+
    "\1\15\1\36\1\15\1\20\2\15\1\25\12\15\1\36"+
    "\2\15\1\37\54\0\1\40\17\0\4\15\1\16\1\17"+
    "\1\15\1\16\64\15\5\16\1\41\66\16\4\15\1\16"+
    "\1\42\1\20\1\16\3\15\1\20\1\15\5\20\1\15"+
    "\46\20\2\15\1\20\4\15\1\16\1\43\1\15\1\16"+
    "\5\15\5\44\51\15\1\44\4\15\1\16\1\43\1\15"+
    "\1\16\5\15\5\45\51\15\1\44\4\15\1\16\1\17"+
    "\1\15\1\16\25\15\1\46\42\15\1\16\1\17\1\15"+
    "\1\16\25\15\1\47\2\15\1\50\37\15\1\16\1\17"+
    "\1\15\1\16\13\15\1\51\27\15\1\51\24\15\1\16"+
    "\1\17\1\15\1\16\17\15\1\52\3\15\1\53\4\15"+
    "\1\54\37\15\1\16\1\17\1\15\1\16\16\15\1\55"+
    "\51\15\1\16\1\17\1\15\1\16\30\15\1\56\37\15"+
    "\1\16\1\17\1\15\1\16\31\15\1\57\36\15\1\16"+
    "\1\17\1\15\1\16\13\15\1\60\54\15\1\16\1\17"+
    "\1\15\1\16\17\15\1\61\50\15\1\16\1\17\1\15"+
    "\1\16\17\15\1\62\3\15\1\63\44\15\1\16\1\17"+
    "\1\15\1\16\33\15\1\64\1\65\33\15\1\16\1\17"+
    "\1\15\1\16\22\15\1\66\25\15\1\66\17\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\44\51\15\1\44\14\0"+
    "\1\67\57\0\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\70\51\15\1\70\4\15\1\16\1\43\1\15\1\16"+
    "\5\15\5\71\51\15\1\70\4\15\1\16\1\17\1\15"+
    "\1\16\23\15\1\72\44\15\1\16\1\17\1\15\1\16"+
    "\13\15\1\73\54\15\1\16\1\17\1\15\1\16\25\15"+
    "\1\74\1\75\41\15\1\16\1\17\1\15\1\16\33\15"+
    "\1\76\20\15\1\76\13\15\1\16\1\17\1\15\1\16"+
    "\15\15\1\77\52\15\1\16\1\17\1\15\1\16\25\15"+
    "\1\100\42\15\1\16\1\17\1\15\1\16\26\15\1\101"+
    "\41\15\1\16\1\102\1\15\1\16\70\15\1\16\1\17"+
    "\1\15\1\16\26\15\1\103\41\15\1\16\1\17\1\15"+
    "\1\16\15\15\1\104\52\15\1\16\1\17\1\15\1\16"+
    "\34\15\1\105\33\15\1\16\1\17\1\15\1\16\32\15"+
    "\1\106\35\15\1\16\1\17\1\15\1\16\26\15\1\107"+
    "\12\15\1\110\26\15\1\16\1\17\1\15\1\16\35\15"+
    "\1\111\32\15\1\16\1\17\1\15\1\16\25\15\1\112"+
    "\42\15\1\16\1\17\1\15\1\16\36\15\1\113\31\15"+
    "\1\16\1\17\1\15\1\16\23\15\1\114\25\15\1\114"+
    "\12\15\57\0\1\115\7\0\1\116\4\0\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\117\51\15\1\117\4\15"+
    "\1\16\1\43\1\15\1\16\5\15\5\120\51\15\1\117"+
    "\4\15\1\16\1\17\1\15\1\16\27\15\1\121\40\15"+
    "\1\16\1\17\1\15\1\16\34\15\1\122\33\15\1\16"+
    "\1\17\1\15\1\16\36\15\1\123\31\15\1\16\1\17"+
    "\1\15\1\16\31\15\1\124\36\15\1\16\1\17\1\15"+
    "\1\16\24\15\1\125\43\15\1\16\1\17\1\15\1\16"+
    "\22\15\1\126\45\15\1\16\1\17\1\15\1\16\13\15"+
    "\1\127\54\15\1\16\1\17\1\15\1\16\33\15\1\130"+
    "\34\15\1\16\1\17\1\15\1\16\14\15\1\131\53\15"+
    "\1\16\1\17\1\15\1\16\23\15\1\132\44\15\1\16"+
    "\1\17\1\15\1\16\34\15\1\133\33\15\1\16\1\17"+
    "\1\15\1\16\36\15\1\134\31\15\1\16\1\17\1\15"+
    "\1\16\13\15\1\135\54\15\1\16\1\17\1\15\1\16"+
    "\35\15\1\136\32\15\1\16\1\17\1\15\1\16\36\15"+
    "\1\137\31\15\1\16\1\140\1\15\1\16\70\15\1\16"+
    "\1\17\1\15\1\16\13\15\1\141\54\15\1\16\1\17"+
    "\1\15\1\16\35\15\1\142\20\15\1\142\5\15\63\0"+
    "\1\143\75\0\1\144\6\0\4\15\1\16\1\17\1\15"+
    "\1\16\3\15\1\145\64\15\1\16\1\43\1\15\1\16"+
    "\3\15\1\145\1\15\5\146\56\15\1\16\1\17\1\15"+
    "\1\16\17\15\1\147\50\15\1\16\1\17\1\15\1\16"+
    "\17\15\1\150\50\15\1\16\1\17\1\15\1\16\26\15"+
    "\1\151\41\15\1\16\1\17\1\15\1\16\30\15\1\152"+
    "\37\15\1\16\1\153\1\15\1\16\70\15\1\16\1\17"+
    "\1\15\1\16\13\15\1\154\54\15\1\16\1\17\1\15"+
    "\1\16\34\15\1\155\33\15\1\16\1\17\1\15\1\16"+
    "\36\15\1\156\31\15\1\16\1\17\1\15\1\16\33\15"+
    "\1\157\34\15\1\16\1\17\1\15\1\16\30\15\1\160"+
    "\37\15\1\16\1\17\1\15\1\16\40\15\1\161\27\15"+
    "\1\16\1\17\1\15\1\16\17\15\1\162\50\15\1\16"+
    "\1\163\1\15\1\16\70\15\1\16\1\17\1\15\1\16"+
    "\30\15\1\164\37\15\1\16\1\17\1\15\1\16\25\15"+
    "\1\165\42\15\1\16\1\17\1\15\1\16\33\15\1\166"+
    "\34\15\1\16\1\17\1\15\1\16\17\15\1\167\26\15"+
    "\1\167\15\15\64\0\1\170\65\0\1\171\15\0\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\1\172\1\173\3\174"+
    "\56\15\1\16\1\43\1\15\1\16\5\15\5\146\56\15"+
    "\1\16\1\17\1\15\1\16\13\15\1\175\54\15\1\16"+
    "\1\176\1\15\1\16\70\15\1\16\1\17\1\15\1\16"+
    "\27\15\1\177\40\15\1\16\1\17\1\15\1\16\27\15"+
    "\1\200\40\15\1\16\1\17\1\15\1\16\42\15\1\201"+
    "\25\15\1\16\1\202\1\15\1\16\70\15\1\16\1\17"+
    "\1\15\1\16\25\15\1\203\42\15\1\16\1\17\1\15"+
    "\1\16\17\15\1\204\50\15\1\16\1\17\1\15\1\16"+
    "\27\15\1\205\40\15\1\16\1\17\1\15\1\16\30\15"+
    "\1\206\37\15\1\16\1\17\1\15\1\16\33\15\1\207"+
    "\34\15\1\16\1\17\1\15\1\16\42\15\1\210\25\15"+
    "\1\16\1\17\1\15\1\16\30\15\1\211\37\15\1\16"+
    "\1\17\1\15\1\16\23\15\1\212\44\15\1\16\1\213"+
    "\1\15\1\16\64\15\62\0\1\214\75\0\1\215\7\0"+
    "\4\15\1\16\1\17\1\15\1\16\6\15\4\174\56\15"+
    "\1\16\1\17\1\15\1\16\3\15\1\216\1\15\3\174"+
    "\60\15\1\16\1\17\1\15\1\16\3\15\1\216\64\15"+
    "\1\16\1\17\1\15\1\16\15\15\1\217\52\15\1\16"+
    "\1\17\1\15\1\16\13\15\1\220\54\15\1\16\1\17"+
    "\1\15\1\16\17\15\1\221\50\15\1\16\1\17\1\15"+
    "\1\16\15\15\1\222\52\15\1\16\1\17\1\15\1\16"+
    "\13\15\1\223\54\15\1\16\1\224\1\15\1\16\42\15"+
    "\1\225\25\15\1\16\1\17\1\15\1\16\17\15\1\226"+
    "\50\15\1\16\1\17\1\15\1\16\33\15\1\227\34\15"+
    "\1\16\1\17\1\15\1\16\23\15\1\230\44\15\1\16"+
    "\1\17\1\15\1\16\37\15\1\231\30\15\1\16\1\232"+
    "\1\15\1\16\70\15\1\16\1\17\1\15\1\16\30\15"+
    "\1\233\37\15\1\16\1\17\1\15\1\16\5\15\1\234"+
    "\2\235\1\236\1\237\56\15\1\16\1\17\1\15\1\16"+
    "\23\15\1\240\44\15\1\16\1\17\1\15\1\16\34\15"+
    "\1\241\33\15\1\16\1\17\1\15\1\16\27\15\1\242"+
    "\40\15\1\16\1\17\1\15\1\16\33\15\1\243\34\15"+
    "\1\16\1\17\1\15\1\16\33\15\1\244\34\15\1\16"+
    "\1\17\1\15\1\16\15\15\1\245\52\15\1\16\1\17"+
    "\1\15\1\16\34\15\1\246\33\15\1\16\1\17\1\15"+
    "\1\16\16\15\1\247\51\15\1\16\1\17\1\15\1\16"+
    "\16\15\1\250\51\15\1\16\1\17\1\15\1\16\23\15"+
    "\1\251\44\15\1\16\1\252\1\15\1\16\42\15\1\253"+
    "\25\15\1\16\1\17\1\15\1\16\6\15\4\237\56\15"+
    "\1\16\1\254\1\15\1\16\5\15\5\237\56\15\1\16"+
    "\1\254\1\15\1\16\5\15\2\237\61\15\1\16\1\254"+
    "\1\15\1\16\70\15\1\16\1\17\1\15\1\16\30\15"+
    "\1\255\37\15\1\16\1\256\1\15\1\16\70\15\1\16"+
    "\1\17\1\15\1\16\35\15\1\257\32\15\1\16\1\17"+
    "\1\15\1\16\17\15\1\260\50\15\1\16\1\17\1\15"+
    "\1\16\23\15\1\261\44\15\1\16\1\17\1\15\1\16"+
    "\13\15\1\262\54\15\1\16\1\263\1\15\1\16\70\15"+
    "\1\16\1\264\1\15\1\16\70\15\1\16\1\17\1\15"+
    "\1\16\30\15\1\265\37\15\1\16\1\17\1\15\1\16"+
    "\34\15\1\266\33\15\1\16\1\17\1\15\1\16\15\15"+
    "\1\267\52\15\1\16\1\17\1\15\1\16\27\15\1\270"+
    "\40\15\1\16\1\17\1\15\1\16\17\15\1\271\50\15"+
    "\1\16\1\17\1\15\1\16\13\15\1\272\54\15\1\16"+
    "\1\17\1\15\1\16\30\15\1\273\37\15\1\16\1\17"+
    "\1\15\1\16\26\15\1\274\41\15\1\16\1\275\1\15"+
    "\1\16\70\15\1\16\1\17\1\15\1\16\23\15\1\276"+
    "\44\15\1\16\1\17\1\15\1\16\33\15\1\277\34\15"+
    "\1\16\1\300\1\15\1\16\70\15\1\16\1\17\1\15"+
    "\1\16\34\15\1\301\33\15\1\16\1\17\1\15\1\16"+
    "\15\15\1\302\52\15\1\16\1\303\1\15\1\16\70\15"+
    "\1\16\1\17\1\15\1\16\31\15\1\304\36\15\1\16"+
    "\1\17\1\15\1\16\14\15\1\305\53\15\1\16\1\17"+
    "\1\15\1\16\17\15\1\306\50\15\1\16\1\307\1\15"+
    "\1\16\70\15\1\16\1\17\1\15\1\16\23\15\1\310"+
    "\44\15\1\16\1\17\1\15\1\16\30\15\1\311\37\15"+
    "\1\16\1\17\1\15\1\16\25\15\1\312\42\15\1\16"+
    "\1\17\1\15\1\16\13\15\1\313\54\15\1\16\1\17"+
    "\1\15\1\16\30\15\1\314\37\15\1\16\1\315\1\15"+
    "\1\16\70\15\1\16\1\17\1\15\1\16\17\15\1\316"+
    "\50\15\1\16\1\17\1\15\1\16\15\15\1\317\52\15"+
    "\1\16\1\17\1\15\1\16\27\15\1\320\40\15\1\16"+
    "\1\321\1\15\1\16\70\15\1\16\1\17\1\15\1\16"+
    "\23\15\1\322\44\15\1\16\1\323\1\15\1\16\70\15"+
    "\1\16\1\17\1\15\1\16\30\15\1\324\37\15\1\16"+
    "\1\17\1\15\1\16\27\15\1\325\40\15\1\16\1\326"+
    "\1\15\1\16\64\15";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10740];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\4\11\1\1\2\11\2\0\1\11"+
    "\21\0\3\11\36\0\1\11\35\0\1\11\12\0\1\11"+
    "\7\0\1\11\12\0\1\11\3\0\1\11\10\0\3\11"+
    "\6\0\1\11\5\0\1\11\17\0\1\11\1\0\1\11"+
    "\1\0\1\11\4\0\2\11\10\0\1\11\2\0\1\11"+
    "\2\0\1\11\3\0\1\11\5\0\1\11\3\0\1\11"+
    "\1\0\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[214];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StorageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, "Fin de linea");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error " + yytext());
            }
            // fall through
          case 37: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 38: break;
          case 3:
            { return new Symbol(OPEN_ROUND_BRACKET, yytext());
            }
            // fall through
          case 39: break;
          case 4:
            { return new Symbol(CLOSE_ROUND_BRACKET, yytext());
            }
            // fall through
          case 40: break;
          case 5:
            { return new Symbol(COMMA, yytext());
            }
            // fall through
          case 41: break;
          case 6:
            { return new Symbol(COLON, yytext());
            }
            // fall through
          case 42: break;
          case 7:
            { return new Symbol(OPEN_BRACE, yytext());
            }
            // fall through
          case 43: break;
          case 8:
            { return new Symbol(CLOSE_BRACE, yytext());
            }
            // fall through
          case 44: break;
          case 9:
            { return new Symbol(VALUE, yytext());
            }
            // fall through
          case 45: break;
          case 10:
            { return new Symbol(LITERAL, yytext());
            }
            // fall through
          case 46: break;
          case 11:
            { return new Symbol(ID, yytext());
            }
            // fall through
          case 47: break;
          case 12:
            { return new Symbol(ENTERO, yytext());
            }
            // fall through
          case 48: break;
          case 13:
            { return new Symbol(PARAM_ID, yytext());
            }
            // fall through
          case 49: break;
          case 14:
            { return new Symbol(PARAM_URL, yytext());
            }
            // fall through
          case 50: break;
          case 15:
            { return new Symbol(DARK, yytext());
            }
            // fall through
          case 51: break;
          case 16:
            { return new Symbol(PARAM_TEMA, yytext());
            }
            // fall through
          case 52: break;
          case 17:
            { return new Symbol(PARAM_CLASE, yytext());
            }
            // fall through
          case 53: break;
          case 18:
            { return new Symbol(PARAM_FILAS, yytext());
            }
            // fall through
          case 54: break;
          case 19:
            { return new Symbol(WHITE, yytext());
            }
            // fall through
          case 55: break;
          case 20:
            { return new Symbol(INICIO_FORM, yytext());
            }
            // fall through
          case 56: break;
          case 21:
            { return new Symbol(INICIO_USER, yytext());
            }
            // fall through
          case 57: break;
          case 22:
            { return new Symbol(PARAM_NOMBRE_FORM, yytext());
            }
            // fall through
          case 58: break;
          case 23:
            { return new Symbol(PARAM_TITULO_FORM, yytext());
            }
            // fall through
          case 59: break;
          case 24:
            { return new Symbol(PARAM_USUARIO, yytext());
            }
            // fall through
          case 60: break;
          case 25:
            { return new Symbol(FECHA, yytext());
            }
            // fall through
          case 61: break;
          case 26:
            { return new Symbol(PARAM_COLUMNAS, yytext());
            }
            // fall through
          case 62: break;
          case 27:
            { return new Symbol(PARAM_OPCIONES, yytext());
            }
            // fall through
          case 63: break;
          case 28:
            { return new Symbol(PARAM_PASSWORD, yytext());
            }
            // fall through
          case 64: break;
          case 29:
            { return new Symbol(PARAM_REQUERIDO, yytext());
            }
            // fall through
          case 65: break;
          case 30:
            { return new Symbol(PARAM_ALINEACION, yytext());
            }
            // fall through
          case 66: break;
          case 31:
            { return new Symbol(PARAM_FORMULARIO, yytext());
            }
            // fall through
          case 67: break;
          case 32:
            { return new Symbol(PARAM_COMPONENTES, yytext());
            }
            // fall through
          case 68: break;
          case 33:
            { return new Symbol(PARAM_NOMBRE_CAMPO, yytext());
            }
            // fall through
          case 69: break;
          case 34:
            { return new Symbol(PARAM_TEXTO_VISIBLE, yytext());
            }
            // fall through
          case 70: break;
          case 35:
            { return new Symbol(PARAM_FECHA_CREACION, yytext());
            }
            // fall through
          case 71: break;
          case 36:
            { return new Symbol(PARAM_USUARIO_CREACION, yytext());
            }
            // fall through
          case 72: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
