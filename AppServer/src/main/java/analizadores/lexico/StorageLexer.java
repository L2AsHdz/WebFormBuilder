// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: storageLexer.flex

package analizadores.lexico;

import java_cup.runtime.Symbol;
import static analizadores.sintactico.StorageSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class StorageLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\5\1\22\0\1\2\1\0\1\3\1\0\1\4"+
    "\2\0\1\5\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\0\1\13\1\14\1\15\1\16\6\17\1\20\6\0"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\4\0\1\53\1\0\1\54\1\55\1\51"+
    "\1\56\1\57\1\60\1\51\1\61\1\62\1\51\1\63"+
    "\1\51\1\64\1\65\1\66\2\51\1\67\1\70\1\71"+
    "\1\72\1\51\1\73\3\51\1\74\1\75\1\76\7\0"+
    "\1\1\32\0\1\1\11\0\1\51\12\0\1\51\4\0"+
    "\1\51\5\0\27\51\1\0\37\51\1\0\u01ca\51\4\0"+
    "\14\51\16\0\5\51\7\0\1\51\1\0\1\51\21\0"+
    "\165\51\1\0\2\51\2\0\4\51\1\0\1\51\6\0"+
    "\1\51\1\0\3\51\1\0\1\51\1\0\24\51\1\0"+
    "\123\51\1\0\213\51\1\0\255\51\1\0\46\51\2\0"+
    "\1\51\6\0\51\51\10\0\55\51\1\0\1\51\1\0"+
    "\2\51\1\0\2\51\1\0\1\51\10\0\33\51\4\0"+
    "\4\51\35\0\13\51\5\0\100\51\12\77\4\0\146\51"+
    "\1\0\10\51\2\0\12\51\1\0\6\51\12\77\3\51"+
    "\2\0\1\51\20\0\73\51\2\0\145\51\16\0\12\77"+
    "\54\51\4\0\1\51\2\0\1\51\2\0\56\51\22\0"+
    "\34\51\4\0\13\51\65\0\25\51\1\0\10\51\25\0"+
    "\17\51\1\0\201\51\2\0\12\77\1\0\23\51\1\0"+
    "\10\51\2\0\2\51\2\0\26\51\1\0\7\51\1\0"+
    "\1\51\3\0\4\51\2\0\11\51\2\0\2\51\2\0"+
    "\4\51\10\0\1\51\4\0\2\51\1\0\5\51\2\0"+
    "\12\77\2\51\12\0\1\51\1\0\1\51\2\0\3\51"+
    "\1\0\6\51\4\0\2\51\2\0\26\51\1\0\7\51"+
    "\1\0\2\51\1\0\2\51\1\0\2\51\2\0\1\51"+
    "\1\0\5\51\4\0\2\51\2\0\3\51\3\0\1\51"+
    "\7\0\4\51\1\0\1\51\7\0\12\77\6\51\13\0"+
    "\3\51\1\0\11\51\1\0\3\51\1\0\26\51\1\0"+
    "\7\51\1\0\2\51\1\0\5\51\2\0\12\51\1\0"+
    "\3\51\1\0\3\51\2\0\1\51\17\0\4\51\2\0"+
    "\12\77\11\0\7\51\1\0\3\51\1\0\10\51\2\0"+
    "\2\51\2\0\26\51\1\0\7\51\1\0\2\51\1\0"+
    "\5\51\2\0\11\51\2\0\2\51\2\0\3\51\10\0"+
    "\2\51\4\0\2\51\1\0\5\51\2\0\12\77\1\0"+
    "\1\51\20\0\2\51\1\0\6\51\3\0\3\51\1\0"+
    "\4\51\3\0\2\51\1\0\1\51\1\0\2\51\3\0"+
    "\2\51\3\0\3\51\3\0\14\51\4\0\5\51\3\0"+
    "\3\51\1\0\4\51\2\0\1\51\6\0\1\51\16\0"+
    "\12\77\20\0\15\51\1\0\3\51\1\0\27\51\1\0"+
    "\20\51\3\0\10\51\1\0\3\51\1\0\4\51\7\0"+
    "\2\51\1\0\3\51\5\0\4\51\2\0\12\77\20\0"+
    "\4\51\1\0\10\51\1\0\3\51\1\0\27\51\1\0"+
    "\12\51\1\0\5\51\2\0\11\51\1\0\3\51\1\0"+
    "\4\51\7\0\2\51\7\0\1\51\1\0\4\51\2\0"+
    "\12\77\1\0\2\51\15\0\4\51\1\0\10\51\1\0"+
    "\3\51\1\0\63\51\1\0\3\51\1\0\5\51\5\0"+
    "\4\51\7\0\5\51\2\0\12\77\12\0\6\51\2\0"+
    "\2\51\1\0\22\51\3\0\30\51\1\0\11\51\1\0"+
    "\1\51\2\0\7\51\3\0\1\51\4\0\6\51\1\0"+
    "\1\51\1\0\10\51\6\0\12\77\2\0\2\51\15\0"+
    "\72\51\5\0\17\51\1\0\12\77\47\0\2\51\1\0"+
    "\1\51\1\0\5\51\1\0\30\51\1\0\1\51\1\0"+
    "\27\51\2\0\5\51\1\0\1\51\1\0\6\51\2\0"+
    "\12\77\2\0\4\51\40\0\1\51\27\0\2\51\6\0"+
    "\12\77\13\0\1\51\1\0\1\51\1\0\1\51\4\0"+
    "\12\51\1\0\44\51\4\0\24\51\1\0\22\51\1\0"+
    "\44\51\11\0\1\51\71\0\100\51\12\77\6\0\100\51"+
    "\12\77\4\51\2\0\46\51\1\0\1\51\5\0\1\51"+
    "\2\0\53\51\1\0\115\51\1\0\4\51\2\0\7\51"+
    "\1\0\1\51\1\0\4\51\2\0\51\51\1\0\4\51"+
    "\2\0\41\51\1\0\4\51\2\0\7\51\1\0\1\51"+
    "\1\0\4\51\2\0\17\51\1\0\71\51\1\0\4\51"+
    "\2\0\103\51\2\0\3\51\40\0\20\51\20\0\126\51"+
    "\2\0\6\51\3\0\u016c\51\2\0\21\51\1\1\32\51"+
    "\5\0\113\51\3\0\13\51\7\0\15\51\1\0\7\51"+
    "\13\0\25\51\13\0\24\51\14\0\15\51\1\0\3\51"+
    "\1\0\2\51\14\0\124\51\3\0\1\51\4\0\2\51"+
    "\2\0\12\77\41\0\3\51\2\0\12\77\6\0\131\51"+
    "\7\0\53\51\5\0\106\51\12\0\37\51\1\0\14\51"+
    "\4\0\14\51\12\0\12\77\36\51\2\0\5\51\13\0"+
    "\54\51\4\0\32\51\6\0\12\77\46\0\34\51\4\0"+
    "\77\51\1\0\35\51\2\0\1\51\12\77\6\0\12\77"+
    "\15\0\1\51\10\0\17\51\101\0\114\51\4\0\12\77"+
    "\21\0\11\51\14\0\60\51\12\77\72\51\14\0\70\51"+
    "\10\0\12\77\3\0\3\51\12\77\44\51\2\0\11\51"+
    "\7\0\53\51\2\0\3\51\20\0\3\51\1\0\47\51"+
    "\5\0\372\51\1\0\33\51\2\0\6\51\2\0\46\51"+
    "\2\0\6\51\2\0\10\51\1\0\1\51\1\0\1\51"+
    "\1\0\1\51\1\0\37\51\2\0\65\51\1\0\7\51"+
    "\1\0\1\51\3\0\3\51\1\0\7\51\3\0\4\51"+
    "\2\0\6\51\4\0\15\51\5\0\3\51\1\0\7\51"+
    "\3\0\13\1\35\0\2\1\5\0\1\1\17\0\2\51"+
    "\23\0\1\51\12\0\1\1\21\0\1\51\15\0\1\51"+
    "\20\0\15\51\63\0\41\51\21\0\1\51\4\0\1\51"+
    "\2\0\12\51\1\0\1\51\3\0\5\51\6\0\1\51"+
    "\1\0\1\51\1\0\1\51\1\0\4\51\1\0\13\51"+
    "\2\0\4\51\5\0\5\51\4\0\1\51\21\0\51\51"+
    "\u022d\0\64\51\26\0\57\51\1\0\57\51\1\0\205\51"+
    "\6\0\11\51\14\0\46\51\1\0\1\51\5\0\1\51"+
    "\2\0\70\51\7\0\1\51\17\0\30\51\11\0\7\51"+
    "\1\0\7\51\1\0\7\51\1\0\7\51\1\0\7\51"+
    "\1\0\7\51\1\0\7\51\1\0\7\51\1\0\40\51"+
    "\57\0\1\51\320\0\1\1\4\0\3\51\31\0\17\51"+
    "\1\0\5\51\2\0\5\51\4\0\126\51\2\0\2\51"+
    "\2\0\3\51\1\0\132\51\1\0\4\51\5\0\53\51"+
    "\1\0\136\51\21\0\33\51\65\0\306\51\112\0\360\51"+
    "\20\0\215\51\103\0\56\51\2\0\15\51\3\0\20\51"+
    "\12\77\2\51\24\0\63\51\1\0\12\51\1\0\163\51"+
    "\45\0\11\51\2\0\147\51\2\0\65\51\2\0\5\51"+
    "\60\0\61\51\30\0\64\51\14\0\106\51\12\0\12\77"+
    "\6\0\30\51\3\0\1\51\1\0\3\51\12\77\44\51"+
    "\2\0\44\51\14\0\35\51\3\0\101\51\16\0\1\51"+
    "\12\77\6\0\20\51\12\77\5\51\1\0\67\51\11\0"+
    "\16\51\2\0\12\77\6\0\27\51\3\0\111\51\30\0"+
    "\3\51\2\0\20\51\2\0\5\51\12\0\6\51\2\0"+
    "\6\51\2\0\6\51\11\0\7\51\1\0\7\51\1\0"+
    "\53\51\1\0\14\51\10\0\173\51\1\0\2\51\2\0"+
    "\12\77\6\0\244\51\14\0\27\51\4\0\61\51\4\0"+
    "\156\51\2\0\152\51\46\0\7\51\14\0\5\51\5\0"+
    "\14\51\1\0\15\51\1\0\5\51\1\0\1\51\1\0"+
    "\2\51\1\0\2\51\1\0\154\51\41\0\153\51\22\0"+
    "\100\51\2\0\66\51\50\0\14\51\4\0\20\51\20\0"+
    "\20\51\3\0\2\51\30\0\3\51\40\0\5\51\1\0"+
    "\207\51\23\0\12\77\7\0\32\51\4\0\1\51\1\0"+
    "\32\51\13\0\131\51\3\0\6\51\2\0\6\51\2\0"+
    "\6\51\2\0\3\51\43\0\14\51\1\0\32\51\1\0"+
    "\23\51\1\0\2\51\1\0\17\51\2\0\16\51\42\0"+
    "\173\51\105\0\65\51\210\0\1\51\202\0\35\51\3\0"+
    "\61\51\17\0\1\51\37\0\40\51\15\0\36\51\5\0"+
    "\53\51\5\0\36\51\2\0\44\51\4\0\10\51\1\0"+
    "\5\51\52\0\236\51\2\0\12\77\6\0\44\51\4\0"+
    "\44\51\4\0\50\51\10\0\64\51\234\0\67\51\11\0"+
    "\26\51\12\0\10\51\230\0\6\51\2\0\1\51\1\0"+
    "\54\51\1\0\2\51\3\0\1\51\2\0\27\51\12\0"+
    "\27\51\11\0\37\51\101\0\23\51\1\0\2\51\12\0"+
    "\26\51\12\0\32\51\106\0\70\51\6\0\2\51\100\0"+
    "\4\51\1\0\2\51\5\0\10\51\1\0\3\51\1\0"+
    "\35\51\2\0\3\51\4\0\1\51\40\0\35\51\3\0"+
    "\35\51\43\0\10\51\1\0\36\51\31\0\66\51\12\0"+
    "\26\51\12\0\23\51\15\0\22\51\156\0\111\51\67\0"+
    "\63\51\15\0\63\51\15\0\50\51\10\0\12\77\306\0"+
    "\35\51\12\0\1\51\10\0\41\51\217\0\27\51\11\0"+
    "\107\51\37\0\12\77\17\0\74\51\25\0\31\51\7\0"+
    "\12\77\6\0\65\51\1\0\12\77\4\0\3\51\11\0"+
    "\44\51\2\0\1\51\11\0\105\51\4\0\4\51\3\0"+
    "\12\77\1\51\1\0\1\51\43\0\22\51\1\0\45\51"+
    "\6\0\1\51\101\0\7\51\1\0\1\51\1\0\4\51"+
    "\1\0\17\51\1\0\12\51\7\0\73\51\5\0\12\77"+
    "\6\0\4\51\1\0\10\51\2\0\2\51\2\0\26\51"+
    "\1\0\7\51\1\0\2\51\1\0\5\51\1\0\12\51"+
    "\2\0\2\51\2\0\3\51\2\0\1\51\6\0\1\51"+
    "\5\0\7\51\2\0\7\51\3\0\5\51\213\0\113\51"+
    "\5\0\12\77\4\0\2\51\40\0\106\51\1\0\1\51"+
    "\10\0\12\77\246\0\66\51\2\0\11\51\27\0\6\51"+
    "\42\0\101\51\3\0\1\51\13\0\12\77\46\0\71\51"+
    "\7\0\12\77\66\0\33\51\2\0\17\51\4\0\12\77"+
    "\306\0\73\51\145\0\100\51\12\77\25\0\1\51\240\0"+
    "\10\51\2\0\56\51\2\0\10\51\1\0\2\51\33\0"+
    "\77\51\10\0\1\51\10\0\112\51\3\0\1\51\42\0"+
    "\71\51\7\0\11\51\1\0\55\51\1\0\11\51\17\0"+
    "\12\77\30\0\36\51\2\0\26\51\1\0\16\51\111\0"+
    "\7\51\1\0\2\51\1\0\54\51\3\0\1\51\1\0"+
    "\2\51\1\0\11\51\10\0\12\77\6\0\6\51\1\0"+
    "\2\51\1\0\45\51\1\0\2\51\1\0\6\51\7\0"+
    "\12\77\u0136\0\27\51\11\0\232\51\146\0\157\51\21\0"+
    "\304\51\274\0\57\51\321\0\107\51\271\0\71\51\7\0"+
    "\37\51\1\0\12\77\146\0\36\51\2\0\5\51\13\0"+
    "\67\51\11\0\4\51\14\0\12\77\11\0\25\51\5\0"+
    "\23\51\260\0\100\51\200\0\113\51\4\0\71\51\7\0"+
    "\21\51\100\0\2\51\1\0\1\51\34\0\370\51\10\0"+
    "\363\51\15\0\37\51\61\0\3\51\21\0\4\51\10\0"+
    "\u018c\51\4\0\153\51\5\0\15\51\3\0\11\51\7\0"+
    "\12\51\3\0\2\51\306\0\5\51\3\0\6\51\10\0"+
    "\10\51\2\0\7\51\36\0\4\51\224\0\3\51\273\0"+
    "\125\51\1\0\107\51\1\0\2\51\2\0\1\51\2\0"+
    "\2\51\2\0\4\51\1\0\14\51\1\0\1\51\1\0"+
    "\7\51\1\0\101\51\1\0\4\51\2\0\10\51\1\0"+
    "\7\51\1\0\34\51\1\0\4\51\1\0\5\51\1\0"+
    "\1\51\3\0\7\51\1\0\u0154\51\2\0\31\51\1\0"+
    "\31\51\1\0\37\51\1\0\31\51\1\0\37\51\1\0"+
    "\31\51\1\0\37\51\1\0\31\51\1\0\37\51\1\0"+
    "\31\51\1\0\10\51\2\0\62\77\67\51\4\0\62\51"+
    "\10\0\1\51\16\0\1\51\26\0\5\51\1\0\17\51"+
    "\120\0\7\51\1\0\21\51\2\0\7\51\1\0\2\51"+
    "\1\0\5\51\325\0\55\51\3\0\16\51\2\0\12\77"+
    "\4\0\1\51\u0171\0\60\51\12\77\6\0\305\51\13\0"+
    "\7\51\51\0\114\51\4\0\12\77\246\0\4\51\1\0"+
    "\33\51\1\0\2\51\1\0\1\51\2\0\1\51\1\0"+
    "\12\51\1\0\4\51\1\0\1\51\1\0\1\51\6\0"+
    "\1\51\4\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\3\51\1\0\2\51\1\0\1\51\2\0\1\51\1\0"+
    "\1\51\1\0\1\51\1\0\1\51\1\0\1\51\1\0"+
    "\2\51\1\0\1\51\2\0\4\51\1\0\7\51\1\0"+
    "\4\51\1\0\4\51\1\0\1\51\1\0\12\51\1\0"+
    "\21\51\5\0\3\51\1\0\5\51\1\0\21\51\164\0"+
    "\32\51\6\0\32\51\6\0\32\51\166\0\327\51\51\0"+
    "\65\51\13\0\336\51\2\0\u0182\51\16\0\u0131\51\37\0"+
    "\36\51\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\2\0\1\11\30\0\1\12\1\13"+
    "\1\14\63\0\1\15\3\0\1\16\5\0\1\17\11\0"+
    "\1\20\34\0\1\21\20\0\1\22\15\0\1\23\13\0"+
    "\1\24\3\0\1\25\1\0\1\26\4\0\1\27\7\0"+
    "\1\30\4\0\1\31\1\32\1\33\4\0\1\34\7\0"+
    "\1\35\2\0\1\36\5\0\1\37\13\0\1\40\1\0"+
    "\1\41\10\0\1\42\1\0\1\43\3\0\1\44\1\45"+
    "\6\0\1\46\1\47\11\0\1\50\2\0\1\51\2\0"+
    "\1\52\1\53\3\0\1\54\1\55\3\0\1\56\1\57"+
    "\5\0\1\60\3\0\1\61\1\0\1\62\2\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\100\0\200\0\100\0\100\0\100\0\100"+
    "\0\300\0\100\0\100\0\u0100\0\u0140\0\100\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\100\0\100"+
    "\0\100\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900"+
    "\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00"+
    "\0\u0b40\0\u0b80\0\u0bc0\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80\0\u0ec0\0\u0f00"+
    "\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080\0\u10c0\0\u1100"+
    "\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u1380\0\u13c0\0\u1400\0\100\0\u1440\0\u1480\0\u14c0"+
    "\0\100\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\100\0\u1640"+
    "\0\u1680\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840"+
    "\0\100\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00"+
    "\0\u1a40\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00"+
    "\0\u1c40\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00"+
    "\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40\0\100\0\u1f80\0\u1fc0"+
    "\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0"+
    "\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\100\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u2680\0\100\0\u26c0\0\u2700\0\u2740"+
    "\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940"+
    "\0\100\0\u2980\0\u29c0\0\u2a00\0\100\0\u2a40\0\100\0\u2a80"+
    "\0\u2ac0\0\u2b00\0\u2b40\0\100\0\u2b80\0\u2bc0\0\u2c00\0\u2c40"+
    "\0\u2c80\0\u2cc0\0\u2d00\0\100\0\u2d40\0\u2d80\0\u2dc0\0\u2e00"+
    "\0\100\0\100\0\100\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\100"+
    "\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\100"+
    "\0\u3100\0\u3140\0\100\0\u3180\0\u31c0\0\u3200\0\u3240\0\u3280"+
    "\0\100\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\100\0\u3580\0\100\0\u35c0"+
    "\0\u3600\0\u3640\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\100"+
    "\0\u37c0\0\100\0\u3800\0\u3840\0\u3880\0\100\0\100\0\u38c0"+
    "\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\100\0\100\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00\0\u3c40"+
    "\0\100\0\u3c80\0\u3cc0\0\100\0\u3d00\0\u3d40\0\100\0\100"+
    "\0\u3d80\0\u3dc0\0\u3e00\0\100\0\100\0\u3e40\0\u3e80\0\u3ec0"+
    "\0\100\0\100\0\u3f00\0\u3f40\0\u3f80\0\u3fc0\0\u4000\0\100"+
    "\0\u4040\0\u4080\0\u40c0\0\100\0\u4100\0\100\0\u4140\0\u4180"+
    "\0\100";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\2\2\1\5\1\6\1\7\7\2"+
    "\1\10\35\2\1\11\15\2\1\12\1\2\1\13\1\2"+
    "\100\0\2\14\1\15\1\16\1\17\1\15\3\14\1\17"+
    "\1\14\1\20\4\21\1\14\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\26\1\30\1\31\3\26\1\32\1\33"+
    "\1\34\1\26\1\35\1\36\1\37\1\40\1\26\1\41"+
    "\3\26\1\42\2\26\1\43\6\26\1\44\2\26\1\36"+
    "\2\26\1\41\3\14\1\45\55\0\1\46\22\0\2\14"+
    "\1\15\1\16\1\14\1\15\72\14\3\15\1\47\74\15"+
    "\2\14\1\15\1\50\1\17\1\15\3\14\1\17\1\14"+
    "\5\17\1\14\53\17\3\14\1\17\2\14\1\15\1\51"+
    "\1\14\1\15\5\14\5\52\1\14\53\26\1\14\1\53"+
    "\1\14\1\52\2\14\1\15\1\51\1\14\1\15\5\14"+
    "\5\54\1\14\53\26\1\14\1\53\1\14\1\52\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\13\26"+
    "\1\55\5\26\1\56\31\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\16\26\1\57\34\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\1\60"+
    "\3\26\1\61\2\26\1\62\3\26\1\63\2\26\1\64"+
    "\34\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\1\65\3\26\1\66"+
    "\26\26\1\65\17\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\53\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\4\26\1\67\3\26\1\70"+
    "\5\26\1\71\34\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\3\26"+
    "\1\72\10\26\1\73\14\26\1\74\21\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\24\26\1\75\26\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\16\26\1\76\26\26\1\77\5\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\17\26\1\100\33\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\1\101\52\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\1\102"+
    "\3\26\1\103\46\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\10\26"+
    "\1\104\30\26\1\104\11\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\4\26\1\105\3\26\1\106\42\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\21\26\1\107\1\110\30\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\7\26\1\111\30\26\1\111\12\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\50\1\17\1\15\3\14"+
    "\1\17\1\14\5\42\1\14\53\42\1\14\1\53\1\14"+
    "\1\42\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\1\65\32\26\1\65\17\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\16\26\1\77\26\26\1\77\5\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\52\1\14\53\26\1\14\1\53\1\14\1\52\12\0"+
    "\1\112\65\0\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\113\1\14\53\26\1\14\1\53\1\14\1\113\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\114\1\14\53\114"+
    "\3\14\1\114\2\14\1\15\1\51\1\14\1\15\5\14"+
    "\5\115\1\14\53\26\1\14\1\53\1\14\1\113\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\10\26"+
    "\1\116\42\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\4\26\1\117"+
    "\46\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\23\26\1\120\27\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\14\26\1\121\36\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\15\26\1\122\35\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\4\26\1\123\46\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\1\124\52\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\13\26"+
    "\1\125\1\126\36\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\127\24\26\1\127\4\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\21\26\1\130\31\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\2\26"+
    "\1\131\50\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\2\26\1\132"+
    "\10\26\1\133\37\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\134\31\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\135\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\1\136\52\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\20\26\1\137\32\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\22\26\1\140\30\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\141\1\14\1\15\5\14\5\26\1\14\14\26"+
    "\1\142\36\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\141\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\2\26\1\143\50\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\22\26\1\144\30\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\3\26\1\145\47\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\20\26\1\146\32\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\147\1\14\1\15\5\14\5\26\1\14\53\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\14\26\1\150\12\26\1\151"+
    "\23\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\23\26\1\152\27\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\13\26\1\153\37\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\24\26\1\154\26\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\10\26\1\155\30\26\1\155\11\26\1\14"+
    "\1\53\1\14\1\26\60\0\1\156\11\0\1\157\5\0"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\160\1\14"+
    "\53\26\1\14\1\53\1\14\1\160\2\14\1\15\1\161"+
    "\1\14\1\15\5\14\5\114\1\14\53\114\1\14\1\53"+
    "\1\14\1\114\2\14\1\15\1\51\1\14\1\15\5\14"+
    "\5\162\1\14\53\26\1\14\1\53\1\14\1\160\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\15\26"+
    "\1\163\35\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\1\164\52\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\16\26\1\165\34\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\17\26\1\166\33\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\23\26\1\167\27\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\2\26\1\170\50\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\22\26\1\171\30\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\24\26"+
    "\1\172\26\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\1\26\1\173"+
    "\15\26\1\174\33\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\12\26"+
    "\1\175\27\26\1\175\10\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\4\26\1\176\46\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\7\26"+
    "\1\177\43\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\7\26\1\200"+
    "\43\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\1\201\52\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\14\26\1\202\36\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\6\26\1\203\44\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\24\26\1\204\26\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\23\26\1\205\27\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\1\26"+
    "\1\206\51\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\10\26\1\207"+
    "\42\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\22\26\1\210\30\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\10\26\1\211\42\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\24\26\1\212\26\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\1\213\52\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\23\26\1\214\27\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\24\26"+
    "\1\215\26\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\216\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\1\217\52\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\23\26\1\220\24\26\1\220\2\26\1\14\1\53"+
    "\1\14\1\26\66\0\1\221\101\0\1\222\7\0\2\14"+
    "\1\15\1\16\1\14\1\15\3\14\1\223\1\14\5\26"+
    "\1\14\53\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\51\1\14\1\15\3\14\1\223\1\14\5\224\1\14"+
    "\53\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\4\26\1\225\46\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\32\26\1\226\20\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\15\26\1\227\35\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\16\26\1\230\34\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\21\26\1\231\31\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\12\26\1\232\40\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\4\26"+
    "\1\233\46\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\14\26\1\234"+
    "\36\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\16\26\1\235\34\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\16\26\1\236\34\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\237\1\14\1\15"+
    "\5\14\5\26\1\14\53\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\2\26\1\240\50\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\1\241"+
    "\52\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\4\26\1\242\46\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\22\26\1\243\30\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\24\26\1\244\26\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\4\26\1\245\46\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\10\26\1\246\42\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\10\26\1\247\42\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\250\31\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\16\26\1\251"+
    "\34\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\26\26\1\252\24\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\16\26\1\253\34\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\4\26\1\254\46\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\255\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\16\26"+
    "\1\256\34\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\13\26\1\257"+
    "\37\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\21\26\1\260\31\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\4\26\1\261\31\26\1\261"+
    "\14\26\1\14\1\53\1\14\1\26\67\0\1\262\67\0"+
    "\1\263\20\0\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\1\264\1\265\3\266\62\14\1\15\1\51\1\14\1\15"+
    "\5\14\5\224\1\14\53\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\1\267\52\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\23\26\1\270"+
    "\27\26\1\14\1\53\1\14\1\26\2\14\1\15\1\271"+
    "\1\14\1\15\5\14\5\26\1\14\53\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\32\26\1\272\20\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\16\26\1\273\34\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\1\26\1\274\51\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\275\1\14\1\15\5\14\5\26\1\14\53\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\15\26\1\276\35\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\277\1\14\1\15"+
    "\5\14\5\26\1\14\53\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\15\26\1\300\35\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\7\26"+
    "\1\301\43\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\32\26\1\302"+
    "\20\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\21\26\1\303\31\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\304\1\14"+
    "\1\15\5\14\5\26\1\14\53\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\13\26\1\305\37\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\15\26\1\306\35\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\4\26"+
    "\1\307\46\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\5\26\1\310"+
    "\45\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\4\26\1\311\46\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\15\26\1\312\35\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\16\26\1\313\34\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\314\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\315\31\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\32\26\1\316"+
    "\20\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\16\26\1\317\34\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\10\26\1\320\42\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\321\1\14\1\15"+
    "\5\14\5\26\1\14\53\26\1\14\1\53\1\14\1\26"+
    "\64\0\1\322\102\0\1\323\10\0\2\14\1\15\1\16"+
    "\1\14\1\15\6\14\4\266\62\14\1\15\1\16\1\14"+
    "\1\15\3\14\1\324\1\14\3\266\64\14\1\15\1\16"+
    "\1\14\1\15\3\14\1\324\70\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\2\26\1\325\50\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\4\26\1\326\46\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\23\26\1\327\27\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\330\1\14\1\15\5\14\5\26"+
    "\1\14\53\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\16\26\1\331"+
    "\34\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\1\332\52\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\4\26\1\333\46\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\1\334\52\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\2\26\1\335\50\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\16\26"+
    "\1\336\34\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\1\337\52\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\340\1\14"+
    "\1\15\5\14\5\26\1\14\53\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\21\26\1\341\31\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\10\26\1\342\42\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\343\1\14\1\15\5\14\5\26\1\14\32\26"+
    "\1\344\20\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\4\26\1\345"+
    "\46\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\21\26\1\346\31\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\10\26\1\347\42\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\25\26\1\350\25\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\351\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\16\26"+
    "\1\352\34\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\1\353\2\354\1\355\1\356"+
    "\62\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\10\26\1\357\42\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\27\26"+
    "\1\360\23\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\4\26\1\361"+
    "\46\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\27\26\1\362\23\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\22\26\1\363\30\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\15\26\1\364\35\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\365\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\366\31\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\367\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\21\26\1\370\31\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\3\26\1\371\47\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\2\26\1\372\50\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\2\26\1\373\50\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\22\26"+
    "\1\374\30\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\3\26\1\375"+
    "\47\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\3\26\1\376\47\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\10\26\1\377\42\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\u0100\1\14\1\15"+
    "\5\14\5\26\1\14\32\26\1\u0101\20\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\6\14"+
    "\4\356\62\14\1\15\1\u0102\1\14\1\15\5\14\5\356"+
    "\62\14\1\15\1\u0102\1\14\1\15\5\14\2\356\65\14"+
    "\1\15\1\u0102\1\14\1\15\74\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\16\26\1\u0103\34\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\23\26\1\u0104\27\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\27\26\1\u0105\23\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\u0106\1\14\1\15\5\14\5\26"+
    "\1\14\53\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\u0107\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\23\26\1\u0108\27\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\4\26\1\u0109\46\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\10\26\1\u010a\42\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\1\u010b\52\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\1\u010c\52\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\1\u010d\52\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\u010e\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\u010f\1\14\1\15\5\14\5\26\1\14\53\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\16\26\1\u0110\34\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\22\26\1\u0111\30\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\2\26\1\u0112\50\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\15\26\1\u0113\35\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\16\26\1\u0114\34\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\23\26"+
    "\1\u0115\27\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\4\26\1\u0116"+
    "\46\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\1\u0117\52\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\16\26\1\u0118\34\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\u0119\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\21\26"+
    "\1\u011a\31\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\14\26\1\u011b"+
    "\36\26\1\14\1\53\1\14\1\26\2\14\1\15\1\u011c"+
    "\1\14\1\15\5\14\5\26\1\14\53\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\10\26\1\u011d\42\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\21\26\1\u011e\31\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\u011f\1\14\1\15\5\14\5\26\1\14"+
    "\53\26\1\14\1\53\1\14\1\26\2\14\1\15\1\u0120"+
    "\1\14\1\15\5\14\5\26\1\14\53\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\16\1\14\1\15\5\14"+
    "\5\26\1\14\16\26\1\u0121\34\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\22\26\1\u0122\30\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\2\26\1\u0123\50\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\u0124\1\14\1\15\5\14\5\26\1\14\53\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\u0125\1\14"+
    "\1\15\5\14\5\26\1\14\53\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\17\26\1\u0126\33\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\1\26\1\u0127\51\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\4\26"+
    "\1\u0128\46\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\u0129\1\14\1\15\5\14\5\26\1\14\53\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\u012a\1\14\1\15"+
    "\5\14\5\26\1\14\53\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\16\1\14\1\15\5\14\5\26\1\14"+
    "\10\26\1\u012b\42\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\16\26"+
    "\1\u012c\34\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\13\26\1\u012d"+
    "\37\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\1\u012e\52\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\16\1\14\1\15"+
    "\5\14\5\26\1\14\16\26\1\u012f\34\26\1\14\1\53"+
    "\1\14\1\26\2\14\1\15\1\u0130\1\14\1\15\5\14"+
    "\5\26\1\14\53\26\1\14\1\53\1\14\1\26\2\14"+
    "\1\15\1\16\1\14\1\15\5\14\5\26\1\14\4\26"+
    "\1\u0131\46\26\1\14\1\53\1\14\1\26\2\14\1\15"+
    "\1\16\1\14\1\15\5\14\5\26\1\14\2\26\1\u0132"+
    "\50\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\15\26\1\u0133\35\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\u0134\1\14"+
    "\1\15\5\14\5\26\1\14\53\26\1\14\1\53\1\14"+
    "\1\26\2\14\1\15\1\16\1\14\1\15\5\14\5\26"+
    "\1\14\10\26\1\u0135\42\26\1\14\1\53\1\14\1\26"+
    "\2\14\1\15\1\u0136\1\14\1\15\5\14\5\26\1\14"+
    "\53\26\1\14\1\53\1\14\1\26\2\14\1\15\1\16"+
    "\1\14\1\15\5\14\5\26\1\14\16\26\1\u0137\34\26"+
    "\1\14\1\53\1\14\1\26\2\14\1\15\1\16\1\14"+
    "\1\15\5\14\5\26\1\14\15\26\1\u0138\35\26\1\14"+
    "\1\53\1\14\1\26\2\14\1\15\1\u0139\1\14\1\15"+
    "\5\14\5\26\1\14\53\26\1\14\1\53\1\14\1\26";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16832];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\4\11\1\1\2\11\2\0\1\11"+
    "\30\0\3\11\63\0\1\11\3\0\1\11\5\0\1\11"+
    "\11\0\1\11\34\0\1\11\20\0\1\11\15\0\1\11"+
    "\13\0\1\11\3\0\1\11\1\0\1\11\4\0\1\11"+
    "\7\0\1\11\4\0\3\11\4\0\1\11\7\0\1\11"+
    "\2\0\1\11\5\0\1\11\13\0\1\11\1\0\1\11"+
    "\10\0\1\11\1\0\1\11\3\0\2\11\6\0\2\11"+
    "\11\0\1\11\2\0\1\11\2\0\2\11\3\0\2\11"+
    "\3\0\2\11\5\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[313];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */

    private Symbol symbol(int type){
        return new Symbol(type, yytext());
    }



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StorageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, "Fin de linea");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error " + yytext());
            }
            // fall through
          case 52: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 53: break;
          case 3:
            { return symbol(OPEN_ROUND_BRACKET);
            }
            // fall through
          case 54: break;
          case 4:
            { return symbol(CLOSE_ROUND_BRACKET);
            }
            // fall through
          case 55: break;
          case 5:
            { return symbol(COMMA);
            }
            // fall through
          case 56: break;
          case 6:
            { return symbol(COLON);
            }
            // fall through
          case 57: break;
          case 7:
            { return symbol(OPEN_BRACE);
            }
            // fall through
          case 58: break;
          case 8:
            { return symbol(CLOSE_BRACE);
            }
            // fall through
          case 59: break;
          case 9:
            { return symbol(VALUE);
            }
            // fall through
          case 60: break;
          case 10:
            { return symbol(LITERAL);
            }
            // fall through
          case 61: break;
          case 11:
            { return symbol(ID);
            }
            // fall through
          case 62: break;
          case 12:
            { return symbol(ENTERO);
            }
            // fall through
          case 63: break;
          case 13:
            { return symbol(PARAM_ID);
            }
            // fall through
          case 64: break;
          case 14:
            { return symbol(NO);
            }
            // fall through
          case 65: break;
          case 15:
            { return symbol(SI);
            }
            // fall through
          case 66: break;
          case 16:
            { return symbol(OPCIONES);
            }
            // fall through
          case 67: break;
          case 17:
            { return symbol(PARAM_URL);
            }
            // fall through
          case 68: break;
          case 18:
            { return symbol(DARK);
            }
            // fall through
          case 69: break;
          case 19:
            { return symbol(PARAM_TEMA);
            }
            // fall through
          case 70: break;
          case 20:
            { return symbol(CLASS_BOTON);
            }
            // fall through
          case 71: break;
          case 21:
            { return symbol(PARAM_CLASE);
            }
            // fall through
          case 72: break;
          case 22:
            { return symbol(CLASS_COMBO);
            }
            // fall through
          case 73: break;
          case 23:
            { return symbol(PARAM_FILAS);
            }
            // fall through
          case 74: break;
          case 24:
            { return symbol(CLASS_RADIO);
            }
            // fall through
          case 75: break;
          case 25:
            { return symbol(WHITE);
            }
            // fall through
          case 76: break;
          case 26:
            { return symbol(INICIO_FORM);
            }
            // fall through
          case 77: break;
          case 27:
            { return symbol(INICIO_USER);
            }
            // fall through
          case 78: break;
          case 28:
            { return symbol(CENTRO);
            }
            // fall through
          case 79: break;
          case 29:
            { return symbol(CLASS_IMAGEN);
            }
            // fall through
          case 80: break;
          case 30:
            { return symbol(PARAM_NOMBRE_FORM);
            }
            // fall through
          case 81: break;
          case 31:
            { return symbol(PARAM_TITULO_FORM);
            }
            // fall through
          case 82: break;
          case 32:
            { return symbol(DERECHA);
            }
            // fall through
          case 83: break;
          case 33:
            { return symbol(CLASS_FICHERO);
            }
            // fall through
          case 84: break;
          case 34:
            { return symbol(PARAM_USUARIO);
            }
            // fall through
          case 85: break;
          case 35:
            { return symbol(FECHA);
            }
            // fall through
          case 86: break;
          case 36:
            { return symbol(CLASS_CHECKBOX);
            }
            // fall through
          case 87: break;
          case 37:
            { return symbol(PARAM_COLUMNAS);
            }
            // fall through
          case 88: break;
          case 38:
            { return symbol(PARAM_OPCIONES);
            }
            // fall through
          case 89: break;
          case 39:
            { return symbol(PARAM_PASSWORD);
            }
            // fall through
          case 90: break;
          case 40:
            { return symbol(IZQUIERDA);
            }
            // fall through
          case 91: break;
          case 41:
            { return symbol(PARAM_REQUERIDO);
            }
            // fall through
          case 92: break;
          case 42:
            { return symbol(PARAM_ALINEACION);
            }
            // fall through
          case 93: break;
          case 43:
            { return symbol(CLASS_AREA_TEXTO);
            }
            // fall through
          case 94: break;
          case 44:
            { return symbol(PARAM_FORMULARIO);
            }
            // fall through
          case 95: break;
          case 45:
            { return symbol(JUSTIFICAR);
            }
            // fall through
          case 96: break;
          case 46:
            { return symbol(CLASS_CAMPO_TEXTO);
            }
            // fall through
          case 97: break;
          case 47:
            { return symbol(PARAM_COMPONENTES);
            }
            // fall through
          case 98: break;
          case 48:
            { return symbol(PARAM_NOMBRE_CAMPO);
            }
            // fall through
          case 99: break;
          case 49:
            { return symbol(PARAM_TEXTO_VISIBLE);
            }
            // fall through
          case 100: break;
          case 50:
            { return symbol(PARAM_FECHA_CREACION);
            }
            // fall through
          case 101: break;
          case 51:
            { return symbol(PARAM_USUARIO_CREACION);
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
