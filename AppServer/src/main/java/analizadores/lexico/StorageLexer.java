// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: storageLexer.flex

package analizadores.lexico;

import java_cup.runtime.Symbol;
import static analizadores.sintactico.StorageSym.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
public class StorageLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\2\u1f00\1\u2000\7\u1f00\1\u2100\1\u2200\1\u2300"+
    "\1\u1f00\1\u2400\1\u2500\2\u1f00\31\u0100\1\u2600\121\u0100\1\u2700"+
    "\4\u0100\1\u2800\1\u0100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00"+
    "\1\u2e00\53\u0100\1\u2f00\41\u1f00\1\u0100\1\u3000\1\u3100\1\u0100"+
    "\1\u3200\1\u3300\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\24\u1f00\1\u5f00"+
    "\1\u6000\1\u1f00\1\u6100\1\u6200\1\u6300\1\u6400\2\u1f00\1\u6500"+
    "\5\u1f00\1\u6600\1\u6700\1\u6800\5\u1f00\1\u6900\1\u6a00\4\u1f00"+
    "\1\u6b00\2\u1f00\1\u6c00\16\u1f00\246\u0100\1\u6d00\20\u0100\1\u6e00"+
    "\1\u6f00\25\u0100\1\u7000\34\u0100\1\u7100\14\u1f00\2\u0100\1\u7200"+
    "\u0b06\u1f00\1\u2700\u02fe\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\4"+
    "\1\0\1\5\1\0\1\6\2\0\1\7\1\10\1\11"+
    "\2\0\1\12\1\13\1\14\1\0\1\15\1\16\1\17"+
    "\1\20\6\21\1\22\6\0\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\4\0\1\55"+
    "\1\0\1\56\1\57\1\53\1\60\1\61\1\62\1\53"+
    "\1\63\1\64\1\53\1\65\1\53\1\66\1\67\1\70"+
    "\2\53\1\71\1\72\1\73\1\74\1\53\1\75\3\53"+
    "\1\76\1\77\1\100\54\0\1\53\12\0\1\53\4\0"+
    "\1\53\5\0\27\53\1\0\37\53\1\0\u01ca\53\4\0"+
    "\14\53\16\0\5\53\7\0\1\53\1\0\1\53\21\0"+
    "\165\53\1\0\2\53\2\0\4\53\1\0\1\53\6\0"+
    "\1\53\1\0\3\53\1\0\1\53\1\0\24\53\1\0"+
    "\123\53\1\0\213\53\1\0\255\53\1\0\46\53\2\0"+
    "\1\53\6\0\51\53\10\0\55\53\1\0\1\53\1\0"+
    "\2\53\1\0\2\53\1\0\1\53\10\0\33\53\4\0"+
    "\4\53\35\0\13\53\5\0\100\53\12\101\4\0\146\53"+
    "\1\0\10\53\2\0\12\53\1\0\6\53\12\101\3\53"+
    "\2\0\1\53\20\0\73\53\2\0\145\53\16\0\12\101"+
    "\54\53\4\0\1\53\2\0\1\53\2\0\56\53\22\0"+
    "\34\53\4\0\13\53\65\0\25\53\1\0\10\53\25\0"+
    "\17\53\1\0\201\53\2\0\12\101\1\0\23\53\1\0"+
    "\10\53\2\0\2\53\2\0\26\53\1\0\7\53\1\0"+
    "\1\53\3\0\4\53\2\0\11\53\2\0\2\53\2\0"+
    "\4\53\10\0\1\53\4\0\2\53\1\0\5\53\2\0"+
    "\12\101\2\53\12\0\1\53\1\0\1\53\2\0\3\53"+
    "\1\0\6\53\4\0\2\53\2\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\2\53\1\0\2\53\2\0\1\53"+
    "\1\0\5\53\4\0\2\53\2\0\3\53\3\0\1\53"+
    "\7\0\4\53\1\0\1\53\7\0\12\101\6\53\13\0"+
    "\3\53\1\0\11\53\1\0\3\53\1\0\26\53\1\0"+
    "\7\53\1\0\2\53\1\0\5\53\2\0\12\53\1\0"+
    "\3\53\1\0\3\53\2\0\1\53\17\0\4\53\2\0"+
    "\12\101\11\0\7\53\1\0\3\53\1\0\10\53\2\0"+
    "\2\53\2\0\26\53\1\0\7\53\1\0\2\53\1\0"+
    "\5\53\2\0\11\53\2\0\2\53\2\0\3\53\10\0"+
    "\2\53\4\0\2\53\1\0\5\53\2\0\12\101\1\0"+
    "\1\53\20\0\2\53\1\0\6\53\3\0\3\53\1\0"+
    "\4\53\3\0\2\53\1\0\1\53\1\0\2\53\3\0"+
    "\2\53\3\0\3\53\3\0\14\53\4\0\5\53\3\0"+
    "\3\53\1\0\4\53\2\0\1\53\6\0\1\53\16\0"+
    "\12\101\20\0\15\53\1\0\3\53\1\0\27\53\1\0"+
    "\20\53\3\0\10\53\1\0\3\53\1\0\4\53\7\0"+
    "\2\53\1\0\3\53\5\0\4\53\2\0\12\101\20\0"+
    "\4\53\1\0\10\53\1\0\3\53\1\0\27\53\1\0"+
    "\12\53\1\0\5\53\2\0\11\53\1\0\3\53\1\0"+
    "\4\53\7\0\2\53\7\0\1\53\1\0\4\53\2\0"+
    "\12\101\1\0\2\53\15\0\4\53\1\0\10\53\1\0"+
    "\3\53\1\0\63\53\1\0\3\53\1\0\5\53\5\0"+
    "\4\53\7\0\5\53\2\0\12\101\12\0\6\53\2\0"+
    "\2\53\1\0\22\53\3\0\30\53\1\0\11\53\1\0"+
    "\1\53\2\0\7\53\3\0\1\53\4\0\6\53\1\0"+
    "\1\53\1\0\10\53\6\0\12\101\2\0\2\53\15\0"+
    "\72\53\5\0\17\53\1\0\12\101\47\0\2\53\1\0"+
    "\1\53\1\0\5\53\1\0\30\53\1\0\1\53\1\0"+
    "\27\53\2\0\5\53\1\0\1\53\1\0\6\53\2\0"+
    "\12\101\2\0\4\53\40\0\1\53\27\0\2\53\6\0"+
    "\12\101\13\0\1\53\1\0\1\53\1\0\1\53\4\0"+
    "\12\53\1\0\44\53\4\0\24\53\1\0\22\53\1\0"+
    "\44\53\11\0\1\53\71\0\100\53\12\101\6\0\100\53"+
    "\12\101\4\53\2\0\46\53\1\0\1\53\5\0\1\53"+
    "\2\0\53\53\1\0\115\53\1\0\4\53\2\0\7\53"+
    "\1\0\1\53\1\0\4\53\2\0\51\53\1\0\4\53"+
    "\2\0\41\53\1\0\4\53\2\0\7\53\1\0\1\53"+
    "\1\0\4\53\2\0\17\53\1\0\71\53\1\0\4\53"+
    "\2\0\103\53\2\0\3\53\40\0\20\53\20\0\126\53"+
    "\2\0\6\53\3\0\u016c\53\2\0\21\53\1\0\32\53"+
    "\5\0\113\53\3\0\13\53\7\0\15\53\1\0\7\53"+
    "\13\0\25\53\13\0\24\53\14\0\15\53\1\0\3\53"+
    "\1\0\2\53\14\0\124\53\3\0\1\53\4\0\2\53"+
    "\2\0\12\101\41\0\3\53\2\0\12\101\6\0\131\53"+
    "\7\0\53\53\5\0\106\53\12\0\37\53\1\0\14\53"+
    "\4\0\14\53\12\0\12\101\36\53\2\0\5\53\13\0"+
    "\54\53\4\0\32\53\6\0\12\101\46\0\34\53\4\0"+
    "\77\53\1\0\35\53\2\0\1\53\12\101\6\0\12\101"+
    "\15\0\1\53\10\0\17\53\101\0\114\53\4\0\12\101"+
    "\21\0\11\53\14\0\60\53\12\101\72\53\14\0\70\53"+
    "\10\0\12\101\3\0\3\53\12\101\44\53\2\0\11\53"+
    "\7\0\53\53\2\0\3\53\20\0\3\53\1\0\47\53"+
    "\5\0\372\53\1\0\33\53\2\0\6\53\2\0\46\53"+
    "\2\0\6\53\2\0\10\53\1\0\1\53\1\0\1\53"+
    "\1\0\1\53\1\0\37\53\2\0\65\53\1\0\7\53"+
    "\1\0\1\53\3\0\3\53\1\0\7\53\3\0\4\53"+
    "\2\0\6\53\4\0\15\53\5\0\3\53\1\0\7\53"+
    "\102\0\2\53\23\0\1\53\34\0\1\53\15\0\1\53"+
    "\20\0\15\53\63\0\41\53\21\0\1\53\4\0\1\53"+
    "\2\0\12\53\1\0\1\53\3\0\5\53\6\0\1\53"+
    "\1\0\1\53\1\0\1\53\1\0\4\53\1\0\13\53"+
    "\2\0\4\53\5\0\5\53\4\0\1\53\21\0\51\53"+
    "\u022d\0\64\53\26\0\57\53\1\0\57\53\1\0\205\53"+
    "\6\0\11\53\14\0\46\53\1\0\1\53\5\0\1\53"+
    "\2\0\70\53\7\0\1\53\17\0\30\53\11\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\7\53\1\0\7\53"+
    "\1\0\7\53\1\0\7\53\1\0\7\53\1\0\40\53"+
    "\57\0\1\53\325\0\3\53\31\0\17\53\1\0\5\53"+
    "\2\0\5\53\4\0\126\53\2\0\2\53\2\0\3\53"+
    "\1\0\132\53\1\0\4\53\5\0\53\53\1\0\136\53"+
    "\21\0\33\53\65\0\306\53\112\0\360\53\20\0\215\53"+
    "\103\0\56\53\2\0\15\53\3\0\20\53\12\101\2\53"+
    "\24\0\63\53\1\0\12\53\1\0\163\53\45\0\11\53"+
    "\2\0\147\53\2\0\65\53\2\0\5\53\60\0\61\53"+
    "\30\0\64\53\14\0\106\53\12\0\12\101\6\0\30\53"+
    "\3\0\1\53\1\0\3\53\12\101\44\53\2\0\44\53"+
    "\14\0\35\53\3\0\101\53\16\0\1\53\12\101\6\0"+
    "\20\53\12\101\5\53\1\0\67\53\11\0\16\53\2\0"+
    "\12\101\6\0\27\53\3\0\111\53\30\0\3\53\2\0"+
    "\20\53\2\0\5\53\12\0\6\53\2\0\6\53\2\0"+
    "\6\53\11\0\7\53\1\0\7\53\1\0\53\53\1\0"+
    "\14\53\10\0\173\53\1\0\2\53\2\0\12\101\6\0"+
    "\244\53\14\0\27\53\4\0\61\53\4\0\156\53\2\0"+
    "\152\53\46\0\7\53\14\0\5\53\5\0\14\53\1\0"+
    "\15\53\1\0\5\53\1\0\1\53\1\0\2\53\1\0"+
    "\2\53\1\0\154\53\41\0\153\53\22\0\100\53\2\0"+
    "\66\53\50\0\14\53\4\0\20\53\20\0\20\53\3\0"+
    "\2\53\30\0\3\53\40\0\5\53\1\0\207\53\23\0"+
    "\12\101\7\0\32\53\4\0\1\53\1\0\32\53\13\0"+
    "\131\53\3\0\6\53\2\0\6\53\2\0\6\53\2\0"+
    "\3\53\43\0\14\53\1\0\32\53\1\0\23\53\1\0"+
    "\2\53\1\0\17\53\2\0\16\53\42\0\173\53\105\0"+
    "\65\53\210\0\1\53\202\0\35\53\3\0\61\53\17\0"+
    "\1\53\37\0\40\53\15\0\36\53\5\0\53\53\5\0"+
    "\36\53\2\0\44\53\4\0\10\53\1\0\5\53\52\0"+
    "\236\53\2\0\12\101\6\0\44\53\4\0\44\53\4\0"+
    "\50\53\10\0\64\53\234\0\67\53\11\0\26\53\12\0"+
    "\10\53\230\0\6\53\2\0\1\53\1\0\54\53\1\0"+
    "\2\53\3\0\1\53\2\0\27\53\12\0\27\53\11\0"+
    "\37\53\101\0\23\53\1\0\2\53\12\0\26\53\12\0"+
    "\32\53\106\0\70\53\6\0\2\53\100\0\4\53\1\0"+
    "\2\53\5\0\10\53\1\0\3\53\1\0\35\53\2\0"+
    "\3\53\4\0\1\53\40\0\35\53\3\0\35\53\43\0"+
    "\10\53\1\0\36\53\31\0\66\53\12\0\26\53\12\0"+
    "\23\53\15\0\22\53\156\0\111\53\67\0\63\53\15\0"+
    "\63\53\15\0\50\53\10\0\12\101\306\0\35\53\12\0"+
    "\1\53\10\0\41\53\217\0\27\53\11\0\107\53\37\0"+
    "\12\101\17\0\74\53\25\0\31\53\7\0\12\101\6\0"+
    "\65\53\1\0\12\101\4\0\3\53\11\0\44\53\2\0"+
    "\1\53\11\0\105\53\4\0\4\53\3\0\12\101\1\53"+
    "\1\0\1\53\43\0\22\53\1\0\45\53\6\0\1\53"+
    "\101\0\7\53\1\0\1\53\1\0\4\53\1\0\17\53"+
    "\1\0\12\53\7\0\73\53\5\0\12\101\6\0\4\53"+
    "\1\0\10\53\2\0\2\53\2\0\26\53\1\0\7\53"+
    "\1\0\2\53\1\0\5\53\1\0\12\53\2\0\2\53"+
    "\2\0\3\53\2\0\1\53\6\0\1\53\5\0\7\53"+
    "\2\0\7\53\3\0\5\53\213\0\113\53\5\0\12\101"+
    "\4\0\2\53\40\0\106\53\1\0\1\53\10\0\12\101"+
    "\246\0\66\53\2\0\11\53\27\0\6\53\42\0\101\53"+
    "\3\0\1\53\13\0\12\101\46\0\71\53\7\0\12\101"+
    "\66\0\33\53\2\0\17\53\4\0\12\101\306\0\73\53"+
    "\145\0\100\53\12\101\25\0\1\53\240\0\10\53\2\0"+
    "\56\53\2\0\10\53\1\0\2\53\33\0\77\53\10\0"+
    "\1\53\10\0\112\53\3\0\1\53\42\0\71\53\7\0"+
    "\11\53\1\0\55\53\1\0\11\53\17\0\12\101\30\0"+
    "\36\53\2\0\26\53\1\0\16\53\111\0\7\53\1\0"+
    "\2\53\1\0\54\53\3\0\1\53\1\0\2\53\1\0"+
    "\11\53\10\0\12\101\6\0\6\53\1\0\2\53\1\0"+
    "\45\53\1\0\2\53\1\0\6\53\7\0\12\101\u0136\0"+
    "\27\53\11\0\232\53\146\0\157\53\21\0\304\53\274\0"+
    "\57\53\321\0\107\53\271\0\71\53\7\0\37\53\1\0"+
    "\12\101\146\0\36\53\2\0\5\53\13\0\67\53\11\0"+
    "\4\53\14\0\12\101\11\0\25\53\5\0\23\53\260\0"+
    "\100\53\200\0\113\53\4\0\71\53\7\0\21\53\100\0"+
    "\2\53\1\0\1\53\34\0\370\53\10\0\363\53\15\0"+
    "\37\53\61\0\3\53\21\0\4\53\10\0\u018c\53\4\0"+
    "\153\53\5\0\15\53\3\0\11\53\7\0\12\53\3\0"+
    "\2\53\306\0\5\53\3\0\6\53\10\0\10\53\2\0"+
    "\7\53\36\0\4\53\224\0\3\53\273\0\125\53\1\0"+
    "\107\53\1\0\2\53\2\0\1\53\2\0\2\53\2\0"+
    "\4\53\1\0\14\53\1\0\1\53\1\0\7\53\1\0"+
    "\101\53\1\0\4\53\2\0\10\53\1\0\7\53\1\0"+
    "\34\53\1\0\4\53\1\0\5\53\1\0\1\53\3\0"+
    "\7\53\1\0\u0154\53\2\0\31\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\37\53\1\0\31\53\1\0\37\53\1\0\31\53\1\0"+
    "\10\53\2\0\62\101\67\53\4\0\62\53\10\0\1\53"+
    "\16\0\1\53\26\0\5\53\1\0\17\53\120\0\7\53"+
    "\1\0\21\53\2\0\7\53\1\0\2\53\1\0\5\53"+
    "\325\0\55\53\3\0\16\53\2\0\12\101\4\0\1\53"+
    "\u0171\0\60\53\12\101\6\0\305\53\13\0\7\53\51\0"+
    "\114\53\4\0\12\101\246\0\4\53\1\0\33\53\1\0"+
    "\2\53\1\0\1\53\2\0\1\53\1\0\12\53\1\0"+
    "\4\53\1\0\1\53\1\0\1\53\6\0\1\53\4\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\3\53\1\0"+
    "\2\53\1\0\1\53\2\0\1\53\1\0\1\53\1\0"+
    "\1\53\1\0\1\53\1\0\1\53\1\0\2\53\1\0"+
    "\1\53\2\0\4\53\1\0\7\53\1\0\4\53\1\0"+
    "\4\53\1\0\1\53\1\0\12\53\1\0\21\53\5\0"+
    "\3\53\1\0\5\53\1\0\21\53\164\0\32\53\6\0"+
    "\32\53\6\0\32\53\166\0\327\53\51\0\65\53\13\0"+
    "\336\53\2\0\u0182\53\16\0\u0131\53\37\0\36\53\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[29440];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\1\1\7\1\10\2\0\1\11\30\0\1\12\1\13"+
    "\1\14\63\0\1\15\3\0\1\16\5\0\1\17\11\0"+
    "\1\20\34\0\1\21\20\0\1\22\15\0\1\23\13\0"+
    "\1\24\3\0\1\25\1\0\1\26\4\0\1\27\7\0"+
    "\1\30\4\0\1\31\1\32\1\33\4\0\1\34\7\0"+
    "\1\35\2\0\1\36\5\0\1\37\13\0\1\40\1\0"+
    "\1\41\10\0\1\42\1\0\1\43\3\0\1\44\1\45"+
    "\6\0\1\46\1\47\11\0\1\50\2\0\1\51\2\0"+
    "\1\52\1\53\3\0\1\54\1\55\3\0\1\56\1\57"+
    "\5\0\1\60\3\0\1\61\1\0\1\62\2\0\1\63";

  private static int [] zzUnpackAction() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\204\0\306\0\102\0\102\0\102"+
    "\0\102\0\u0108\0\102\0\102\0\u014a\0\u018c\0\102\0\u01ce"+
    "\0\u0210\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de"+
    "\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee"+
    "\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102"+
    "\0\102\0\102\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\102\0\u1524\0\u1566"+
    "\0\u15a8\0\102\0\u15ea\0\u162c\0\u166e\0\u16b0\0\u16f2\0\102"+
    "\0\u1734\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902"+
    "\0\u1944\0\102\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0"+
    "\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\102\0\u20be"+
    "\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c\0\u22ce"+
    "\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u249c\0\102"+
    "\0\u24de\0\u2520\0\u2562\0\u25a4\0\u25e6\0\u2628\0\u266a\0\u26ac"+
    "\0\u26ee\0\u2730\0\u2772\0\u27b4\0\u27f6\0\102\0\u2838\0\u287a"+
    "\0\u28bc\0\u28fe\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u2a8a"+
    "\0\u2acc\0\102\0\u2b0e\0\u2b50\0\u2b92\0\102\0\u2bd4\0\102"+
    "\0\u2c16\0\u2c58\0\u2c9a\0\u2cdc\0\102\0\u2d1e\0\u2d60\0\u2da2"+
    "\0\u2de4\0\u2e26\0\u2e68\0\u2eaa\0\102\0\u2eec\0\u2f2e\0\u2f70"+
    "\0\u2fb2\0\102\0\102\0\102\0\u2ff4\0\u3036\0\u3078\0\u30ba"+
    "\0\102\0\u30fc\0\u313e\0\u3180\0\u31c2\0\u3204\0\u3246\0\u3288"+
    "\0\102\0\u32ca\0\u330c\0\102\0\u334e\0\u3390\0\u33d2\0\u3414"+
    "\0\u3456\0\102\0\u3498\0\u34da\0\u351c\0\u355e\0\u35a0\0\u35e2"+
    "\0\u3624\0\u3666\0\u36a8\0\u36ea\0\u372c\0\102\0\u376e\0\102"+
    "\0\u37b0\0\u37f2\0\u3834\0\u3876\0\u38b8\0\u38fa\0\u393c\0\u397e"+
    "\0\102\0\u39c0\0\102\0\u3a02\0\u3a44\0\u3a86\0\102\0\102"+
    "\0\u3ac8\0\u3b0a\0\u3b4c\0\u3b8e\0\u3bd0\0\u3c12\0\102\0\102"+
    "\0\u3c54\0\u3c96\0\u3cd8\0\u3d1a\0\u3d5c\0\u3d9e\0\u3de0\0\u3e22"+
    "\0\u3e64\0\102\0\u3ea6\0\u3ee8\0\102\0\u3f2a\0\u3f6c\0\102"+
    "\0\102\0\u3fae\0\u3ff0\0\u4032\0\102\0\102\0\u4074\0\u40b6"+
    "\0\u40f8\0\102\0\102\0\u413a\0\u417c\0\u41be\0\u4200\0\u4242"+
    "\0\102\0\u4284\0\u42c6\0\u4308\0\102\0\u434a\0\102\0\u438c"+
    "\0\u43ce\0\102";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\3\1\5\2\2\1\6\1\7"+
    "\1\10\7\2\1\11\35\2\1\12\15\2\1\13\1\2"+
    "\1\14\1\2\104\0\1\3\77\0\4\15\1\16\1\17"+
    "\1\20\1\16\3\15\1\20\1\15\1\21\4\22\1\15"+
    "\1\23\1\24\1\25\1\26\1\27\1\30\2\27\1\31"+
    "\1\32\3\27\1\33\1\34\1\35\1\27\1\36\1\37"+
    "\1\40\1\41\1\27\1\42\3\27\1\43\2\27\1\44"+
    "\6\27\1\45\2\27\1\37\2\27\1\42\3\15\1\46"+
    "\57\0\1\47\22\0\4\15\1\16\1\17\1\15\1\16"+
    "\72\15\5\16\1\50\74\16\4\15\1\16\1\51\1\20"+
    "\1\16\3\15\1\20\1\15\5\20\1\15\53\20\3\15"+
    "\1\20\4\15\1\16\1\52\1\15\1\16\5\15\5\53"+
    "\1\15\53\27\1\15\1\54\1\15\1\53\4\15\1\16"+
    "\1\52\1\15\1\16\5\15\5\55\1\15\53\27\1\15"+
    "\1\54\1\15\1\53\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\13\27\1\56\5\27\1\57\31\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\16\27\1\60\34\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\1\61\3\27\1\62\2\27\1\63"+
    "\3\27\1\64\2\27\1\65\34\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\1\66\3\27\1\67\26\27\1\66\17\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\53\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\4\27\1\70\3\27\1\71\5\27\1\72\34\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\3\27\1\73\10\27\1\74\14\27"+
    "\1\75\21\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\24\27\1\76"+
    "\26\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\16\27\1\77\26\27"+
    "\1\100\5\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\17\27\1\101"+
    "\33\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\1\102\52\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\1\103\3\27\1\104\46\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\10\27\1\105\30\27\1\105\11\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\4\27\1\106\3\27\1\107"+
    "\42\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\21\27\1\110\1\111"+
    "\30\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\7\27\1\112\30\27"+
    "\1\112\12\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\51\1\20\1\16\3\15\1\20\1\15\5\43\1\15"+
    "\53\43\1\15\1\54\1\15\1\43\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\1\66\32\27\1\66"+
    "\17\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\16\27\1\100\26\27"+
    "\1\100\5\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\53\1\15\53\27\1\15"+
    "\1\54\1\15\1\53\14\0\1\113\65\0\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\114\1\15\53\27\1\15"+
    "\1\54\1\15\1\114\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\115\1\15\53\115\3\15\1\115\4\15\1\16"+
    "\1\52\1\15\1\16\5\15\5\116\1\15\53\27\1\15"+
    "\1\54\1\15\1\114\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\10\27\1\117\42\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\4\27\1\120\46\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\23\27\1\121\27\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\14\27\1\122\36\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\15\27"+
    "\1\123\35\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\4\27\1\124"+
    "\46\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\1\125\52\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\13\27\1\126\1\127\36\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\130\24\27\1\130\4\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\21\27\1\131\31\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\2\27\1\132\50\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\2\27\1\133\10\27\1\134\37\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\135\31\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\136\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\1\137"+
    "\52\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\20\27\1\140\32\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\22\27\1\141\30\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\142\1\15\1\16"+
    "\5\15\5\27\1\15\14\27\1\143\36\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\142\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\2\27"+
    "\1\144\50\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\22\27\1\145"+
    "\30\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\3\27\1\146\47\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\20\27\1\147\32\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\150\1\15\1\16"+
    "\5\15\5\27\1\15\53\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\14\27\1\151\12\27\1\152\23\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\23\27\1\153\27\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\13\27\1\154\37\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\24\27"+
    "\1\155\26\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\10\27\1\156"+
    "\30\27\1\156\11\27\1\15\1\54\1\15\1\27\62\0"+
    "\1\157\11\0\1\160\5\0\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\161\1\15\53\27\1\15\1\54\1\15"+
    "\1\161\4\15\1\16\1\162\1\15\1\16\5\15\5\115"+
    "\1\15\53\115\1\15\1\54\1\15\1\115\4\15\1\16"+
    "\1\52\1\15\1\16\5\15\5\163\1\15\53\27\1\15"+
    "\1\54\1\15\1\161\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\15\27\1\164\35\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\1\165\52\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\16\27\1\166\34\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\17\27"+
    "\1\167\33\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\23\27\1\170"+
    "\27\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\2\27\1\171\50\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\22\27\1\172\30\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\24\27\1\173\26\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\1\27\1\174\15\27\1\175\33\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\12\27\1\176\27\27\1\176\10\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\4\27\1\177\46\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\7\27\1\200\43\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\7\27\1\201\43\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\1\202\52\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\14\27"+
    "\1\203\36\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\6\27\1\204"+
    "\44\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\24\27\1\205\26\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\23\27\1\206\27\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\1\27\1\207\51\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\10\27\1\210\42\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\22\27\1\211\30\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\10\27\1\212\42\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\24\27"+
    "\1\213\26\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\1\214\52\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\23\27\1\215\27\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\24\27\1\216\26\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\217\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\1\220"+
    "\52\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\23\27\1\221\24\27"+
    "\1\221\2\27\1\15\1\54\1\15\1\27\70\0\1\222"+
    "\103\0\1\223\7\0\4\15\1\16\1\17\1\15\1\16"+
    "\3\15\1\224\1\15\5\27\1\15\53\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\52\1\15\1\16\3\15"+
    "\1\224\1\15\5\225\1\15\53\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\4\27\1\226\46\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\32\27\1\227\20\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\15\27"+
    "\1\230\35\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\16\27\1\231"+
    "\34\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\21\27\1\232\31\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\12\27\1\233\40\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\4\27\1\234\46\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\14\27\1\235\36\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\16\27\1\236\34\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\16\27\1\237\34\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\240\1\15\1\16\5\15\5\27\1\15\53\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\2\27\1\241\50\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\1\242\52\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\4\27\1\243\46\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\22\27\1\244\30\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\24\27"+
    "\1\245\26\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\4\27\1\246"+
    "\46\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\10\27\1\247\42\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\10\27\1\250\42\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\251\31\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\16\27\1\252\34\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\26\27\1\253\24\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\16\27\1\254\34\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\4\27"+
    "\1\255\46\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\256\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\16\27\1\257\34\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\13\27\1\260\37\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\21\27\1\261\31\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\4\27\1\262\31\27\1\262\14\27\1\15\1\54\1\15"+
    "\1\27\71\0\1\263\71\0\1\264\20\0\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\1\265\1\266\3\267\64\15"+
    "\1\16\1\52\1\15\1\16\5\15\5\225\1\15\53\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\1\270\52\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\23\27\1\271\27\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\272\1\15\1\16\5\15\5\27"+
    "\1\15\53\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\32\27\1\273"+
    "\20\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\16\27\1\274\34\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\1\27\1\275\51\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\276\1\15\1\16"+
    "\5\15\5\27\1\15\53\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\15\27\1\277\35\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\300\1\15\1\16\5\15\5\27\1\15\53\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\15\27\1\301\35\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\7\27\1\302\43\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\32\27\1\303\20\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\21\27\1\304\31\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\305\1\15\1\16\5\15\5\27\1\15"+
    "\53\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\13\27\1\306\37\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\15\27\1\307\35\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\4\27\1\310\46\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\5\27\1\311\45\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\4\27\1\312\46\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\15\27\1\313\35\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\16\27"+
    "\1\314\34\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\315\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\316\31\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\32\27\1\317\20\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\16\27\1\320\34\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\10\27\1\321\42\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\322\1\15\1\16\5\15\5\27\1\15\53\27"+
    "\1\15\1\54\1\15\1\27\66\0\1\323\104\0\1\324"+
    "\10\0\4\15\1\16\1\17\1\15\1\16\6\15\4\267"+
    "\64\15\1\16\1\17\1\15\1\16\3\15\1\325\1\15"+
    "\3\267\66\15\1\16\1\17\1\15\1\16\3\15\1\325"+
    "\72\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\2\27\1\326\50\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\4\27"+
    "\1\327\46\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\23\27\1\330"+
    "\27\27\1\15\1\54\1\15\1\27\4\15\1\16\1\331"+
    "\1\15\1\16\5\15\5\27\1\15\53\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\16\27\1\332\34\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\1\333\52\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\4\27"+
    "\1\334\46\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\1\335\52\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\2\27\1\336\50\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\16\27\1\337\34\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\1\340\52\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\341\1\15\1\16\5\15\5\27\1\15"+
    "\53\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\21\27\1\342\31\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\10\27\1\343\42\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\344\1\15\1\16"+
    "\5\15\5\27\1\15\32\27\1\345\20\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\4\27\1\346\46\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\21\27\1\347\31\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\10\27\1\350\42\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\25\27"+
    "\1\351\25\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\352\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\16\27\1\353\34\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\1\354\2\355\1\356\1\357\64\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\10\27\1\360\42\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\27\27\1\361\23\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\4\27\1\362\46\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\27\27\1\363\23\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\22\27\1\364\30\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\15\27"+
    "\1\365\35\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\366\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\367\31\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\370\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\21\27"+
    "\1\371\31\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\3\27\1\372"+
    "\47\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\2\27\1\373\50\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\2\27\1\374\50\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\22\27\1\375\30\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\3\27\1\376\47\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\3\27\1\377\47\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\10\27\1\u0100\42\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\u0101\1\15\1\16\5\15\5\27\1\15\32\27"+
    "\1\u0102\20\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\6\15\4\357\64\15\1\16\1\u0103"+
    "\1\15\1\16\5\15\5\357\64\15\1\16\1\u0103\1\15"+
    "\1\16\5\15\2\357\67\15\1\16\1\u0103\1\15\1\16"+
    "\76\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\16\27\1\u0104\34\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\23\27"+
    "\1\u0105\27\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\27\27\1\u0106"+
    "\23\27\1\15\1\54\1\15\1\27\4\15\1\16\1\u0107"+
    "\1\15\1\16\5\15\5\27\1\15\53\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\u0108\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\23\27"+
    "\1\u0109\27\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\4\27\1\u010a"+
    "\46\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\10\27\1\u010b\42\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\1\u010c\52\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\1\u010d\52\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\1\u010e\52\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\u010f\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\u0110\1\15\1\16"+
    "\5\15\5\27\1\15\53\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\16\27\1\u0111\34\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\22\27"+
    "\1\u0112\30\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\2\27\1\u0113"+
    "\50\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\15\27\1\u0114\35\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\16\27\1\u0115\34\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\23\27\1\u0116\27\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\4\27\1\u0117\46\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\1\u0118\52\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\16\27"+
    "\1\u0119\34\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\u011a\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\21\27\1\u011b\31\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\14\27\1\u011c\36\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\u011d\1\15\1\16\5\15\5\27"+
    "\1\15\53\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\10\27\1\u011e"+
    "\42\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\21\27\1\u011f\31\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\u0120\1\15"+
    "\1\16\5\15\5\27\1\15\53\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\u0121\1\15\1\16\5\15\5\27"+
    "\1\15\53\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\17\1\15\1\16\5\15\5\27\1\15\16\27\1\u0122"+
    "\34\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\22\27\1\u0123\30\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\2\27\1\u0124\50\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\u0125\1\15\1\16"+
    "\5\15\5\27\1\15\53\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\u0126\1\15\1\16\5\15\5\27\1\15"+
    "\53\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\17\27\1\u0127\33\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\1\27\1\u0128\51\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\4\27\1\u0129\46\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\u012a\1\15\1\16\5\15"+
    "\5\27\1\15\53\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\u012b\1\15\1\16\5\15\5\27\1\15\53\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\17\1\15"+
    "\1\16\5\15\5\27\1\15\10\27\1\u012c\42\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\16\27\1\u012d\34\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\13\27\1\u012e\37\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\1\u012f\52\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\17\1\15\1\16\5\15\5\27\1\15\16\27"+
    "\1\u0130\34\27\1\15\1\54\1\15\1\27\4\15\1\16"+
    "\1\u0131\1\15\1\16\5\15\5\27\1\15\53\27\1\15"+
    "\1\54\1\15\1\27\4\15\1\16\1\17\1\15\1\16"+
    "\5\15\5\27\1\15\4\27\1\u0132\46\27\1\15\1\54"+
    "\1\15\1\27\4\15\1\16\1\17\1\15\1\16\5\15"+
    "\5\27\1\15\2\27\1\u0133\50\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\15\27\1\u0134\35\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\u0135\1\15\1\16\5\15\5\27\1\15"+
    "\53\27\1\15\1\54\1\15\1\27\4\15\1\16\1\17"+
    "\1\15\1\16\5\15\5\27\1\15\10\27\1\u0136\42\27"+
    "\1\15\1\54\1\15\1\27\4\15\1\16\1\u0137\1\15"+
    "\1\16\5\15\5\27\1\15\53\27\1\15\1\54\1\15"+
    "\1\27\4\15\1\16\1\17\1\15\1\16\5\15\5\27"+
    "\1\15\16\27\1\u0138\34\27\1\15\1\54\1\15\1\27"+
    "\4\15\1\16\1\17\1\15\1\16\5\15\5\27\1\15"+
    "\15\27\1\u0139\35\27\1\15\1\54\1\15\1\27\4\15"+
    "\1\16\1\u013a\1\15\1\16\5\15\5\27\1\15\53\27"+
    "\1\15\1\54\1\15\1\27";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17424];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\4\11\1\1\2\11\2\0\1\11"+
    "\30\0\3\11\63\0\1\11\3\0\1\11\5\0\1\11"+
    "\11\0\1\11\34\0\1\11\20\0\1\11\15\0\1\11"+
    "\13\0\1\11\3\0\1\11\1\0\1\11\4\0\1\11"+
    "\7\0\1\11\4\0\3\11\4\0\1\11\7\0\1\11"+
    "\2\0\1\11\5\0\1\11\13\0\1\11\1\0\1\11"+
    "\10\0\1\11\1\0\1\11\3\0\2\11\6\0\2\11"+
    "\11\0\1\11\2\0\1\11\2\0\2\11\3\0\2\11"+
    "\3\0\2\11\5\0\1\11\3\0\1\11\1\0\1\11"+
    "\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[314];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */



  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public StorageLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return new Symbol(EOF, "Fin de linea");
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error " + yytext());
            }
            // fall through
          case 52: break;
          case 2:
            { /*Ignorar*/
            }
            // fall through
          case 53: break;
          case 3:
            { return new Symbol(OPEN_ROUND_BRACKET, yytext());
            }
            // fall through
          case 54: break;
          case 4:
            { return new Symbol(CLOSE_ROUND_BRACKET, yytext());
            }
            // fall through
          case 55: break;
          case 5:
            { return new Symbol(COMMA, yytext());
            }
            // fall through
          case 56: break;
          case 6:
            { return new Symbol(COLON, yytext());
            }
            // fall through
          case 57: break;
          case 7:
            { return new Symbol(OPEN_BRACE, yytext());
            }
            // fall through
          case 58: break;
          case 8:
            { return new Symbol(CLOSE_BRACE, yytext());
            }
            // fall through
          case 59: break;
          case 9:
            { return new Symbol(VALUE, yytext());
            }
            // fall through
          case 60: break;
          case 10:
            { return new Symbol(LITERAL, yytext());
            }
            // fall through
          case 61: break;
          case 11:
            { return new Symbol(ID, yytext());
            }
            // fall through
          case 62: break;
          case 12:
            { return new Symbol(ENTERO, yytext());
            }
            // fall through
          case 63: break;
          case 13:
            { return new Symbol(PARAM_ID, yytext());
            }
            // fall through
          case 64: break;
          case 14:
            { return new Symbol(NO, yytext());
            }
            // fall through
          case 65: break;
          case 15:
            { return new Symbol(SI, yytext());
            }
            // fall through
          case 66: break;
          case 16:
            { return new Symbol(OPCIONES, yytext());
            }
            // fall through
          case 67: break;
          case 17:
            { return new Symbol(PARAM_URL, yytext());
            }
            // fall through
          case 68: break;
          case 18:
            { return new Symbol(DARK, yytext());
            }
            // fall through
          case 69: break;
          case 19:
            { return new Symbol(PARAM_TEMA, yytext());
            }
            // fall through
          case 70: break;
          case 20:
            { return new Symbol(CLASS_BOTON, yytext());
            }
            // fall through
          case 71: break;
          case 21:
            { return new Symbol(PARAM_CLASE, yytext());
            }
            // fall through
          case 72: break;
          case 22:
            { return new Symbol(CLASS_COMBO, yytext());
            }
            // fall through
          case 73: break;
          case 23:
            { return new Symbol(PARAM_FILAS, yytext());
            }
            // fall through
          case 74: break;
          case 24:
            { return new Symbol(CLASS_RADIO, yytext());
            }
            // fall through
          case 75: break;
          case 25:
            { return new Symbol(WHITE, yytext());
            }
            // fall through
          case 76: break;
          case 26:
            { return new Symbol(INICIO_FORM, yytext());
            }
            // fall through
          case 77: break;
          case 27:
            { return new Symbol(INICIO_USER, yytext());
            }
            // fall through
          case 78: break;
          case 28:
            { return new Symbol(CENTRO, yytext());
            }
            // fall through
          case 79: break;
          case 29:
            { return new Symbol(CLASS_IMAGEN, yytext());
            }
            // fall through
          case 80: break;
          case 30:
            { return new Symbol(PARAM_NOMBRE_FORM, yytext());
            }
            // fall through
          case 81: break;
          case 31:
            { return new Symbol(PARAM_TITULO_FORM, yytext());
            }
            // fall through
          case 82: break;
          case 32:
            { return new Symbol(DERECHA, yytext());
            }
            // fall through
          case 83: break;
          case 33:
            { return new Symbol(CLASS_FICHERO, yytext());
            }
            // fall through
          case 84: break;
          case 34:
            { return new Symbol(PARAM_USUARIO, yytext());
            }
            // fall through
          case 85: break;
          case 35:
            { return new Symbol(FECHA, yytext());
            }
            // fall through
          case 86: break;
          case 36:
            { return new Symbol(CLASS_CHECKBOX, yytext());
            }
            // fall through
          case 87: break;
          case 37:
            { return new Symbol(PARAM_COLUMNAS, yytext());
            }
            // fall through
          case 88: break;
          case 38:
            { return new Symbol(PARAM_OPCIONES, yytext());
            }
            // fall through
          case 89: break;
          case 39:
            { return new Symbol(PARAM_PASSWORD, yytext());
            }
            // fall through
          case 90: break;
          case 40:
            { return new Symbol(IZQUIERDA, yytext());
            }
            // fall through
          case 91: break;
          case 41:
            { return new Symbol(PARAM_REQUERIDO, yytext());
            }
            // fall through
          case 92: break;
          case 42:
            { return new Symbol(PARAM_ALINEACION, yytext());
            }
            // fall through
          case 93: break;
          case 43:
            { return new Symbol(CLASS_AREA_TEXTO, yytext());
            }
            // fall through
          case 94: break;
          case 44:
            { return new Symbol(PARAM_FORMULARIO, yytext());
            }
            // fall through
          case 95: break;
          case 45:
            { return new Symbol(JUSTIFICAR, yytext());
            }
            // fall through
          case 96: break;
          case 46:
            { return new Symbol(CLASS_CAMPO_TEXTO, yytext());
            }
            // fall through
          case 97: break;
          case 47:
            { return new Symbol(PARAM_COMPONENTES, yytext());
            }
            // fall through
          case 98: break;
          case 48:
            { return new Symbol(PARAM_NOMBRE_CAMPO, yytext());
            }
            // fall through
          case 99: break;
          case 49:
            { return new Symbol(PARAM_TEXTO_VISIBLE, yytext());
            }
            // fall through
          case 100: break;
          case 50:
            { return new Symbol(PARAM_FECHA_CREACION, yytext());
            }
            // fall through
          case 101: break;
          case 51:
            { return new Symbol(PARAM_USUARIO_CREACION, yytext());
            }
            // fall through
          case 102: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
