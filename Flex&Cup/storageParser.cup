package analizadores.sintactico;

import java.util.ArrayList;
import java.util.List;
import model.Componente;
import model.Formulario;
import model.Usuario;
import model.errores.ErrorAnalisis;
import java_cup.runtime.Symbol;

parser code {:
    
    private List<ErrorAnalisis> errores = new ArrayList();
    private Usuario user = new Usuario();
    private Formulario form = new Formulario();
    private Componente comp = new Componente();

    public List<ErrorAnalisis> getErrores() {
        return this.errores;
    }

    public Usuario getUsuario(){
        return this.user;
    }

    public Formulario getForm(){
        return this.form;
    }

    private void addComponent() {
        form.getComponentes().add(comp);
        comp = new Componente();
    }

    public void syntax_error(Symbol s) {
        String ss =  (String) s.value;
        StringBuilder descripcion = new StringBuilder("Se esperaba: ");
        expected_token_ids().forEach(x -> descripcion.append(symbl_name_from_id(x)).append(", "));
        System.out.println(ss);
    }

:}

terminal        INICIO_USER, INICIO_FORM;
terminal        COLON, COMMA, OPEN_BRACE, CLOSE_BRACE, OPEN_ROUND_BRACKET, CLOSE_ROUND_BRACKET;

terminal        PARAM_USUARIO, PARAM_PASSWORD, PARAM_FECHA_CREACION;
terminal        PARAM_ID, PARAM_TITULO_FORM, PARAM_NOMBRE_FORM, PARAM_TEMA, PARAM_USUARIO_CREACION;

terminal        PARAM_COMPONENTES, PARAM_NOMBRE_CAMPO, PARAM_FORMULARIO, PARAM_CLASE, PARAM_TEXTO_VISIBLE;
terminal        PARAM_ALINEACION, PARAM_REQUERIDO, PARAM_OPCIONES, PARAM_FILAS, PARAM_COLUMNAS, PARAM_URL;

terminal String      CLASS_CAMPO_TEXTO, CLASS_AREA_TEXTO, CLASS_CHECKBOX, CLASS_RADIO, CLASS_FICHERO, CLASS_IMAGEN, CLASS_COMBO, CLASS_BOTON;
terminal String      CENTRO, IZQUIERDA, DERECHA, JUSTIFICAR;
terminal String      SI, NO, OPCIONES;

terminal String      ID, FECHA, ENTERO, VALUE, LITERAL;
terminal String      DARK, WHITE;

non terminal        inicio, startUserStructure, startFormStructure, startStructure, endStructure;
non terminal        paramsUser, paramUser;
non terminal        paramsForm, paramForm;

non terminal        componentStruct, components, component;

non terminal String         clase, alineacion, required, opciones;
non terminal String         value, fecha, entero, literal, id, tema;

inicio ::= startUserStructure
         | startFormStructure
         ;

startUserStructure ::= INICIO_USER startStructure paramsUser endStructure;
startFormStructure ::= INICIO_FORM startStructure paramsForm endStructure;

startStructure ::= OPEN_ROUND_BRACKET OPEN_BRACE;


/*********************Producciones para parametros de usuario*********************/
paramsUser ::= paramUser COMMA paramsUser
             | paramUser
             ;

paramUser ::= PARAM_USUARIO COLON value:v               {:user.setNombre(v.replace("\"",""));:}
            | PARAM_PASSWORD COLON value:v              {:user.setPassword(v.replace("\"",""));:}
            | PARAM_FECHA_CREACION COLON fecha:f        {:user.setFechaCreacion(f.replace("\"",""));:}
            ;
/*****************Fin de producciones para parametros de usuario*****************/



/*********************Producciones para parametros de form*********************/
paramsForm ::= paramForm COMMA paramsForm
             | paramForm
             ;

paramForm ::= PARAM_NOMBRE_FORM COLON value:v               {:form.setNombre(v.replace("\"",""));:}
            | PARAM_USUARIO_CREACION COLON value:v          {:form.setUsuarioCreacion(v.replace("\"",""));:}
            | PARAM_ID COLON id:i                           {:form.setId(i.replace("\"",""));:}
            | PARAM_FECHA_CREACION COLON fecha:f            {:form.setFechaCreacion(f.replace("\"",""));:}
            | PARAM_TITULO_FORM COLON literal:l             {:form.setTitulo(l.replace("\"",""));:}
            | PARAM_TEMA COLON tema:t                       {:form.setTema(t.replace("\"",""));:}
            | componentStruct
            ;

componentStruct ::= PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET CLOSE_ROUND_BRACKET
                  | PARAM_COMPONENTES COLON OPEN_ROUND_BRACKET components CLOSE_ROUND_BRACKET
                  ;

components ::= component COMMA components                   {:addComponent();:}
             | component                                    {:addComponent();:}
             ;

component ::= PARAM_ID COLON id:i                           {:comp.setId(i);:}
            | PARAM_NOMBRE_CAMPO COLON value:v              {:comp.setNombreCampo(v);:}
            | PARAM_FORMULARIO COLON id:i                   {:comp.setFormulario(i);:}
            | PARAM_CLASE COLON clase:c                     {:comp.setClase(c);:}
            | PARAM_TEXTO_VISIBLE COLON literal:l           {:comp.setTextoVisible(l);:}
            | PARAM_ALINEACION COLON alineacion:a           {:comp.setAlineacion(a);:}
            | PARAM_REQUERIDO COLON required:r              {:comp.setRequerido(r);:}
            | PARAM_OPCIONES COLON opciones:o               {:comp.setOpciones(o);:}
            | PARAM_FILAS COLON entero:e                    {:comp.setNoFilas(e);:}
            | PARAM_COLUMNAS COLON entero:e                 {:comp.setNoColumnas(e);:}
            | PARAM_URL COLON value:v                       {:comp.setUrl(v);:}
            ;
/*****************Fin de producciones para parametros de form*****************/


value ::= VALUE:v           {:RESULT = v;:}
        ;

id ::= ID:i                 {:RESULT = i;:}
     ;

fecha ::= FECHA:f           {:RESULT = f;:}
        ;

literal ::= LITERAL:l       {:RESULT = l;:}
          ;

entero ::= ENTERO:e         {:RESULT = e;:}
         ;

tema ::= DARK:t                 {:RESULT = t;:}
       | WHITE:t                {:RESULT = t;:}
       ;

clase ::= CLASS_CAMPO_TEXTO:c     {:RESULT = c;:}
        | CLASS_AREA_TEXTO:c      {:RESULT = c;:}
        | CLASS_CHECKBOX:c        {:RESULT = c;:}
        | CLASS_RADIO:c           {:RESULT = c;:}
        | CLASS_FICHERO:c         {:RESULT = c;:}
        | CLASS_IMAGEN:c          {:RESULT = c;:}
        | CLASS_COMBO:c           {:RESULT = c;:}
        | CLASS_BOTON:c           {:RESULT = c;:}
        ;

alineacion ::= CENTRO:a           {:RESULT = a;:}
             | IZQUIERDA:a        {:RESULT = a;:}
             | DERECHA:a          {:RESULT = a;:}
             | JUSTIFICAR:a       {:RESULT = a;:}
             ;

required ::= SI:r   {:RESULT =r;:}
           | NO:r   {:RESULT =r;:}
           ;

opciones ::= OPCIONES:o           {:RESULT = o;:}
           ;

endStructure ::= CLOSE_BRACE CLOSE_ROUND_BRACKET;